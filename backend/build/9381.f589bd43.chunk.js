"use strict";
(self["webpackChunkecommerce_demo"] = self["webpackChunkecommerce_demo"] || []).push([[9381],{

/***/ 51991:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  af: () => (/* reexport */ af),
  ar: () => (/* reexport */ ar),
  arDZ: () => (/* reexport */ ar_DZ),
  arEG: () => (/* reexport */ ar_EG),
  arMA: () => (/* reexport */ ar_MA),
  arSA: () => (/* reexport */ ar_SA),
  arTN: () => (/* reexport */ ar_TN),
  az: () => (/* reexport */ az),
  be: () => (/* reexport */ be),
  beTarask: () => (/* reexport */ be_tarask),
  bg: () => (/* reexport */ bg),
  bn: () => (/* reexport */ bn),
  bs: () => (/* reexport */ bs),
  ca: () => (/* reexport */ ca),
  cs: () => (/* reexport */ cs),
  cy: () => (/* reexport */ cy),
  da: () => (/* reexport */ da),
  de: () => (/* reexport */ de),
  deAT: () => (/* reexport */ de_AT),
  el: () => (/* reexport */ el),
  enAU: () => (/* reexport */ en_AU),
  enCA: () => (/* reexport */ en_CA),
  enGB: () => (/* reexport */ en_GB),
  enIE: () => (/* reexport */ en_IE),
  enIN: () => (/* reexport */ en_IN),
  enNZ: () => (/* reexport */ en_NZ),
  enUS: () => (/* reexport */ en_US/* default */.Z),
  enZA: () => (/* reexport */ en_ZA),
  eo: () => (/* reexport */ eo),
  es: () => (/* reexport */ es),
  et: () => (/* reexport */ et),
  eu: () => (/* reexport */ eu),
  faIR: () => (/* reexport */ fa_IR),
  fi: () => (/* reexport */ fi),
  fr: () => (/* reexport */ fr),
  frCA: () => (/* reexport */ fr_CA),
  frCH: () => (/* reexport */ fr_CH),
  fy: () => (/* reexport */ fy),
  gd: () => (/* reexport */ gd),
  gl: () => (/* reexport */ gl),
  gu: () => (/* reexport */ gu),
  he: () => (/* reexport */ he),
  hi: () => (/* reexport */ hi),
  hr: () => (/* reexport */ hr),
  ht: () => (/* reexport */ ht),
  hu: () => (/* reexport */ hu),
  hy: () => (/* reexport */ hy),
  id: () => (/* reexport */ id),
  is: () => (/* reexport */ is),
  it: () => (/* reexport */ it),
  itCH: () => (/* reexport */ it_CH),
  ja: () => (/* reexport */ ja),
  jaHira: () => (/* reexport */ ja_Hira),
  ka: () => (/* reexport */ ka),
  kk: () => (/* reexport */ kk),
  km: () => (/* reexport */ km),
  kn: () => (/* reexport */ kn),
  ko: () => (/* reexport */ ko),
  lb: () => (/* reexport */ lb),
  lt: () => (/* reexport */ lt),
  lv: () => (/* reexport */ lv),
  mk: () => (/* reexport */ mk),
  mn: () => (/* reexport */ mn),
  ms: () => (/* reexport */ ms),
  mt: () => (/* reexport */ mt),
  nb: () => (/* reexport */ nb),
  nl: () => (/* reexport */ nl),
  nlBE: () => (/* reexport */ nl_BE),
  nn: () => (/* reexport */ nn),
  oc: () => (/* reexport */ oc),
  pl: () => (/* reexport */ pl),
  pt: () => (/* reexport */ pt),
  ptBR: () => (/* reexport */ pt_BR),
  ro: () => (/* reexport */ ro),
  ru: () => (/* reexport */ ru),
  sk: () => (/* reexport */ sk),
  sl: () => (/* reexport */ sl),
  sq: () => (/* reexport */ sq),
  sr: () => (/* reexport */ sr),
  srLatn: () => (/* reexport */ sr_Latn),
  sv: () => (/* reexport */ sv),
  ta: () => (/* reexport */ ta),
  te: () => (/* reexport */ te),
  th: () => (/* reexport */ th),
  tr: () => (/* reexport */ tr),
  ug: () => (/* reexport */ ug),
  uk: () => (/* reexport */ uk),
  uz: () => (/* reexport */ uz),
  uzCyrl: () => (/* reexport */ uz_Cyrl),
  vi: () => (/* reexport */ vi),
  zhCN: () => (/* reexport */ zh_CN),
  zhHK: () => (/* reexport */ zh_HK),
  zhTW: () => (/* reexport */ zh_TW)
});

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "minder as 'n sekonde",
    other: 'minder as {{count}} sekondes'
  },
  xSeconds: {
    one: '1 sekonde',
    other: '{{count}} sekondes'
  },
  halfAMinute: "'n halwe minuut",
  lessThanXMinutes: {
    one: "minder as 'n minuut",
    other: 'minder as {{count}} minute'
  },
  xMinutes: {
    one: "'n minuut",
    other: '{{count}} minute'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} ure'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} ure'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dae'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weke'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weke'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maande'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maande'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer as 1 jaar',
    other: 'meer as {{count}} jaar'
  },
  almostXYears: {
    one: 'byna 1 jaar',
    other: 'byna {{count}} jaar'
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'oor ' + result;
    } else {
      return result + ' gelede';
    }
  }
  return result;
};
/* harmony default export */ const _lib_formatDistance = (formatDistance);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
var buildFormatLongFn = __webpack_require__(49526);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/formatLong/index.js

var dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'yyyy/MM/dd'
};
var timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const _lib_formatLong = (formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'verlede' eeee 'om' p",
  yesterday: "'gister om' p",
  today: "'vandag om' p",
  tomorrow: "'m√¥re om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
/* harmony default export */ const _lib_formatRelative = (formatRelative);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
var buildLocalizeFn = __webpack_require__(88486);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/localize/index.js

var eraValues = {
  narrow: ['vC', 'nC'],
  abbreviated: ['vC', 'nC'],
  wide: ['voor Christus', 'na Christus']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1ste kwartaal', '2de kwartaal', '3de kwartaal', '4de kwartaal']
};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mrt', 'Apr', 'Mei', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
  wide: ['Januarie', 'Februarie', 'Maart', 'April', 'Mei', 'Junie', 'Julie', 'Augustus', 'September', 'Oktober', 'November', 'Desember']
};
var dayValues = {
  narrow: ['S', 'M', 'D', 'W', 'D', 'V', 'S'],
  short: ['So', 'Ma', 'Di', 'Wo', 'Do', 'Vr', 'Sa'],
  abbreviated: ['Son', 'Maa', 'Din', 'Woe', 'Don', 'Vry', 'Sat'],
  wide: ['Sondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrydag', 'Saterdag']
};
var dayPeriodValues = {
  narrow: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'middaguur',
    morning: 'oggend',
    afternoon: 'middag',
    evening: 'laat middag',
    night: 'aand'
  },
  abbreviated: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'middaguur',
    morning: 'oggend',
    afternoon: 'middag',
    evening: 'laat middag',
    night: 'aand'
  },
  wide: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'middaguur',
    morning: 'oggend',
    afternoon: 'middag',
    evening: 'laat middag',
    night: 'aand'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'uur die middag',
    morning: 'uur die oggend',
    afternoon: 'uur die middag',
    evening: 'uur die aand',
    night: 'uur die aand'
  },
  abbreviated: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'uur die middag',
    morning: 'uur die oggend',
    afternoon: 'uur die middag',
    evening: 'uur die aand',
    night: 'uur die aand'
  },
  wide: {
    am: 'vm',
    pm: 'nm',
    midnight: 'middernag',
    noon: 'uur die middag',
    morning: 'uur die oggend',
    afternoon: 'uur die middag',
    evening: 'uur die aand',
    night: 'uur die aand'
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 < 20) {
    switch (rem100) {
      case 1:
      case 8:
        return number + 'ste';
      default:
        return number + 'de';
    }
  }
  return number + 'ste';
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const _lib_localize = (localize);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
var buildMatchFn = __webpack_require__(76723);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
var buildMatchPatternFn = __webpack_require__(60974);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/match/index.js


var matchOrdinalNumberPattern = /^(\d+)(ste|de)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?C\.?)/,
  wide: /^((voor|na) Christus)/
};
var parseEraPatterns = {
  any: [/^v/, /^n/]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](st|d)e kwartaal/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
  wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
};
var parseMonthPatterns = {
  narrow: [/^J/i, /^F/i, /^M/i, /^A/i, /^M/i, /^J/i, /^J/i, /^A/i, /^S/i, /^O/i, /^N/i, /^D/i],
  any: [/^Jan/i, /^Feb/i, /^Mrt/i, /^Apr/i, /^Mei/i, /^Jun/i, /^Jul/i, /^Aug/i, /^Sep/i, /^Okt/i, /^Nov/i, /^Dec/i]
};
var matchDayPatterns = {
  narrow: /^[smdwv]/i,
  short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
  abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
  wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
};
var parseDayPatterns = {
  narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
  any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i]
};
var matchDayPeriodPatterns = {
  any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^vm/i,
    pm: /^nm/i,
    midnight: /^middernag/i,
    noon: /^middaguur/i,
    morning: /oggend/i,
    afternoon: /middag/i,
    evening: /laat middag/i,
    night: /aand/i
  }
};
var match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const _lib_match = (match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Afrikaans locale.
 * @language Afrikaans
 * @iso-639-2 afr
 * @author Marnus Weststrate [@marnusw]{@link https://github.com/marnusw}
 */
var locale = {
  code: 'af',
  formatDistance: _lib_formatDistance,
  formatLong: _lib_formatLong,
  formatRelative: _lib_formatRelative,
  localize: _lib_localize,
  match: _lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const af = (locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/formatDistance/index.js
var formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  xSeconds: {
    one: 'ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ´ÿßŸÜŸäÿ™ÿßŸÜ',
    threeToTen: '{{count}} ÿ´ŸàÿßŸÜŸä',
    other: '{{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  halfAMinute: 'ŸÜÿµŸÅ ÿØŸÇŸäŸÇÿ©',
  lessThanXMinutes: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©'
  },
  xMinutes: {
    one: 'ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿØŸÇŸäŸÇÿ™ÿßŸÜ',
    threeToTen: '{{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: '{{count}} ÿØŸÇŸäŸÇÿ©'
  },
  aboutXHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ≥ÿßÿπÿ™ÿßŸÜ',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™',
    other: '{{count}} ÿ≥ÿßÿπÿ©'
  },
  xDays: {
    one: 'ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ŸäŸàŸÖÿßŸÜ',
    threeToTen: '{{count}} ÿ£ŸäÿßŸÖ',
    other: '{{count}} ŸäŸàŸÖ'
  },
  aboutXWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπÿß ÿ™ŸÇÿ±Ÿäÿ®ÿß'
  },
  xWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπÿßŸÜ',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπÿß'
  },
  aboutXMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    other: '{{count}} ÿ¥Ÿáÿ±ÿß ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ',
    two: 'ÿ¥Ÿáÿ±ÿßŸÜ',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±',
    other: '{{count}} ÿ¥Ÿáÿ±ÿß'
  },
  aboutXYears: {
    one: 'ÿ≥ŸÜÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ≥ŸÜÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿß',
    threeToTen: '{{count}} ÿ≥ŸÜŸàÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ≥ŸÜÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xYears: {
    one: 'ÿ≥ŸÜÿ© Ÿàÿßÿ≠ÿØ',
    two: 'ÿ≥ŸÜÿ™ÿßŸÜ',
    threeToTen: '{{count}} ÿ≥ŸÜŸàÿßÿ™',
    other: '{{count}} ÿ≥ŸÜÿ©'
  },
  overXYears: {
    one: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿ≥ŸÜÿ©',
    two: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿ≥ŸÜÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ≥ŸÜŸàÿßÿ™',
    other: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ≥ŸÜÿ©'
  },
  almostXYears: {
    one: 'ŸÖÿß ŸäŸÇÿßÿ±ÿ® ÿ≥ŸÜÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ŸÖÿß ŸäŸÇÿßÿ±ÿ® ÿ≥ŸÜÿ™ŸäŸÜ',
    threeToTen: 'ŸÖÿß ŸäŸÇÿßÿ±ÿ® {{count}} ÿ≥ŸÜŸàÿßÿ™',
    other: 'ŸÖÿß ŸäŸÇÿßÿ±ÿ® {{count}} ÿ≥ŸÜÿ©'
  }
};
var formatDistance_formatDistance = function formatDistance(token, count, options) {
  var usageGroup = formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ÿÆŸÑÿßŸÑ ' + result;
    } else {
      return 'ŸÖŸÜÿ∞ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_lib_formatDistance = (formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/formatLong/index.js

var formatLong_dateFormats = {
  full: 'EEEEÿå do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var formatLong_timeFormats = {
  full: 'HH:mm:ss',
  long: 'HH:mm:ss',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' {{time}}",
  long: "{{date}} 'ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ar_lib_formatLong = (formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/formatRelative/index.js
var formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'ÿßŸÑŸÖÿßÿ∂Ÿä ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' p",
  yesterday: "'ÿßŸÑÿ£ŸÖÿ≥ ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' p",
  today: "'ÿßŸÑŸäŸàŸÖ ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' p",
  tomorrow: "'ÿ∫ÿØÿß ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' p",
  nextWeek: "eeee 'ÿßŸÑŸÇÿßÿØŸÖ ÿπŸÜÿØ ÿßŸÑÿ≥ÿßÿπÿ©' p",
  other: 'P'
};
var formatRelative_formatRelative = function formatRelative(token) {
  return formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_lib_formatRelative = (formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/localize/index.js

var localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ.', 'ÿ®.ŸÖ.'],
  wide: ['ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ']
};
var localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ±1', 'ÿ±2', 'ÿ±3', 'ÿ±4'],
  wide: ['ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ']
};
var localize_monthValues = {
  narrow: ['Ÿä', 'ŸÅ', 'ŸÖ', 'ÿ£', 'ŸÖ', 'Ÿä', 'Ÿä', 'ÿ£', 'ÿ≥', 'ÿ£', 'ŸÜ', 'ÿØ'],
  abbreviated: ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà', 'ŸäŸàŸÑŸäŸà', 'ÿ£ÿ∫ÿ≥ÿ∑ÿ≥', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±'],
  wide: ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà', 'ŸäŸàŸÑŸäŸà', 'ÿ£ÿ∫ÿ≥ÿ∑ÿ≥', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±']
};
var localize_dayValues = {
  narrow: ['ÿ≠', 'ŸÜ', 'ÿ´', 'ÿ±', 'ÿÆ', 'ÿ¨', 'ÿ≥'],
  short: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  abbreviated: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  wide: ['ÿßŸÑÿ£ÿ≠ÿØ', 'ÿßŸÑÿßÿ´ŸÜŸäŸÜ', 'ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿßŸÑÿÆŸÖŸäÿ≥', 'ÿßŸÑÿ¨ŸÖÿπÿ©', 'ÿßŸÑÿ≥ÿ®ÿ™']
};
var localize_dayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    morning: 'ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑÿ∏Ÿáÿ±',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    morning: 'ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑÿ∏Ÿáÿ±',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    morning: 'ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑÿ∏Ÿáÿ±',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ'
  }
};
var localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑÿ∏Ÿáÿ±',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑÿ∏Ÿáÿ±',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑÿ∏Ÿáÿ±',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ'
  }
};
var localize_ordinalNumber = function ordinalNumber(num) {
  return String(num);
};
var localize_localize = {
  ordinalNumber: localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ar_lib_localize = (localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/match/index.js


var match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var match_parseOrdinalNumberPattern = /\d+/i;
var match_matchEraPatterns = {
  narrow: /[ŸÇÿ®]/,
  abbreviated: /[ŸÇÿ®]\.ŸÖ\./,
  wide: /(ŸÇÿ®ŸÑ|ÿ®ÿπÿØ) ÿßŸÑŸÖŸäŸÑÿßÿØ/
};
var match_parseEraPatterns = {
  any: [/ŸÇÿ®ŸÑ/, /ÿ®ÿπÿØ/]
};
var match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /ÿ±[1234]/,
  wide: /ÿßŸÑÿ±ÿ®ÿπ (ÿßŸÑÿ£ŸàŸÑ|ÿßŸÑÿ´ÿßŸÜŸä|ÿßŸÑÿ´ÿßŸÑÿ´|ÿßŸÑÿ±ÿßÿ®ÿπ)/
};
var match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var match_matchMonthPatterns = {
  narrow: /^[ÿ£ŸäŸÅŸÖÿ≥ŸÜÿØ]/,
  abbreviated: /^(ŸäŸÜÿßŸäÿ±|ŸÅÿ®ÿ±ÿßŸäÿ±|ŸÖÿßÿ±ÿ≥|ÿ£ÿ®ÿ±ŸäŸÑ|ŸÖÿßŸäŸà|ŸäŸàŸÜŸäŸà|ŸäŸàŸÑŸäŸà|ÿ£ÿ∫ÿ≥ÿ∑ÿ≥|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/,
  wide: /^(ŸäŸÜÿßŸäÿ±|ŸÅÿ®ÿ±ÿßŸäÿ±|ŸÖÿßÿ±ÿ≥|ÿ£ÿ®ÿ±ŸäŸÑ|ŸÖÿßŸäŸà|ŸäŸàŸÜŸäŸà|ŸäŸàŸÑŸäŸà|ÿ£ÿ∫ÿ≥ÿ∑ÿ≥|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/
};
var match_parseMonthPatterns = {
  narrow: [/^Ÿä/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^Ÿä/i, /^Ÿä/i, /^ÿ£/i, /^ÿ≥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^ŸäŸÜÿßŸäÿ±/i, /^ŸÅÿ®ÿ±ÿßŸäÿ±/i, /^ŸÖÿßÿ±ÿ≥/i, /^ÿ£ÿ®ÿ±ŸäŸÑ/i, /^ŸÖÿßŸäŸà/i, /^ŸäŸàŸÜŸäŸà/i, /^ŸäŸàŸÑŸäŸà/i, /^ÿ£ÿ∫ÿ≥ÿ∑ÿ≥/i, /^ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±/i, /^ÿ£ŸÉÿ™Ÿàÿ®ÿ±/i, /^ŸÜŸàŸÅŸÖÿ®ÿ±/i, /^ÿØŸäÿ≥ŸÖÿ®ÿ±/i]
};
var match_matchDayPatterns = {
  narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
  short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
};
var match_parseDayPatterns = {
  narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
  wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿßÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
  any: [/^ÿ£ÿ≠/i, /^ÿßÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
};
var match_matchDayPeriodPatterns = {
  narrow: /^(ÿµ|ŸÖ|ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ|ÿßŸÑÿ∏Ÿáÿ±|ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±|ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠|ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°|ŸÅŸä ÿßŸÑŸÑŸäŸÑ)/,
  any: /^(ÿµ|ŸÖ|ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ|ÿßŸÑÿ∏Ÿáÿ±|ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±|ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠|ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°|ŸÅŸä ÿßŸÑŸÑŸäŸÑ)/
};
var match_parseDayPeriodPatterns = {
  any: {
    am: /^ÿµ/,
    pm: /^ŸÖ/,
    midnight: /ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸÑŸäŸÑ/,
    noon: /ÿßŸÑÿ∏Ÿáÿ±/,
    afternoon: /ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±/,
    morning: /ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠/,
    evening: /ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°/,
    night: /ŸÅŸä ÿßŸÑŸÑŸäŸÑ/
  }
};
var match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: match_matchOrdinalNumberPattern,
    parsePattern: match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ar_lib_match = (match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Modern Standard Arabic - Al-fussha).
 * @language Modern Standard Arabic
 * @iso-639-2 ara
 * @author Abdallah Hassan [@AbdallahAHO]{@link https://github.com/AbdallahAHO}
 * @author Koussay Haj Kacem [@essana3]{@link https://github.com/essana3}
 */
var ar_locale = {
  code: 'ar',
  formatDistance: ar_lib_formatDistance,
  formatLong: ar_lib_formatLong,
  formatRelative: ar_lib_formatRelative,
  localize: ar_lib_localize,
  match: ar_lib_match,
  options: {
    weekStartsOn: 6 /* Saturday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar = (ar_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/formatDistance/index.js
var _lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  xSeconds: {
    one: 'ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ´ÿßŸÜÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ´ŸàÿßŸÜŸä',
    other: '{{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  halfAMinute: 'ŸÜÿµŸÅ ÿØŸÇŸäŸÇÿ©',
  lessThanXMinutes: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©'
  },
  xMinutes: {
    one: 'ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: '{{count}} ÿØŸÇŸäŸÇÿ©'
  },
  aboutXHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™',
    other: '{{count}} ÿ≥ÿßÿπÿ©'
  },
  xDays: {
    one: 'ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ŸäŸàŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ŸäÿßŸÖ',
    other: '{{count}} ŸäŸàŸÖ'
  },
  aboutXWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ'
  },
  aboutXMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±',
    other: '{{count}} ÿ¥Ÿáÿ±'
  },
  aboutXYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ÿπÿßŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ',
    other: '{{count}} ÿπÿßŸÖ'
  },
  overXYears: {
    one: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖ',
    two: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖŸäŸÜ',
    threeToTen: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ£ÿπŸàÿßŸÖ',
    other: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿπÿßŸÖ'
  },
  almostXYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  }
};
var _lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  var usageGroup = _lib_formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ŸÅŸä ÿÆŸÑÿßŸÑ ' + result;
    } else {
      return 'ŸÖŸÜÿ∞ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_DZ_lib_formatDistance = (_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/formatLong/index.js

var _lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var _lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var _lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿπŸÜÿØ' {{time}}",
  long: "{{date}} 'ÿπŸÜÿØ' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var _lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: _lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: _lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: _lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ar_DZ_lib_formatLong = (_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/formatRelative/index.js
var _lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ÿ£ÿÆÿ±' eeee 'ÿπŸÜÿØ' p",
  yesterday: "'ÿ£ŸÖÿ≥ ÿπŸÜÿØ' p",
  today: "'ÿßŸÑŸäŸàŸÖ ÿπŸÜÿØ' p",
  tomorrow: "'ÿ∫ÿØÿßŸã ÿπŸÜÿØ' p",
  nextWeek: "eeee 'ÿπŸÜÿØ' p",
  other: 'P'
};
var _lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return _lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_DZ_lib_formatRelative = (_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/localize/index.js

var _lib_localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ.', 'ÿ®.ŸÖ.'],
  wide: ['ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ']
};
var _lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ±1', 'ÿ±2', 'ÿ±3', 'ÿ±4'],
  wide: ['ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ']
};
var _lib_localize_monthValues = {
  narrow: ['ÿ¨', 'ŸÅ', 'ŸÖ', 'ÿ£', 'ŸÖ', 'ÿ¨', 'ÿ¨', 'ÿ£', 'ÿ≥', 'ÿ£', 'ŸÜ', 'ÿØ'],
  abbreviated: ['ÿ¨ÿßŸÜŸÄ', 'ŸÅŸäŸÅŸÄ', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ŸÅÿ±ŸäŸÑ', 'ŸÖÿßŸäŸÄ', 'ÿ¨ŸàÿßŸÜŸÄ', 'ÿ¨ŸàŸäŸÄ', 'ÿ£Ÿàÿ™', 'ÿ≥ÿ®ÿ™ŸÄ', 'ÿ£ŸÉÿ™ŸÄ', 'ŸÜŸàŸÅŸÄ', 'ÿØŸäÿ≥ŸÄ'],
  wide: ['ÿ¨ÿßŸÜŸÅŸä', 'ŸÅŸäŸÅÿ±Ÿä', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ŸÅÿ±ŸäŸÑ', 'ŸÖÿßŸä', 'ÿ¨ŸàÿßŸÜ', 'ÿ¨ŸàŸäŸÑŸäÿ©', 'ÿ£Ÿàÿ™', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±']
};
var _lib_localize_dayValues = {
  narrow: ['ÿ≠', 'ŸÜ', 'ÿ´', 'ÿ±', 'ÿÆ', 'ÿ¨', 'ÿ≥'],
  short: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  abbreviated: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸÄ', 'ÿ´ŸÑÿß', 'ÿ£ÿ±ÿ®ŸÄ', 'ÿÆŸÖŸäŸÄ', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  wide: ['ÿßŸÑÿ£ÿ≠ÿØ', 'ÿßŸÑÿßÿ´ŸÜŸäŸÜ', 'ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿßŸÑÿÆŸÖŸäÿ≥', 'ÿßŸÑÿ¨ŸÖÿπÿ©', 'ÿßŸÑÿ≥ÿ®ÿ™']
};
var _lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  }
};
var _lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  }
};
var _lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
};
var _lib_localize_localize = {
  ordinalNumber: _lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: _lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ar_DZ_lib_localize = (_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/match/index.js


var _lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var _lib_match_parseOrdinalNumberPattern = /\d+/i;
var _lib_match_matchEraPatterns = {
  narrow: /^(ŸÇ|ÿ®)/i,
  abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ŸÖ\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ)/i
};
var _lib_match_parseEraPatterns = {
  any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
};
var _lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ÿ±[1234]/i,
  wide: /^ÿßŸÑÿ±ÿ®ÿπ [1234]/i
};
var _lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var _lib_match_matchMonthPatterns = {
  narrow: /^[ÿ¨ŸÅŸÖÿ£ÿ≥ŸÜÿØ]/i,
  abbreviated: /^(ÿ¨ÿßŸÜ|ŸÅŸäŸÅ|ŸÖÿßÿ±|ÿ£ŸÅÿ±|ŸÖÿßŸä|ÿ¨Ÿàÿß|ÿ¨ŸàŸä|ÿ£Ÿàÿ™|ÿ≥ÿ®ÿ™|ÿ£ŸÉÿ™|ŸÜŸàŸÅ|ÿØŸäÿ≥)/i,
  wide: /^(ÿ¨ÿßŸÜŸÅŸä|ŸÅŸäŸÅÿ±Ÿä|ŸÖÿßÿ±ÿ≥|ÿ£ŸÅÿ±ŸäŸÑ|ŸÖÿßŸä|ÿ¨ŸàÿßŸÜ|ÿ¨ŸàŸäŸÑŸäÿ©|ÿ£Ÿàÿ™|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/i
};
var _lib_match_parseMonthPatterns = {
  narrow: [/^ÿ¨/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^ÿ¨/i, /^ÿ¨/i, /^ÿ£/i, /^ÿ≥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^ÿ¨ÿßŸÜ/i, /^ŸÅŸäŸÅ/i, /^ŸÖÿßÿ±/i, /^ÿ£ŸÅÿ±/i, /^ŸÖÿßŸä/i, /^ÿ¨Ÿàÿß/i, /^ÿ¨ŸàŸä/i, /^ÿ£Ÿàÿ™/i, /^ÿ≥ÿ®ÿ™/i, /^ÿ£ŸÉÿ™/i, /^ŸÜŸàŸÅ/i, /^ÿØŸäÿ≥/i]
};
var _lib_match_matchDayPatterns = {
  narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
  short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜ|ÿ´ŸÑÿß|ÿ£ÿ±ÿ®|ÿÆŸÖŸä|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
};
var _lib_match_parseDayPatterns = {
  narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
  wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿßÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
  any: [/^ÿ£ÿ≠/i, /^ÿßÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
};
var _lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var _lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var _lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: _lib_match_matchOrdinalNumberPattern,
    parsePattern: _lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: _lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: _lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return Number(index) + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: _lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: _lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: _lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ar_DZ_lib_match = (_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Algerian Arabic).
 * @language Algerian Arabic
 * @iso-639-2 ara
 * @author Badreddine Boumaza [@badre429]{@link https://github.com/badre429}
 * @author Ahmed ElShahat [@elshahat]{@link https://github.com/elshahat}
 */
var ar_DZ_locale = {
  code: 'ar-DZ',
  formatDistance: ar_DZ_lib_formatDistance,
  formatLong: ar_DZ_lib_formatLong,
  formatRelative: ar_DZ_lib_formatRelative,
  localize: ar_DZ_lib_localize,
  match: ar_DZ_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_DZ = (ar_DZ_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/formatDistance/index.js
var ar_EG_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  xSeconds: {
    one: 'ÿ´ÿßŸÜŸäÿ©',
    two: 'ÿ´ÿßŸÜŸäÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ´ŸàÿßŸÜŸä',
    other: '{{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  halfAMinute: 'ŸÜÿµ ÿØŸÇŸäŸÇÿ©',
  lessThanXMinutes: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßŸäŸÇ',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©'
  },
  xMinutes: {
    one: 'ÿØŸÇŸäŸÇÿ©',
    two: 'ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿØŸÇÿßŸäŸÇ',
    other: '{{count}} ÿØŸÇŸäŸÇÿ©'
  },
  aboutXHours: {
    one: 'ÿ≠ŸàÿßŸÑŸä ÿ≥ÿßÿπÿ©',
    two: 'ÿ≠ŸàÿßŸÑŸä ÿ≥ÿßÿπÿ™ŸäŸÜ',
    threeToTen: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ≥ÿßÿπÿßÿ™',
    other: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ≥ÿßÿπÿ©'
  },
  xHours: {
    one: 'ÿ≥ÿßÿπÿ©',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™',
    other: '{{count}} ÿ≥ÿßÿπÿ©'
  },
  xDays: {
    one: 'ŸäŸàŸÖ',
    two: 'ŸäŸàŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ŸäÿßŸÖ',
    other: '{{count}} ŸäŸàŸÖ'
  },
  aboutXWeeks: {
    one: 'ÿ≠ŸàÿßŸÑŸä ÿ£ÿ≥ÿ®Ÿàÿπ',
    two: 'ÿ≠ŸàÿßŸÑŸä ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ',
    threeToTen: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ',
    other: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ£ÿ≥ÿ®Ÿàÿπ'
  },
  xWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ'
  },
  aboutXMonths: {
    one: 'ÿ≠ŸàÿßŸÑŸä ÿ¥Ÿáÿ±',
    two: 'ÿ≠ŸàÿßŸÑŸä ÿ¥Ÿáÿ±ŸäŸÜ',
    threeToTen: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ£ÿ¥Ÿáÿ±',
    other: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ¥Ÿáÿ±'
  },
  xMonths: {
    one: 'ÿ¥Ÿáÿ±',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±',
    other: '{{count}} ÿ¥Ÿáÿ±'
  },
  aboutXYears: {
    one: 'ÿ≠ŸàÿßŸÑŸä ÿ≥ŸÜÿ©',
    two: 'ÿ≠ŸàÿßŸÑŸä ÿ≥ŸÜÿ™ŸäŸÜ',
    threeToTen: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ≥ŸÜŸäŸÜ',
    other: 'ÿ≠ŸàÿßŸÑŸä {{count}} ÿ≥ŸÜÿ©'
  },
  xYears: {
    one: 'ÿπÿßŸÖ',
    two: 'ÿπÿßŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ',
    other: '{{count}} ÿπÿßŸÖ'
  },
  overXYears: {
    one: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿ≥ŸÜÿ©',
    two: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿ≥ŸÜÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ≥ŸÜŸäŸÜ',
    other: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ≥ŸÜÿ©'
  },
  almostXYears: {
    one: 'ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß'
  }
};
var ar_EG_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ar_EG_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A \u062E\u0644\u0627\u0644 ".concat(result);
    } else {
      return "\u0645\u0646\u0630 ".concat(result);
    }
  }
  return result;
};
/* harmony default export */ const ar_EG_lib_formatDistance = (ar_EG_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/formatLong/index.js

var ar_EG_lib_formatLong_dateFormats = {
  full: 'EEEEÿå do MMMM y',
  long: 'do MMMM y',
  medium: 'dd/MMM/y',
  short: 'd/MM/y'
};
var ar_EG_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var ar_EG_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿßŸÑÿ≥ÿßÿπÿ©' {{time}}",
  long: "{{date}} 'ÿßŸÑÿ≥ÿßÿπÿ©' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ar_EG_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_EG_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_EG_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_EG_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ar_EG_lib_formatLong = (ar_EG_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/formatRelative/index.js
var ar_EG_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'ÿßŸÑŸÑŸä ÿ¨ÿßŸä ÿßŸÑÿ≥ÿßÿπÿ©' p",
  yesterday: "'ÿ•ŸÖÿ®ÿßÿ±ÿ≠ ÿßŸÑÿ≥ÿßÿπÿ©' p",
  today: "'ÿßŸÑŸÜŸáÿßÿ±ÿØÿ© ÿßŸÑÿ≥ÿßÿπÿ©' p",
  tomorrow: "'ÿ®ŸÉÿ±ÿ© ÿßŸÑÿ≥ÿßÿπÿ©' p",
  nextWeek: "eeee 'ÿßŸÑÿ≥ÿßÿπÿ©' p",
  other: 'P'
};
var ar_EG_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ar_EG_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_EG_lib_formatRelative = (ar_EG_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/localize/index.js

var ar_EG_lib_localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ', 'ÿ®.ŸÖ'],
  wide: ['ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ']
};
var ar_EG_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ±1', 'ÿ±2', 'ÿ±3', 'ÿ±4'],
  wide: ['ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ']
};
var ar_EG_lib_localize_monthValues = {
  narrow: ['Ÿä', 'ŸÅ', 'ŸÖ', 'ÿ£', 'ŸÖ', 'Ÿä', 'Ÿä', 'ÿ£', 'ÿ≥', 'ÿ£', 'ŸÜ', 'ÿØ'],
  abbreviated: ['ŸäŸÜÿß', 'ŸÅÿ®ÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸÄ', 'ŸäŸàŸÑŸÄ', 'ÿ£ÿ∫ÿ≥ŸÄ', 'ÿ≥ÿ®ÿ™ŸÄ', 'ÿ£ŸÉÿ™ŸÄ', 'ŸÜŸàŸÅŸÄ', 'ÿØŸäÿ≥ŸÄ'],
  wide: ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà', 'ŸäŸàŸÑŸäŸà', 'ÿ£ÿ∫ÿ≥ÿ∑ÿ≥', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±']
};
var ar_EG_lib_localize_dayValues = {
  narrow: ['ÿ≠', 'ŸÜ', 'ÿ´', 'ÿ±', 'ÿÆ', 'ÿ¨', 'ÿ≥'],
  short: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  abbreviated: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  wide: ['ÿßŸÑÿ£ÿ≠ÿØ', 'ÿßŸÑÿßÿ´ŸÜŸäŸÜ', 'ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿßŸÑÿÆŸÖŸäÿ≥', 'ÿßŸÑÿ¨ŸÖÿπÿ©', 'ÿßŸÑÿ≥ÿ®ÿ™']
};
var ar_EG_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°Ÿã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±ÿßŸã',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°Ÿã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±ÿßŸã',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°Ÿã',
    night: 'ŸÑŸäŸÑÿßŸã'
  }
};
var ar_EG_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±ÿßŸã',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿ∏Ÿáÿ±ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  }
};
var ar_EG_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ar_EG_lib_localize_localize = {
  ordinalNumber: ar_EG_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ar_EG_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ar_EG_lib_localize = (ar_EG_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/match/index.js


var ar_EG_lib_match_matchOrdinalNumberPattern = /^(\d+)/;
var ar_EG_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_EG_lib_match_matchEraPatterns = {
  narrow: /^(ŸÇ|ÿ®)/g,
  abbreviated: /^(ŸÇ.ŸÖ|ÿ®.ŸÖ)/g,
  wide: /^(ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ)/g
};
var ar_EG_lib_match_parseEraPatterns = {
  any: [/^ŸÇ/g, /^ÿ®/g]
};
var ar_EG_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/,
  abbreviated: /^ÿ±[1234]/,
  wide: /^ÿßŸÑÿ±ÿ®ÿπ (ÿßŸÑÿ£ŸàŸÑ|ÿßŸÑÿ´ÿßŸÜŸä|ÿßŸÑÿ´ÿßŸÑÿ´|ÿßŸÑÿ±ÿßÿ®ÿπ)/
};
var ar_EG_lib_match_parseQuarterPatterns = {
  wide: [/ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ/, /ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä/, /ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´/, /ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ/],
  any: [/1/, /2/, /3/, /4/]
};
var ar_EG_lib_match_matchMonthPatterns = {
  narrow: /^(Ÿä|ŸÅ|ŸÖ|ÿ£|ÿ≥|ŸÜ|ÿØ)/,
  abbreviated: /^(ŸäŸÜÿß|ŸÅÿ®ÿ±|ŸÖÿßÿ±ÿ≥|ÿ£ÿ®ÿ±ŸäŸÑ|ŸÖÿßŸäŸà|ŸäŸàŸÜŸÄ|ŸäŸàŸÑŸÄ|ÿ£ÿ∫ÿ≥ŸÄ|ÿ≥ÿ®ÿ™ŸÄ|ÿ£ŸÉÿ™ŸÄ|ŸÜŸàŸÅŸÄ|ÿØŸäÿ≥ŸÄ)/,
  wide: /^(ŸäŸÜÿßŸäÿ±|ŸÅÿ®ÿ±ÿßŸäÿ±|ŸÖÿßÿ±ÿ≥|ÿ£ÿ®ÿ±ŸäŸÑ|ŸÖÿßŸäŸà|ŸäŸàŸÜŸäŸà|ŸäŸàŸÑŸäŸà|ÿ£ÿ∫ÿ≥ÿ∑ÿ≥|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/
};
var ar_EG_lib_match_parseMonthPatterns = {
  narrow: [/^Ÿä/, /^ŸÅ/, /^ŸÖ/, /^ÿ£/, /^ŸÖ/, /^Ÿä/, /^Ÿä/, /^ÿ£/, /^ÿ≥/, /^ÿ£/, /^ŸÜ/, /^ÿØ/],
  any: [/^ŸäŸÜÿß/, /^ŸÅÿ®ÿ±/, /^ŸÖÿßÿ±ÿ≥/, /^ÿ£ÿ®ÿ±ŸäŸÑ/, /^ŸÖÿßŸäŸà/, /^ŸäŸàŸÜ/, /^ŸäŸàŸÑ/, /^ÿ£ÿ∫ÿ≥/, /^ÿ≥ÿ®ÿ™/, /^ÿ£ŸÉÿ™/, /^ŸÜŸàŸÅ/, /^ÿØŸäÿ≥/]
};
var ar_EG_lib_match_matchDayPatterns = {
  narrow: /^(ÿ≠|ŸÜ|ÿ´|ÿ±|ÿÆ|ÿ¨|ÿ≥)/,
  short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/,
  abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/,
  wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/
};
var ar_EG_lib_match_parseDayPatterns = {
  narrow: [/^ÿ≠/, /^ŸÜ/, /^ÿ´/, /^ÿ±/, /^ÿÆ/, /^ÿ¨/, /^ÿ≥/],
  any: [/ÿ£ÿ≠ÿØ/, /ÿßÿ´ŸÜŸäŸÜ/, /ÿ´ŸÑÿßÿ´ÿßÿ°/, /ÿ£ÿ±ÿ®ÿπÿßÿ°/, /ÿÆŸÖŸäÿ≥/, /ÿ¨ŸÖÿπÿ©/, /ÿ≥ÿ®ÿ™/]
};
var ar_EG_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ÿµ|ŸÖ|ŸÜ|ÿ∏|ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠|ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±|ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°|ŸÅŸä ÿßŸÑŸÑŸäŸÑ)/,
  abbreviated: /^(ÿµ|ŸÖ|ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ|ÿ∏Ÿáÿ±ÿßŸã|ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠|ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±|ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°|ŸÅŸä ÿßŸÑŸÑŸäŸÑ)/,
  wide: /^(ÿµ|ŸÖ|ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ|ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠|ÿ∏Ÿáÿ±ÿßŸã|ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±|ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°|ŸÅŸä ÿßŸÑŸÑŸäŸÑ)/,
  any: /^(ÿµ|ŸÖ|ÿµÿ®ÿßÿ≠|ÿ∏Ÿáÿ±|ŸÖÿ≥ÿßÿ°|ŸÑŸäŸÑ)/
};
var ar_EG_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ÿµ/,
    pm: /^ŸÖ/,
    midnight: /^ŸÜ/,
    noon: /^ÿ∏/,
    morning: /^ÿµ/,
    afternoon: /^ÿ®ÿπÿØ/,
    evening: /^ŸÖ/,
    night: /^ŸÑ/
  }
};
var ar_EG_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_EG_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_EG_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_EG_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_EG_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_EG_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_EG_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ar_EG_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ar_EG_lib_match = (ar_EG_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Egypt).
 * @language Arabic
 * @iso-639-2 ara
 * @author AbdAllah AbdElFattah [@AbdAllahAbdElFattah13]{@link https://github.com/AbdAllahAbdElFattah13}
 */
var ar_EG_locale = {
  code: 'ar-EG',
  formatDistance: ar_EG_lib_formatDistance,
  formatLong: ar_EG_lib_formatLong,
  formatRelative: ar_EG_lib_formatRelative,
  localize: ar_EG_lib_localize,
  match: ar_EG_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_EG = (ar_EG_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/formatDistance/index.js
var ar_MA_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  xSeconds: {
    one: 'ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ´ÿßŸÜÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ´ŸàÿßŸÜŸä',
    other: '{{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  halfAMinute: 'ŸÜÿµŸÅ ÿØŸÇŸäŸÇÿ©',
  lessThanXMinutes: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©'
  },
  xMinutes: {
    one: 'ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: '{{count}} ÿØŸÇŸäŸÇÿ©'
  },
  aboutXHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™',
    other: '{{count}} ÿ≥ÿßÿπÿ©'
  },
  xDays: {
    one: 'ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ŸäŸàŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ŸäÿßŸÖ',
    other: '{{count}} ŸäŸàŸÖ'
  },
  aboutXWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ'
  },
  aboutXMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±',
    other: '{{count}} ÿ¥Ÿáÿ±'
  },
  aboutXYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ÿπÿßŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ',
    other: '{{count}} ÿπÿßŸÖ'
  },
  overXYears: {
    one: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖ',
    two: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖŸäŸÜ',
    threeToTen: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ£ÿπŸàÿßŸÖ',
    other: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿπÿßŸÖ'
  },
  almostXYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  }
};
var ar_MA_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  var usageGroup = ar_MA_lib_formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ŸÅŸä ÿÆŸÑÿßŸÑ ' + result;
    } else {
      return 'ŸÖŸÜÿ∞ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_MA_lib_formatDistance = (ar_MA_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/formatLong/index.js

var ar_MA_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var ar_MA_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var ar_MA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿπŸÜÿØ' {{time}}",
  long: "{{date}} 'ÿπŸÜÿØ' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ar_MA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_MA_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_MA_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_MA_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ar_MA_lib_formatLong = (ar_MA_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/formatRelative/index.js
var ar_MA_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ÿ£ÿÆÿ±' eeee 'ÿπŸÜÿØ' p",
  yesterday: "'ÿ£ŸÖÿ≥ ÿπŸÜÿØ' p",
  today: "'ÿßŸÑŸäŸàŸÖ ÿπŸÜÿØ' p",
  tomorrow: "'ÿ∫ÿØÿßŸã ÿπŸÜÿØ' p",
  nextWeek: "eeee 'ÿπŸÜÿØ' p",
  other: 'P'
};
var ar_MA_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ar_MA_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_MA_lib_formatRelative = (ar_MA_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/localize/index.js

var ar_MA_lib_localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ.', 'ÿ®.ŸÖ.'],
  wide: ['ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ']
};
var ar_MA_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ±1', 'ÿ±2', 'ÿ±3', 'ÿ±4'],
  wide: ['ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ']
};
var ar_MA_lib_localize_monthValues = {
  narrow: ['Ÿä', 'ŸÅ', 'ŸÖ', 'ÿ£', 'ŸÖ', 'Ÿä', 'Ÿä', 'ÿ∫', 'ÿ¥', 'ÿ£', 'ŸÜ', 'ÿØ'],
  abbreviated: ['ŸäŸÜÿß', 'ŸÅÿ®ÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸä', 'ŸäŸàŸÜŸÄ', 'ŸäŸàŸÑŸÄ', 'ÿ∫ÿ¥ÿ™', 'ÿ¥ÿ™ŸÜŸÄ', 'ÿ£ŸÉÿ™ŸÄ', 'ŸÜŸàŸÜŸÄ', 'ÿØÿ¨ŸÜŸÄ'],
  wide: ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸä', 'ŸäŸàŸÜŸäŸà', 'ŸäŸàŸÑŸäŸàÿ≤', 'ÿ∫ÿ¥ÿ™', 'ÿ¥ÿ™ŸÜÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÜÿ®ÿ±', 'ÿØÿ¨ŸÜÿ®ÿ±']
};
var ar_MA_lib_localize_dayValues = {
  narrow: ['ÿ≠', 'ŸÜ', 'ÿ´', 'ÿ±', 'ÿÆ', 'ÿ¨', 'ÿ≥'],
  short: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  abbreviated: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸÄ', 'ÿ´ŸÑÿß', 'ÿ£ÿ±ÿ®ŸÄ', 'ÿÆŸÖŸäŸÄ', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  wide: ['ÿßŸÑÿ£ÿ≠ÿØ', 'ÿßŸÑÿ•ÿ´ŸÜŸäŸÜ', 'ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿßŸÑÿÆŸÖŸäÿ≥', 'ÿßŸÑÿ¨ŸÖÿπÿ©', 'ÿßŸÑÿ≥ÿ®ÿ™']
};
var ar_MA_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  }
};
var ar_MA_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  }
};
var ar_MA_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
};
var ar_MA_lib_localize_localize = {
  ordinalNumber: ar_MA_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ar_MA_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ar_MA_lib_localize = (ar_MA_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/match/index.js


var ar_MA_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ar_MA_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_MA_lib_match_matchEraPatterns = {
  narrow: /^(ŸÇ|ÿ®)/i,
  abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ŸÖ\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ)/i
};
var ar_MA_lib_match_parseEraPatterns = {
  any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
};
var ar_MA_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ÿ±[1234]/i,
  wide: /^ÿßŸÑÿ±ÿ®ÿπ [1234]/i
};
var ar_MA_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ar_MA_lib_match_matchMonthPatterns = {
  narrow: /^[ŸäŸÅŸÖÿ£ŸÖÿ≥ŸÜÿØ]/i,
  abbreviated: /^(ŸäŸÜ|ŸÅ|ŸÖÿßÿ±|ÿ£ÿ®|ŸÖÿßŸä|ŸäŸàŸÜ|ŸäŸàŸÑ|ÿ∫ÿ¥|ÿ¥ÿ™|ÿ£ŸÉ|ŸÜ|ÿØ)/i,
  wide: /^(ŸäŸÜ|ŸÅ|ŸÖÿßÿ±|ÿ£ÿ®|ŸÖÿßŸä|ŸäŸàŸÜ|ŸäŸàŸÑ|ÿ∫ÿ¥|ÿ¥ÿ™|ÿ£ŸÉ|ŸÜ|ÿØ)/i
};
var ar_MA_lib_match_parseMonthPatterns = {
  narrow: [/^Ÿä/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^Ÿä/i, /^Ÿä/i, /^ÿ∫/i, /^ÿ¥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^ŸäŸÜ/i, /^ŸÅÿ®/i, /^ŸÖÿßÿ±/i, /^ÿ£ÿ®/i, /^ŸÖÿßŸä/i, /^ŸäŸàŸÜ/i, /^ŸäŸàŸÑ/i, /^ÿ∫ÿ¥ÿ™/i, /^ÿ¥/i, /^ÿ£ŸÉ/i, /^ŸÜ/i, /^ÿØ/i]
};
var ar_MA_lib_match_matchDayPatterns = {
  narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
  short: /^(ÿ£ÿ≠ÿØ|ÿ•ÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  abbreviated: /^(ÿ£ÿ≠ÿØ|ÿ•ÿ´ŸÜ|ÿ´ŸÑÿß|ÿ£ÿ±ÿ®|ÿÆŸÖŸä|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿ•ÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
};
var ar_MA_lib_match_parseDayPatterns = {
  narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
  wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿ•ÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
  any: [/^ÿ£ÿ≠/i, /^ÿ•ÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
};
var ar_MA_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var ar_MA_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var ar_MA_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_MA_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_MA_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_MA_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_MA_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return Number(index) + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_MA_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_MA_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ar_MA_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ar_MA_lib_match = (ar_MA_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Moroccan Arabic).
 * @language Moroccan Arabic
 * @iso-639-2 ara
 * @author Achraf Rrami [@rramiachraf]{@link https://github.com/rramiachraf}
 */
var ar_MA_locale = {
  code: 'ar-MA',
  formatDistance: ar_MA_lib_formatDistance,
  formatLong: ar_MA_lib_formatLong,
  formatRelative: ar_MA_lib_formatRelative,
  localize: ar_MA_lib_localize,
  match: ar_MA_lib_match,
  options: {
    // Monday is 1
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_MA = (ar_MA_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/formatDistance/index.js
var ar_SA_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  xSeconds: {
    one: 'ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ´ÿßŸÜÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ´ŸàÿßŸÜŸä',
    other: '{{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  halfAMinute: 'ŸÜÿµŸÅ ÿØŸÇŸäŸÇÿ©',
  lessThanXMinutes: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©'
  },
  xMinutes: {
    one: 'ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿØŸÇÿßÿ¶ŸÇ',
    other: '{{count}} ÿØŸÇŸäŸÇÿ©'
  },
  aboutXHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xHours: {
    one: 'ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ©',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ≥ÿßÿπÿßÿ™',
    other: '{{count}} ÿ≥ÿßÿπÿ©'
  },
  xDays: {
    one: 'ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ŸäŸàŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ŸäÿßŸÖ',
    other: '{{count}} ŸäŸàŸÖ'
  },
  aboutXWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xWeeks: {
    one: 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ',
    two: 'ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ',
    other: '{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ'
  },
  aboutXMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xMonths: {
    one: 'ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±',
    other: '{{count}} ÿ¥Ÿáÿ±'
  },
  aboutXYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  },
  xYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ',
    two: 'ÿπÿßŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ',
    other: '{{count}} ÿπÿßŸÖ'
  },
  overXYears: {
    one: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖ',
    two: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖŸäŸÜ',
    threeToTen: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ£ÿπŸàÿßŸÖ',
    other: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿπÿßŸÖ'
  },
  almostXYears: {
    one: 'ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã'
  }
};
var ar_SA_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ar_SA_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ŸÅŸä ÿÆŸÑÿßŸÑ ' + result;
    } else {
      return 'ŸÖŸÜÿ∞ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_SA_lib_formatDistance = (ar_SA_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/formatLong/index.js

var ar_SA_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var ar_SA_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var ar_SA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿπŸÜÿØ' {{time}}",
  long: "{{date}} 'ÿπŸÜÿØ' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ar_SA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_SA_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_SA_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_SA_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ar_SA_lib_formatLong = (ar_SA_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/formatRelative/index.js
var ar_SA_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ÿ£ÿÆÿ±' eeee 'ÿπŸÜÿØ' p",
  yesterday: "'ÿ£ŸÖÿ≥ ÿπŸÜÿØ' p",
  today: "'ÿßŸÑŸäŸàŸÖ ÿπŸÜÿØ' p",
  tomorrow: "'ÿ∫ÿØÿßŸã ÿπŸÜÿØ' p",
  nextWeek: "eeee 'ÿπŸÜÿØ' p",
  other: 'P'
};
var ar_SA_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ar_SA_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_SA_lib_formatRelative = (ar_SA_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/localize/index.js

var ar_SA_lib_localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ.', 'ÿ®.ŸÖ.'],
  wide: ['ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ']
};
var ar_SA_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ±1', 'ÿ±2', 'ÿ±3', 'ÿ±4'],
  wide: ['ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ']
};
var ar_SA_lib_localize_monthValues = {
  narrow: ['Ÿä', 'ŸÅ', 'ŸÖ', 'ÿ£', 'ŸÖ', 'Ÿä', 'Ÿä', 'ÿ£', 'ÿ≥', 'ÿ£', 'ŸÜ', 'ÿØ'],
  abbreviated: ['ŸäŸÜÿß', 'ŸÅÿ®ÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸÄ', 'ŸäŸàŸÑŸÄ', 'ÿ£ÿ∫ÿ≥ŸÄ', 'ÿ≥ÿ®ÿ™ŸÄ', 'ÿ£ŸÉÿ™ŸÄ', 'ŸÜŸàŸÅŸÄ', 'ÿØŸäÿ≥ŸÄ'],
  wide: ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà', 'ŸäŸàŸÑŸäŸà', 'ÿ£ÿ∫ÿ≥ÿ∑ÿ≥', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±']
};
var ar_SA_lib_localize_dayValues = {
  narrow: ['ÿ≠', 'ŸÜ', 'ÿ´', 'ÿ±', 'ÿÆ', 'ÿ¨', 'ÿ≥'],
  short: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  abbreviated: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸÄ', 'ÿ´ŸÑÿß', 'ÿ£ÿ±ÿ®ŸÄ', 'ÿÆŸÖŸäŸÄ', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  wide: ['ÿßŸÑÿ£ÿ≠ÿØ', 'ÿßŸÑÿßÿ´ŸÜŸäŸÜ', 'ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿßŸÑÿÆŸÖŸäÿ≥', 'ÿßŸÑÿ¨ŸÖÿπÿ©', 'ÿßŸÑÿ≥ÿ®ÿ™']
};
var ar_SA_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÖÿ≥ÿßÿ°ÿßŸã',
    night: 'ŸÑŸäŸÑÿßŸã'
  }
};
var ar_SA_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ŸÖ',
    midnight: 'ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿßÿ≠ÿßŸã',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±',
    evening: 'ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ'
  }
};
var ar_SA_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
};
var ar_SA_lib_localize_localize = {
  ordinalNumber: ar_SA_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ar_SA_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ar_SA_lib_localize = (ar_SA_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/match/index.js


var ar_SA_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ar_SA_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_SA_lib_match_matchEraPatterns = {
  narrow: /^(ŸÇ|ÿ®)/i,
  abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ŸÖ\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ)/i
};
var ar_SA_lib_match_parseEraPatterns = {
  any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
};
var ar_SA_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ÿ±[1234]/i,
  wide: /^ÿßŸÑÿ±ÿ®ÿπ [1234]/i
};
var ar_SA_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ar_SA_lib_match_matchMonthPatterns = {
  narrow: /^[ŸäŸÅŸÖÿ£ŸÖÿ≥ŸÜÿØ]/i,
  abbreviated: /^(ŸäŸÜ|ŸÅ|ŸÖÿßÿ±|ÿ£ÿ®|ŸÖÿßŸä|ŸäŸàŸÜ|ŸäŸàŸÑ|ÿ£ÿ∫|ÿ≥|ÿ£ŸÉ|ŸÜ|ÿØ)/i,
  wide: /^(ŸäŸÜ|ŸÅ|ŸÖÿßÿ±|ÿ£ÿ®|ŸÖÿßŸä|ŸäŸàŸÜ|ŸäŸàŸÑ|ÿ£ÿ∫|ÿ≥|ÿ£ŸÉ|ŸÜ|ÿØ)/i
};
var ar_SA_lib_match_parseMonthPatterns = {
  narrow: [/^Ÿä/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^Ÿä/i, /^Ÿä/i, /^ÿ£/i, /^ÿ≥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^ŸäŸÜ/i, /^ŸÅ/i, /^ŸÖÿßÿ±/i, /^ÿ£ÿ®/i, /^ŸÖÿßŸä/i, /^ŸäŸàŸÜ/i, /^ŸäŸàŸÑ/i, /^ÿ£ÿ∫/i, /^ÿ≥/i, /^ÿ£ŸÉ/i, /^ŸÜ/i, /^ÿØ/i]
};
var ar_SA_lib_match_matchDayPatterns = {
  narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
  short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜ|ÿ´ŸÑÿß|ÿ£ÿ±ÿ®|ÿÆŸÖŸä|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
};
var ar_SA_lib_match_parseDayPatterns = {
  narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
  wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿßÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
  any: [/^ÿ£ÿ≠/i, /^ÿßÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
};
var ar_SA_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var ar_SA_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var ar_SA_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_SA_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_SA_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_SA_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_SA_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_SA_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_SA_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ar_SA_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ar_SA_lib_match = (ar_SA_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Sauid Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Dhaifallah Alwadani [@dalwadani]{@link https://github.com/dalwadani}
 */
var ar_SA_locale = {
  code: 'ar-SA',
  formatDistance: ar_SA_lib_formatDistance,
  formatLong: ar_SA_lib_formatLong,
  formatRelative: ar_SA_lib_formatRelative,
  localize: ar_SA_lib_localize,
  match: ar_SA_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_SA = (ar_SA_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/formatDistance/index.js
var ar_TN_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿ≤Ÿàÿ≤ ÿ´ŸàÿßŸÜŸä',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  xSeconds: {
    one: 'ÿ´ÿßŸÜŸäÿ©',
    two: 'ÿ≤Ÿàÿ≤ ÿ´ŸàÿßŸÜŸä',
    threeToTen: '{{count}} ÿ´ŸàÿßŸÜŸä',
    other: '{{count}} ÿ´ÿßŸÜŸäÿ©'
  },
  halfAMinute: 'ŸÜÿµ ÿØŸÇŸäŸÇÿ©',
  lessThanXMinutes: {
    one: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©',
    two: 'ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßŸäŸÇ',
    other: 'ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©'
  },
  xMinutes: {
    one: 'ÿØŸÇŸäŸÇÿ©',
    two: 'ÿØŸÇŸäŸÇÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿØŸÇÿßŸäŸÇ',
    other: '{{count}} ÿØŸÇŸäŸÇÿ©'
  },
  aboutXHours: {
    one: 'ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®',
    threeToTen: '{{count}} ÿ≥ŸàÿßŸäÿπ ÿ™ŸÇÿ±Ÿäÿ®',
    other: '{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®'
  },
  xHours: {
    one: 'ÿ≥ÿßÿπÿ©',
    two: 'ÿ≥ÿßÿπÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ≥ŸàÿßŸäÿπ',
    other: '{{count}} ÿ≥ÿßÿπÿ©'
  },
  xDays: {
    one: 'ŸÜŸáÿßÿ±',
    two: 'ŸÜŸáÿßÿ±ŸäŸÜ',
    threeToTen: '{{count}} ÿ£ŸäÿßŸÖ',
    other: '{{count}} ŸäŸàŸÖ'
  },
  aboutXWeeks: {
    one: 'ÿ¨ŸÖÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®',
    two: 'ÿ¨ŸÖÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®',
    threeToTen: '{{count}} ÿ¨ŸÖÿßÿπ ÿ™ŸÇÿ±Ÿäÿ®',
    other: '{{count}} ÿ¨ŸÖÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®'
  },
  xWeeks: {
    one: 'ÿ¨ŸÖÿπÿ©',
    two: 'ÿ¨ŸÖÿπÿ™ŸäŸÜ',
    threeToTen: '{{count}} ÿ¨ŸÖÿßÿπ',
    other: '{{count}} ÿ¨ŸÖÿπÿ©'
  },
  aboutXMonths: {
    one: 'ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±ÿ© ÿ™ŸÇÿ±Ÿäÿ®',
    other: '{{count}} ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®'
  },
  xMonths: {
    one: 'ÿ¥Ÿáÿ±',
    two: 'ÿ¥Ÿáÿ±ŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿ¥Ÿáÿ±ÿ©',
    other: '{{count}} ÿ¥Ÿáÿ±'
  },
  aboutXYears: {
    one: 'ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®'
  },
  xYears: {
    one: 'ÿπÿßŸÖ',
    two: 'ÿπÿßŸÖŸäŸÜ',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ',
    other: '{{count}} ÿπÿßŸÖ'
  },
  overXYears: {
    one: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖ',
    two: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖŸäŸÜ',
    threeToTen: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ£ÿπŸàÿßŸÖ',
    other: 'ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿπÿßŸÖ'
  },
  almostXYears: {
    one: 'ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®',
    two: 'ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®',
    threeToTen: '{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®',
    other: '{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®'
  }
};
var ar_TN_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var usageGroup = ar_TN_lib_formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace('{{count}}', String(count));
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ŸÅŸä ' + result;
    } else {
      return 'ÿπŸÜÿØŸà ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_TN_lib_formatDistance = (ar_TN_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/formatLong/index.js

var ar_TN_lib_formatLong_dateFormats = {
  full: 'EEEEÿå do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var ar_TN_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss',
  long: 'HH:mm:ss',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var ar_TN_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ŸÖÿπ' {{time}}",
  long: "{{date}} 'ŸÖÿπ' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ar_TN_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_TN_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_TN_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_TN_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ar_TN_lib_formatLong = (ar_TN_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/formatRelative/index.js
var ar_TN_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'ÿ•ŸÑŸä ŸÅÿßÿ™ ŸÖÿπ' p",
  yesterday: "'ÿßŸÑÿ®ÿßÿ±ÿ≠ ŸÖÿπ' p",
  today: "'ÿßŸÑŸäŸàŸÖ ŸÖÿπ' p",
  tomorrow: "'ÿ∫ÿØŸàÿ© ŸÖÿπ' p",
  nextWeek: "eeee 'ÿßŸÑÿ¨ŸÖÿπÿ© ÿßŸÑÿ¨ÿßŸäÿ© ŸÖÿπ' p 'ŸÜŸáÿßÿ±'",
  other: 'P'
};
var ar_TN_lib_formatRelative_formatRelative = function formatRelative(token) {
  return ar_TN_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_TN_lib_formatRelative = (ar_TN_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/localize/index.js

var ar_TN_lib_localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ.', 'ÿ®.ŸÖ.'],
  wide: ['ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ']
};
var ar_TN_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ±1', 'ÿ±2', 'ÿ±3', 'ÿ±4'],
  wide: ['ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´', 'ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ']
};
var ar_TN_lib_localize_monthValues = {
  narrow: ['ÿØ', 'ŸÜ', 'ÿ£', 'ÿ≥', 'ÿ£', 'ÿ¨', 'ÿ¨', 'ŸÖ', 'ÿ£', 'ŸÖ', 'ŸÅ', 'ÿ¨'],
  abbreviated: ['ÿ¨ÿßŸÜŸÅŸä', 'ŸÅŸäŸÅÿ±Ÿä', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ŸÅÿ±ŸäŸÑ', 'ŸÖÿßŸä', 'ÿ¨ŸàÿßŸÜ', 'ÿ¨ŸàŸäŸÑŸäÿ©', 'ÿ£Ÿàÿ™', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±'],
  wide: ['ÿ¨ÿßŸÜŸÅŸä', 'ŸÅŸäŸÅÿ±Ÿä', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ŸÅÿ±ŸäŸÑ', 'ŸÖÿßŸä', 'ÿ¨ŸàÿßŸÜ', 'ÿ¨ŸàŸäŸÑŸäÿ©', 'ÿ£Ÿàÿ™', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±']
};
var ar_TN_lib_localize_dayValues = {
  narrow: ['ÿ≠', 'ŸÜ', 'ÿ´', 'ÿ±', 'ÿÆ', 'ÿ¨', 'ÿ≥'],
  short: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  abbreviated: ['ÿ£ÿ≠ÿØ', 'ÿßÿ´ŸÜŸäŸÜ', 'ÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿÆŸÖŸäÿ≥', 'ÿ¨ŸÖÿπÿ©', 'ÿ≥ÿ®ÿ™'],
  wide: ['ÿßŸÑÿ£ÿ≠ÿØ', 'ÿßŸÑÿßÿ´ŸÜŸäŸÜ', 'ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°', 'ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°', 'ÿßŸÑÿÆŸÖŸäÿ≥', 'ÿßŸÑÿ¨ŸÖÿπÿ©', 'ÿßŸÑÿ≥ÿ®ÿ™']
};
var ar_TN_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ÿπ',
    morning: 'ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑŸÇÿßŸäŸÑÿ©',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©',
    evening: 'ÿßŸÑÿπÿ¥Ÿäÿ©',
    night: 'ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÜÿµ ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ÿπ',
    morning: 'ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑŸÇÿßŸäŸÑÿ©',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©',
    evening: 'ÿßŸÑÿπÿ¥Ÿäÿ©',
    night: 'ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÜÿµ ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ÿπ',
    morning: 'ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ÿßŸÑŸÇÿßŸäŸÑÿ©',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©',
    evening: 'ÿßŸÑÿπÿ¥Ÿäÿ©',
    night: 'ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÜÿµ ÿßŸÑŸÑŸäŸÑ'
  }
};
var ar_TN_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿµ',
    pm: 'ÿπ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ŸÅŸä ÿßŸÑŸÇÿßŸäŸÑÿ©',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©',
    evening: 'ŸÅŸä ÿßŸÑÿπÿ¥Ÿäÿ©',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÜÿµ ÿßŸÑŸÑŸäŸÑ'
  },
  abbreviated: {
    am: 'ÿµ',
    pm: 'ÿπ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ŸÅŸä ÿßŸÑŸÇÿßŸäŸÑÿ©',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©',
    evening: 'ŸÅŸä ÿßŸÑÿπÿ¥Ÿäÿ©',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÜÿµ ÿßŸÑŸÑŸäŸÑ'
  },
  wide: {
    am: 'ÿµ',
    pm: 'ÿπ',
    morning: 'ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠',
    noon: 'ŸÅŸä ÿßŸÑŸÇÿßŸäŸÑÿ©',
    afternoon: 'ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©',
    evening: 'ŸÅŸä ÿßŸÑÿπÿ¥Ÿäÿ©',
    night: 'ŸÅŸä ÿßŸÑŸÑŸäŸÑ',
    midnight: 'ŸÜÿµ ÿßŸÑŸÑŸäŸÑ'
  }
};
var ar_TN_lib_localize_ordinalNumber = function ordinalNumber(num) {
  return String(num);
};
var ar_TN_lib_localize_localize = {
  ordinalNumber: ar_TN_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ar_TN_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ar_TN_lib_localize = (ar_TN_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/match/index.js


var ar_TN_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ar_TN_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_TN_lib_match_matchEraPatterns = {
  narrow: /[ŸÇÿ®]/,
  abbreviated: /[ŸÇÿ®]\.ŸÖ\./,
  wide: /(ŸÇÿ®ŸÑ|ÿ®ÿπÿØ) ÿßŸÑŸÖŸäŸÑÿßÿØ/
};
var ar_TN_lib_match_parseEraPatterns = {
  any: [/ŸÇÿ®ŸÑ/, /ÿ®ÿπÿØ/]
};
var ar_TN_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /ÿ±[1234]/,
  wide: /ÿßŸÑÿ±ÿ®ÿπ (ÿßŸÑÿ£ŸàŸÑ|ÿßŸÑÿ´ÿßŸÜŸä|ÿßŸÑÿ´ÿßŸÑÿ´|ÿßŸÑÿ±ÿßÿ®ÿπ)/
};
var ar_TN_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ar_TN_lib_match_matchMonthPatterns = {
  narrow: /^[ÿ¨ŸÅŸÖÿ£ÿ≥ŸÜÿØ]/,
  abbreviated: /^(ÿ¨ÿßŸÜŸÅŸä|ŸÅŸäŸÅÿ±Ÿä|ŸÖÿßÿ±ÿ≥|ÿ£ŸÅÿ±ŸäŸÑ|ŸÖÿßŸä|ÿ¨ŸàÿßŸÜ|ÿ¨ŸàŸäŸÑŸäÿ©|ÿ£Ÿàÿ™|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/,
  wide: /^(ÿ¨ÿßŸÜŸÅŸä|ŸÅŸäŸÅÿ±Ÿä|ŸÖÿßÿ±ÿ≥|ÿ£ŸÅÿ±ŸäŸÑ|ŸÖÿßŸä|ÿ¨ŸàÿßŸÜ|ÿ¨ŸàŸäŸÑŸäÿ©|ÿ£Ÿàÿ™|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/
};
var ar_TN_lib_match_parseMonthPatterns = {
  narrow: [/^ÿ¨/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^ÿ¨/i, /^ÿ¨/i, /^ÿ£/i, /^ÿ≥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^ÿ¨ÿßŸÜŸÅŸä/i, /^ŸÅŸäŸÅÿ±Ÿä/i, /^ŸÖÿßÿ±ÿ≥/i, /^ÿ£ŸÅÿ±ŸäŸÑ/i, /^ŸÖÿßŸä/i, /^ÿ¨ŸàÿßŸÜ/i, /^ÿ¨ŸàŸäŸÑŸäÿ©/i, /^ÿ£Ÿàÿ™/i, /^ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±/i, /^ÿ£ŸÉÿ™Ÿàÿ®ÿ±/i, /^ŸÜŸàŸÅŸÖÿ®ÿ±/i, /^ÿØŸäÿ≥ŸÖÿ®ÿ±/i]
};
var ar_TN_lib_match_matchDayPatterns = {
  narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
  short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
  wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
};
var ar_TN_lib_match_parseDayPatterns = {
  narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
  wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿßÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
  any: [/^ÿ£ÿ≠/i, /^ÿßÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
};
var ar_TN_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ÿµ|ÿπ|ŸÜ ŸÑ|ŸÑ|(ŸÅŸä|ŸÖÿπ) (ÿµÿ®ÿßÿ≠|ŸÇÿßŸäŸÑÿ©|ÿπÿ¥Ÿäÿ©|ŸÑŸäŸÑ))/,
  any: /^([ÿµÿπ]|ŸÜÿµ ÿßŸÑŸÑŸäŸÑ|ŸÇÿßŸäŸÑÿ©|(ŸÅŸä|ŸÖÿπ) (ÿµÿ®ÿßÿ≠|ŸÇÿßŸäŸÑÿ©|ÿπÿ¥Ÿäÿ©|ŸÑŸäŸÑ))/
};
var ar_TN_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ÿµ/,
    pm: /^ÿπ/,
    midnight: /ŸÜÿµ ÿßŸÑŸÑŸäŸÑ/,
    noon: /ŸÇÿßŸäŸÑÿ©/,
    afternoon: /ÿ®ÿπÿØ ÿßŸÑŸÇÿßŸäŸÑÿ©/,
    morning: /ÿµÿ®ÿßÿ≠/,
    evening: /ÿπÿ¥Ÿäÿ©/,
    night: /ŸÑŸäŸÑ/
  }
};
var ar_TN_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_TN_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_TN_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_TN_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_TN_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_TN_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ar_TN_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ar_TN_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ar_TN_lib_match = (ar_TN_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Tunisian Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Koussay Haj Kacem [@essana3]{@link https://github.com/essana3}
 */
var ar_TN_locale = {
  code: 'ar-TN',
  formatDistance: ar_TN_lib_formatDistance,
  formatLong: ar_TN_lib_formatLong,
  formatRelative: ar_TN_lib_formatRelative,
  localize: ar_TN_lib_localize,
  match: ar_TN_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_TN = (ar_TN_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/formatDistance/index.js
var az_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'bir saniy…ôd…ôn az',
    other: '{{count}} bir saniy…ôd…ôn az'
  },
  xSeconds: {
    one: '1 saniy…ô',
    other: '{{count}} saniy…ô'
  },
  halfAMinute: 'yarƒ±m d…ôqiq…ô',
  lessThanXMinutes: {
    one: 'bir d…ôqiq…ôd…ôn az',
    other: '{{count}} bir d…ôqiq…ôd…ôn az'
  },
  xMinutes: {
    one: 'bir d…ôqiq…ô',
    other: '{{count}} d…ôqiq…ô'
  },
  aboutXHours: {
    one: 't…ôxmin…ôn 1 saat',
    other: 't…ôxmin…ôn {{count}} saat'
  },
  xHours: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  xDays: {
    one: '1 g√ºn',
    other: '{{count}} g√ºn'
  },
  aboutXWeeks: {
    one: 't…ôxmin…ôn 1 h…ôft…ô',
    other: 't…ôxmin…ôn {{count}} h…ôft…ô'
  },
  xWeeks: {
    one: '1 h…ôft…ô',
    other: '{{count}} h…ôft…ô'
  },
  aboutXMonths: {
    one: 't…ôxmin…ôn 1 ay',
    other: 't…ôxmin…ôn {{count}} ay'
  },
  xMonths: {
    one: '1 ay',
    other: '{{count}} ay'
  },
  aboutXYears: {
    one: 't…ôxmin…ôn 1 il',
    other: 't…ôxmin…ôn {{count}} il'
  },
  xYears: {
    one: '1 il',
    other: '{{count}} il'
  },
  overXYears: {
    one: '1 ild…ôn √ßox',
    other: '{{count}} ild…ôn √ßox'
  },
  almostXYears: {
    one: 'dem…ôk olar ki 1 il',
    other: 'dem…ôk olar ki {{count}} il'
  }
};
var az_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = az_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' sonra';
    } else {
      return result + ' …ôvv…ôl';
    }
  }
  return result;
};
/* harmony default export */ const az_lib_formatDistance = (az_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/formatLong/index.js

var az_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y 'il'",
  long: "do MMMM y 'il'",
  medium: "d MMM y 'il'",
  short: 'dd.MM.yyyy'
};
var az_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var az_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}} - 'd…ô'",
  long: "{{date}} {{time}} - 'd…ô'",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var az_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: az_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: az_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: az_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const az_lib_formatLong = (az_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/formatRelative/index.js
var az_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'sonuncu' eeee p -'d…ô'",
  yesterday: "'d√ºn…ôn' p -'d…ô'",
  today: "'bug√ºn' p -'d…ô'",
  tomorrow: "'sabah' p -'d…ô'",
  nextWeek: "eeee p -'d…ô'",
  other: 'P'
};
var az_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return az_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const az_lib_formatRelative = (az_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/localize/index.js

var az_lib_localize_eraValues = {
  narrow: ['e.…ô', 'b.e'],
  abbreviated: ['e.…ô', 'b.e'],
  wide: ['eramƒ±zdan …ôvv…ôl', 'bizim era']
};
var az_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1ci kvartal', '2ci kvartal', '3c√º kvartal', '4c√º kvartal']
};
var az_lib_localize_monthValues = {
  narrow: ['Y', 'F', 'M', 'A', 'M', 'ƒ∞', 'ƒ∞', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'ƒ∞yun', 'ƒ∞yul', 'Avq', 'Sen', 'Okt', 'Noy', 'Dek'],
  wide: ['Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'ƒ∞yun', 'ƒ∞yul', 'Avqust', 'Sentyabr', 'Oktyabr', 'Noyabr', 'Dekabr']
};
var az_lib_localize_dayValues = {
  narrow: ['B.', 'B.e', '√á.a', '√á.', 'C.a', 'C.', '≈û.'],
  short: ['B.', 'B.e', '√á.a', '√á.', 'C.a', 'C.', '≈û.'],
  abbreviated: ['Baz', 'Baz.e', '√á…ôr.a', '√á…ôr', 'C√ºm.a', 'C√ºm', '≈û…ô'],
  wide: ['Bazar', 'Bazar ert…ôsi', '√á…ôr≈ü…ônb…ô ax≈üamƒ±', '√á…ôr≈ü…ônb…ô', 'C√ºm…ô ax≈üamƒ±', 'C√ºm…ô', '≈û…ônb…ô']
};
var az_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'gec…ôyarƒ±',
    noon: 'g√ºn',
    morning: 's…ôh…ôr',
    afternoon: 'g√ºnd√ºz',
    evening: 'ax≈üam',
    night: 'gec…ô'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gec…ôyarƒ±',
    noon: 'g√ºn',
    morning: 's…ôh…ôr',
    afternoon: 'g√ºnd√ºz',
    evening: 'ax≈üam',
    night: 'gec…ô'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gec…ôyarƒ±',
    noon: 'g√ºn',
    morning: 's…ôh…ôr',
    afternoon: 'g√ºnd√ºz',
    evening: 'ax≈üam',
    night: 'gec…ô'
  }
};
var az_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'gec…ôyarƒ±',
    noon: 'g√ºn',
    morning: 's…ôh…ôr',
    afternoon: 'g√ºnd√ºz',
    evening: 'ax≈üam',
    night: 'gec…ô'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gec…ôyarƒ±',
    noon: 'g√ºn',
    morning: 's…ôh…ôr',
    afternoon: 'g√ºnd√ºz',
    evening: 'ax≈üam',
    night: 'gec…ô'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gec…ôyarƒ±',
    noon: 'g√ºn',
    morning: 's…ôh…ôr',
    afternoon: 'g√ºnd√ºz',
    evening: 'ax≈üam',
    night: 'gec…ô'
  }
};
var suffixes = {
  1: '-inci',
  5: '-inci',
  8: '-inci',
  70: '-inci',
  80: '-inci',
  2: '-nci',
  7: '-nci',
  20: '-nci',
  50: '-nci',
  3: '-√ºnc√º',
  4: '-√ºnc√º',
  100: '-√ºnc√º',
  6: '-ncƒ±',
  9: '-uncu',
  10: '-uncu',
  30: '-uncu',
  60: '-ƒ±ncƒ±',
  90: '-ƒ±ncƒ±'
};
var getSuffix = function getSuffix(number) {
  if (number === 0) {
    // special case for zero
    return number + '-ƒ±ncƒ±';
  }
  var a = number % 10;
  var b = number % 100 - a;
  var c = number >= 100 ? 100 : null;
  if (suffixes[a]) {
    return suffixes[a];
  } else if (suffixes[b]) {
    return suffixes[b];
  } else if (c !== null) {
    return suffixes[c];
  }
  return '';
};
var az_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var suffix = getSuffix(number);
  return number + suffix;
};
var az_lib_localize_localize = {
  ordinalNumber: az_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: az_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const az_lib_localize = (az_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/match/index.js


var az_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(ci|inci|nci|uncu|√ºnc√º|ncƒ±))?/i;
var az_lib_match_parseOrdinalNumberPattern = /\d+/i;
var az_lib_match_matchEraPatterns = {
  narrow: /^(b|a)$/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
  wide: /^(bizim eradan …ôvv…ôl|bizim era)$/i
};
var az_lib_match_parseEraPatterns = {
  any: [/^b$/i, /^(a|c)$/i]
};
var az_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]$/i,
  abbreviated: /^K[1234]$/i,
  wide: /^[1234](ci)? kvartal$/i
};
var az_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var az_lib_match_matchMonthPatterns = {
  narrow: /^[(?-i)yfmaisond]$/i,
  abbreviated: /^(Yan|Fev|Mar|Apr|May|ƒ∞yun|ƒ∞yul|Avq|Sen|Okt|Noy|Dek)$/i,
  wide: /^(Yanvar|Fevral|Mart|Aprel|May|ƒ∞yun|ƒ∞yul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i
};
var az_lib_match_parseMonthPatterns = {
  narrow: [/^[(?-i)y]$/i, /^[(?-i)f]$/i, /^[(?-i)m]$/i, /^[(?-i)a]$/i, /^[(?-i)m]$/i, /^[(?-i)i]$/i, /^[(?-i)i]$/i, /^[(?-i)a]$/i, /^[(?-i)s]$/i, /^[(?-i)o]$/i, /^[(?-i)n]$/i, /^[(?-i)d]$/i],
  abbreviated: [/^Yan$/i, /^Fev$/i, /^Mar$/i, /^Apr$/i, /^May$/i, /^ƒ∞yun$/i, /^ƒ∞yul$/i, /^Avg$/i, /^Sen$/i, /^Okt$/i, /^Noy$/i, /^Dek$/i],
  wide: [/^Yanvar$/i, /^Fevral$/i, /^Mart$/i, /^Aprel$/i, /^May$/i, /^ƒ∞yun$/i, /^ƒ∞yul$/i, /^Avgust$/i, /^Sentyabr$/i, /^Oktyabr$/i, /^Noyabr$/i, /^Dekabr$/i]
};
var az_lib_match_matchDayPatterns = {
  narrow: /^(B\.|B\.e|√á\.a|√á\.|C\.a|C\.|≈û\.)$/i,
  short: /^(B\.|B\.e|√á\.a|√á\.|C\.a|C\.|≈û\.)$/i,
  abbreviated: /^(Baz\.e|√á…ôr|√á…ôr\.a|C√ºm|C√ºm\.a|≈û…ô)$/i,
  wide: /^(Bazar|Bazar ert…ôsi|√á…ôr≈ü…ônb…ô ax≈üamƒ±|√á…ôr≈ü…ônb…ô|C√ºm…ô ax≈üamƒ±|C√ºm…ô|≈û…ônb…ô)$/i
};
var az_lib_match_parseDayPatterns = {
  narrow: [/^B\.$/i, /^B\.e$/i, /^√á\.a$/i, /^√á\.$/i, /^C\.a$/i, /^C\.$/i, /^≈û\.$/i],
  abbreviated: [/^Baz$/i, /^Baz\.e$/i, /^√á…ôr\.a$/i, /^√á…ôr$/i, /^C√ºm\.a$/i, /^C√ºm$/i, /^≈û…ô$/i],
  wide: [/^Bazar$/i, /^Bazar ert…ôsi$/i, /^√á…ôr≈ü…ônb…ô ax≈üamƒ±$/i, /^√á…ôr≈ü…ônb…ô$/i, /^C√ºm…ô ax≈üamƒ±$/i, /^C√ºm…ô$/i, /^≈û…ônb…ô$/i],
  any: [/^B\.$/i, /^B\.e$/i, /^√á\.a$/i, /^√á\.$/i, /^C\.a$/i, /^C\.$/i, /^≈û\.$/i]
};
var az_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|gec…ôyarƒ±|g√ºn|s…ôh…ôr|g√ºnd√ºz|ax≈üam|gec…ô)$/i,
  any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gec…ôyarƒ±|g√ºn|s…ôh…ôr|g√ºnd√ºz|ax≈üam|gec…ô)$/i
};
var az_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /^gec…ôyarƒ±$/i,
    noon: /^g√ºn$/i,
    morning: /s…ôh…ôr$/i,
    afternoon: /g√ºnd√ºz$/i,
    evening: /ax≈üam$/i,
    night: /gec…ô$/i
  }
};
var az_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: az_lib_match_matchOrdinalNumberPattern,
    parsePattern: az_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: az_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: az_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: az_lib_match_parseMonthPatterns,
    defaultParseWidth: 'narrow'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: az_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: az_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const az_lib_match = (az_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Azerbaijani locale.
 * @language Azerbaijani
 * @iso-639-2 aze
 */
var az_locale = {
  code: 'az',
  formatDistance: az_lib_formatDistance,
  formatLong: az_lib_formatLong,
  formatRelative: az_lib_formatRelative,
  localize: az_lib_localize,
  match: az_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const az = (az_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/formatDistance/index.js
function declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function buildLocalizeTokenFn(scheme) {
  return function (count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension(scheme.future, count);
        } else {
          return '–ø—Ä–∞–∑ ' + declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension(scheme.past, count);
        } else {
          return declension(scheme.regular, count) + ' —Ç–∞–º—É';
        }
      }
    } else {
      return declension(scheme.regular, count);
    }
  };
}
var halfAMinute = function halfAMinute(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '–ø—Ä–∞–∑ –ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã';
    } else {
      return '–ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã —Ç–∞–º—É';
    }
  }
  return '–ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã';
};
var be_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—à –∑–∞ —Å–µ–∫—É–Ω–¥—É',
      singularNominative: '–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥'
    },
    future: {
      one: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ —Å–µ–∫—É–Ω–¥—É',
      singularNominative: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  xSeconds: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥–∞',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥'
    },
    past: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—É —Ç–∞–º—É',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—ã —Ç–∞–º—É',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥ —Ç–∞–º—É'
    },
    future: {
      singularNominative: '–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  halfAMinute: halfAMinute,
  lessThanXMinutes: buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—à –∑–∞ —Ö–≤—ñ–ª—ñ–Ω—É',
      singularNominative: '–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É',
      singularGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω'
    },
    future: {
      one: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ —Ö–≤—ñ–ª—ñ–Ω—É',
      singularNominative: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É',
      singularGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω'
    }
  }),
  xMinutes: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Ö–≤—ñ–ª—ñ–Ω–∞',
      singularGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω'
    },
    past: {
      singularNominative: '{{count}} —Ö–≤—ñ–ª—ñ–Ω—É —Ç–∞–º—É',
      singularGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω—ã —Ç–∞–º—É',
      pluralGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω —Ç–∞–º—É'
    },
    future: {
      singularNominative: '–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É',
      singularGenitive: '–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω'
    }
  }),
  aboutXHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      singularGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω',
      pluralGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω'
    },
    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—É',
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω'
    }
  }),
  xHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –≥–∞–¥–∑—ñ–Ω–∞',
      singularGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      pluralGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω'
    },
    past: {
      singularNominative: '{{count}} –≥–∞–¥–∑—ñ–Ω—É —Ç–∞–º—É',
      singularGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω—ã —Ç–∞–º—É',
      pluralGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω —Ç–∞–º—É'
    },
    future: {
      singularNominative: '–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—É',
      singularGenitive: '–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      pluralGenitive: '–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω'
    }
  }),
  xDays: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –¥–∑–µ–Ω—å',
      singularGenitive: '{{count}} –¥–Ω—ñ',
      pluralGenitive: '{{count}} –¥–∑—ë–Ω'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞',
      // TODO
      singularGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û',
      // TODO
      pluralGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û' // TODO
    },

    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü',
      // TODO
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü—ã',
      // TODO
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü–∞—û' // TODO
    }
  }),

  xWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º–µ—Å—è—Ü',
      singularGenitive: '{{count}} –º–µ—Å—è—Ü—ã',
      pluralGenitive: '{{count}} –º–µ—Å—è—Ü–∞—û'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞',
      singularGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û',
      pluralGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û'
    },
    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü',
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü—ã',
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü–∞—û'
    }
  }),
  xMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º–µ—Å—è—Ü',
      singularGenitive: '{{count}} –º–µ—Å—è—Ü—ã',
      pluralGenitive: '{{count}} –º–µ—Å—è—Ü–∞—û'
    }
  }),
  aboutXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –≥–æ–¥–∞',
      singularGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–æ—û',
      pluralGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–æ—û'
    },
    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û'
    }
  }),
  xYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –≥–æ–¥',
      singularGenitive: '{{count}} –≥–∞–¥—ã',
      pluralGenitive: '{{count}} –≥–∞–¥–æ—û'
    }
  }),
  overXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–æ–ª—å—à –∑–∞ {{count}} –≥–æ–¥',
      singularGenitive: '–±–æ–ª—å—à –∑–∞ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–±–æ–ª—å—à –∑–∞ {{count}} –≥–∞–¥–æ—û'
    },
    future: {
      singularNominative: '–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û'
    }
  }),
  almostXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∞–º–∞–ª—å {{count}} –≥–æ–¥',
      singularGenitive: '–∞–º–∞–ª—å {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–∞–º–∞–ª—å {{count}} –≥–∞–¥–æ—û'
    },
    future: {
      singularNominative: '–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û'
    }
  })
};
var be_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  return be_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const be_lib_formatDistance = (be_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/formatLong/index.js

var be_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y '–≥.'",
  long: "d MMMM y '–≥.'",
  medium: "d MMM y '–≥.'",
  short: 'dd.MM.y'
};
var be_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var be_lib_formatLong_dateTimeFormats = {
  any: '{{date}}, {{time}}'
};
var be_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: be_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: be_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: be_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const be_lib_formatLong = (be_lib_formatLong_formatLong);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/toDate/index.js
var toDate = __webpack_require__(19013);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/_lib/requiredArgs/index.js
var requiredArgs = __webpack_require__(13882);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
var startOfUTCWeek = __webpack_require__(59025);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js


function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  (0,requiredArgs/* default */.Z)(2, arguments);
  var dateLeftStartOfWeek = (0,startOfUTCWeek/* default */.Z)(dirtyDateLeft, options);
  var dateRightStartOfWeek = (0,startOfUTCWeek/* default */.Z)(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/formatRelative/index.js


var accusativeWeekdays = ['–Ω—è–¥–∑–µ–ª—é', '–ø–∞–Ω—è–¥–∑–µ–ª–∞–∫', '–∞—û—Ç–æ—Ä–∞–∫', '—Å–µ—Ä–∞–¥—É', '—á–∞—Ü–≤–µ—Ä', '–ø—è—Ç–Ω—ñ—Ü—É', '—Å—É–±–æ—Ç—É'];
function lastWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –º—ñ–Ω—É–ª—É—é " + weekday + " –∞' p";
    case 1:
    case 2:
    case 4:
      return "'—É –º—ñ–Ω—É–ª—ã " + weekday + " –∞' p";
  }
}
function thisWeek(day) {
  var weekday = accusativeWeekdays[day];
  return "'—É " + weekday + " –∞' p";
}
function nextWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—É—é " + weekday + " –∞' p";
    case 1:
    case 2:
    case 4:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—ã " + weekday + " –∞' p";
  }
}
var lastWeekFormat = function lastWeekFormat(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return lastWeek(day);
  }
};
var nextWeekFormat = function nextWeekFormat(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return nextWeek(day);
  }
};
var be_lib_formatRelative_formatRelativeLocale = {
  lastWeek: lastWeekFormat,
  yesterday: "'—É—á–æ—Ä–∞ –∞' p",
  today: "'—Å—ë–Ω–Ω—è –∞' p",
  tomorrow: "'–∑–∞—û—Ç—Ä–∞ –∞' p",
  nextWeek: nextWeekFormat,
  other: 'P'
};
var be_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = be_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const be_lib_formatRelative = (be_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/localize/index.js

var be_lib_localize_eraValues = {
  narrow: ['–¥–∞ –Ω.—ç.', '–Ω.—ç.'],
  abbreviated: ['–¥–∞ –Ω. —ç.', '–Ω. —ç.'],
  wide: ['–¥–∞ –Ω–∞—à–∞–π —ç—Ä—ã', '–Ω–∞—à–∞–π —ç—Ä—ã']
};
var be_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-—ã –∫–≤.', '2-—ñ –∫–≤.', '3-—ñ –∫–≤.', '4-—ã –∫–≤.'],
  wide: ['1-—ã –∫–≤–∞—Ä—Ç–∞–ª', '2-—ñ –∫–≤–∞—Ä—Ç–∞–ª', '3-—ñ –∫–≤–∞—Ä—Ç–∞–ª', '4-—ã –∫–≤–∞—Ä—Ç–∞–ª']
};
var be_lib_localize_monthValues = {
  narrow: ['–°', '–õ', '–°', '–ö', '–ú', '–ß', '–õ', '–ñ', '–í', '–ö', '–õ', '–°'],
  abbreviated: ['—Å—Ç—É–¥–∑.', '–ª—é—Ç.', '—Å–∞–∫.', '–∫—Ä–∞—Å.', '–º–∞–π', '—á—ç—Ä–≤.', '–ª—ñ–ø.', '–∂–Ω.', '–≤–µ—Ä.', '–∫–∞—Å—Ç—Ä.', '–ª—ñ—Å—Ç.', '—Å–Ω–µ–∂.'],
  wide: ['—Å—Ç—É–¥–∑–µ–Ω—å', '–ª—é—Ç—ã', '—Å–∞–∫–∞–≤—ñ–∫', '–∫—Ä–∞—Å–∞–≤—ñ–∫', '–º–∞–π', '—á—ç—Ä–≤–µ–Ω—å', '–ª—ñ–ø–µ–Ω—å', '–∂–Ω—ñ–≤–µ–Ω—å', '–≤–µ—Ä–∞—Å–µ–Ω—å', '–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫', '–ª—ñ—Å—Ç–∞–ø–∞–¥', '—Å–Ω–µ–∂–∞–Ω—å']
};
var formattingMonthValues = {
  narrow: ['–°', '–õ', '–°', '–ö', '–ú', '–ß', '–õ', '–ñ', '–í', '–ö', '–õ', '–°'],
  abbreviated: ['—Å—Ç—É–¥–∑.', '–ª—é—Ç.', '—Å–∞–∫.', '–∫—Ä–∞—Å.', '–º–∞—è', '—á—ç—Ä–≤.', '–ª—ñ–ø.', '–∂–Ω.', '–≤–µ—Ä.', '–∫–∞—Å—Ç—Ä.', '–ª—ñ—Å—Ç.', '—Å–Ω–µ–∂.'],
  wide: ['—Å—Ç—É–¥–∑–µ–Ω—è', '–ª—é—Ç–∞–≥–∞', '—Å–∞–∫–∞–≤—ñ–∫–∞', '–∫—Ä–∞—Å–∞–≤—ñ–∫–∞', '–º–∞—è', '—á—ç—Ä–≤–µ–Ω—è', '–ª—ñ–ø–µ–Ω—è', '–∂–Ω—ñ—û–Ω—è', '–≤–µ—Ä–∞—Å–Ω—è', '–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫–∞', '–ª—ñ—Å—Ç–∞–ø–∞–¥–∞', '—Å–Ω–µ–∂–Ω—è']
};
var be_lib_localize_dayValues = {
  narrow: ['–ù', '–ü', '–ê', '–°', '–ß', '–ü', '–°'],
  short: ['–Ω–¥', '–ø–Ω', '–∞—û', '—Å—Ä', '—á—Ü', '–ø—Ç', '—Å–±'],
  abbreviated: ['–Ω—è–¥–∑', '–ø–∞–Ω', '–∞—û—Ç', '—Å–µ—Ä', '—á–∞—Ü', '–ø—è—Ç', '—Å—É–±'],
  wide: ['–Ω—è–¥–∑–µ–ª—è', '–ø–∞–Ω—è–¥–∑–µ–ª–∞–∫', '–∞—û—Ç–æ—Ä–∞–∫', '—Å–µ—Ä–∞–¥–∞', '—á–∞—Ü–≤–µ—Ä', '–ø—è—Ç–Ω—ñ—Ü–∞', '—Å—É–±–æ—Ç–∞']
};
var be_lib_localize_dayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–∑–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–∑–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω–∞—á',
    noon: '–ø–æ—û–¥–∑–µ–Ω—å',
    morning: '—Ä–∞–Ω—ñ—Ü–∞',
    afternoon: '–¥–∑–µ–Ω—å',
    evening: '–≤–µ—á–∞—Ä',
    night: '–Ω–æ—á'
  }
};
var be_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ã'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ã'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω–∞—á',
    noon: '–ø–æ—û–¥–∑–µ–Ω—å',
    morning: '—Ä–∞–Ω—ñ—Ü—ã',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á–∞—Ä–∞',
    night: '–Ω–æ—á—ã'
  }
};
var be_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;

  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 –≤–µ—Ä–∞—Å–Ω—è)
   *  Incorrect: `do MMMM` (4-–≥–∞ –≤–µ—Ä–∞—Å–Ω—è)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do –¥–∑–µ–Ω—å –º–µ—Å—è—Ü–∞`)
   *  library will produce:            `5-–≥–∞ –¥–∑–µ–Ω—å –º–µ—Å—è—Ü–∞`
   *  but correct spelling should be:  `5-—ã –¥–∑–µ–Ω—å –º–µ—Å—è—Ü–∞`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */
  if (unit === 'date') {
    suffix = '-–≥–∞';
  } else if (unit === 'hour' || unit === 'minute' || unit === 'second') {
    suffix = '-—è';
  } else {
    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? '-—ñ' : '-—ã';
  }
  return number + suffix;
};
var be_lib_localize_localize = {
  ordinalNumber: be_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_dayPeriodValues,
    defaultWidth: 'any',
    formattingValues: be_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const be_lib_localize = (be_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/match/index.js


var be_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(–µ|—è|–≥–∞|—ñ|—ã|–∞–µ|–∞—è|—è—è|—à—ã|–≥—ñ|—Ü—ñ|—Ç—ã|–º—ã))?/i;
var be_lib_match_parseOrdinalNumberPattern = /\d+/i;
var be_lib_match_matchEraPatterns = {
  narrow: /^((–¥–∞ )?–Ω\.?\s?—ç\.?)/i,
  abbreviated: /^((–¥–∞ )?–Ω\.?\s?—ç\.?)/i,
  wide: /^(–¥–∞ –Ω–∞—à–∞–π —ç—Ä—ã|–Ω–∞—à–∞–π —ç—Ä—ã|–Ω–∞—à–∞ —ç—Ä–∞)/i
};
var be_lib_match_parseEraPatterns = {
  any: [/^–¥/i, /^–Ω/i]
};
var be_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[—ã—ñ]?)? –∫–≤.?/i,
  wide: /^[1234](-?[—ã—ñ]?)? –∫–≤–∞—Ä—Ç–∞–ª/i
};
var be_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var be_lib_match_matchMonthPatterns = {
  narrow: /^[—Å–ª–∫–º—á–∂–≤]/i,
  abbreviated: /^(—Å—Ç—É–¥–∑|–ª—é—Ç|—Å–∞–∫|–∫—Ä–∞—Å|–º–∞[–π—è]|—á—ç—Ä–≤|–ª—ñ–ø|–∂–Ω|–≤–µ—Ä|–∫–∞—Å—Ç—Ä|–ª—ñ—Å—Ç|—Å–Ω–µ–∂)\.?/i,
  wide: /^(—Å—Ç—É–¥–∑–µ–Ω[—å—è]|–ª—é—Ç(—ã|–∞–≥–∞)|—Å–∞–∫–∞–≤—ñ–∫–∞?|–∫—Ä–∞—Å–∞–≤—ñ–∫–∞?|–º–∞[–π—è]|—á—ç—Ä–≤–µ–Ω[—å—è]|–ª—ñ–ø–µ–Ω[—å—è]|–∂–Ω—ñ(–≤–µ–Ω—å|—û–Ω—è)|–≤–µ—Ä–∞—Å(–µ–Ω—å|–Ω—è)|–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫–∞?|–ª—ñ—Å—Ç–∞–ø–∞–¥–∞?|—Å–Ω–µ–∂(–∞–Ω—å|–Ω—è))/i
};
var be_lib_match_parseMonthPatterns = {
  narrow: [/^—Å/i, /^–ª/i, /^—Å/i, /^–∫/i, /^–º/i, /^—á/i, /^–ª/i, /^–∂/i, /^–≤/i, /^–∫/i, /^–ª/i, /^—Å/i],
  any: [/^—Å—Ç/i, /^–ª—é/i, /^—Å–∞/i, /^–∫—Ä/i, /^–º–∞/i, /^—á/i, /^–ª—ñ–ø/i, /^–∂/i, /^–≤/i, /^–∫–∞/i, /^–ª—ñ—Å/i, /^—Å–Ω/i]
};
var be_lib_match_matchDayPatterns = {
  narrow: /^[–Ω–ø–∞—Å—á]/i,
  short: /^(–Ω–¥|–Ω—è|–ø–Ω|–ø–∞|–∞—û|–∞—Ç|—Å—Ä|—Å–µ|—á—Ü|—á–∞|–ø—Ç|–ø—è|—Å–±|—Å—É)\.?/i,
  abbreviated: /^(–Ω—è–¥–∑?|–Ω–¥–∑|–ø–Ω–¥|–ø–∞–Ω|–∞—û—Ç|—Å—Ä–¥|—Å–µ—Ä|—á—Ü–≤|—á–∞—Ü|–ø—Ç–Ω|–ø—è—Ç|—Å—É–±).?/i,
  wide: /^(–Ω—è–¥–∑–µ–ª[—è—ñ]|–ø–∞–Ω—è–¥–∑–µ–ª(–∞–∫|–∫–∞)|–∞—û—Ç–æ—Ä(–∞–∫|–∫–∞)|—Å–µ—Ä–∞–¥[–∞—ã]|—á–∞—Ü–≤(–µ—Ä|—è—Ä–≥–∞)|–ø—è—Ç–Ω—ñ—Ü[–∞—ã]|—Å—É–±–æ—Ç[–∞—ã])/i
};
var be_lib_match_parseDayPatterns = {
  narrow: [/^–Ω/i, /^–ø/i, /^–∞/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
  any: [/^–Ω/i, /^–ø[–∞–Ω]/i, /^–∞/i, /^—Å[–µ—Ä]/i, /^—á/i, /^–ø[—è—Ç]/i, /^—Å[—É–±]/i]
};
var be_lib_match_matchDayPeriodPatterns = {
  narrow: /^([–¥–ø]–ø|–ø–æ—û–Ω\.?|–ø–æ—û–¥\.?|—Ä–∞–Ω\.?|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á—ã?)/i,
  abbreviated: /^([–¥–ø]–ø|–ø–æ—û–Ω\.?|–ø–æ—û–¥\.?|—Ä–∞–Ω\.?|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á—ã?)/i,
  wide: /^([–¥–ø]–ø|–ø–æ—û–Ω–∞—á|–ø–æ—û–¥–∑–µ–Ω—å|—Ä–∞–Ω—ñ—Ü[–∞—ã]|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á–∞—Ä–∞?|–Ω–æ—á—ã?)/i
};
var be_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–¥–ø/i,
    pm: /^–ø–ø/i,
    midnight: /^–ø–æ—û–Ω/i,
    noon: /^–ø–æ—û–¥/i,
    morning: /^—Ä/i,
    afternoon: /^–¥[–∑–Ω]/i,
    evening: /^–≤/i,
    night: /^–Ω/i
  }
};
var be_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: be_lib_match_matchOrdinalNumberPattern,
    parsePattern: be_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const be_lib_match = (be_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Belarusian locale.
 * @language Belarusian
 * @iso-639-2 bel
 * @author Kiryl Anokhin [@alyrik]{@link https://github.com/alyrik}
 * @author Martin Wind [@arvigeus]{@link https://github.com/mawi12345}
 */
var be_locale = {
  code: 'be',
  formatDistance: be_lib_formatDistance,
  formatLong: be_lib_formatLong,
  formatRelative: be_lib_formatRelative,
  localize: be_lib_localize,
  match: be_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const be = (be_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/formatDistance/index.js
function formatDistance_declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function formatDistance_buildLocalizeTokenFn(scheme) {
  return function (count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return formatDistance_declension(scheme.future, count);
        } else {
          return '–ø—Ä–∞–∑ ' + formatDistance_declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return formatDistance_declension(scheme.past, count);
        } else {
          return formatDistance_declension(scheme.regular, count) + ' —Ç–∞–º—É';
        }
      }
    } else {
      return formatDistance_declension(scheme.regular, count);
    }
  };
}
var formatDistance_halfAMinute = function halfAMinute(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '–ø—Ä–∞–∑ –ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã';
    } else {
      return '–ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã —Ç–∞–º—É';
    }
  }
  return '–ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã';
};
var be_tarask_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: formatDistance_buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—à –∑–∞ —Å–µ–∫—É–Ω–¥—É',
      singularNominative: '–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥'
    },
    future: {
      one: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ —Å–µ–∫—É–Ω–¥—É',
      singularNominative: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  xSeconds: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥–∞',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥'
    },
    past: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—É —Ç–∞–º—É',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—ã —Ç–∞–º—É',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥ —Ç–∞–º—É'
    },
    future: {
      singularNominative: '–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  halfAMinute: formatDistance_halfAMinute,
  lessThanXMinutes: formatDistance_buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—à –∑–∞ —Ö–≤—ñ–ª—ñ–Ω—É',
      singularNominative: '–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É',
      singularGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω'
    },
    future: {
      one: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ —Ö–≤—ñ–ª—ñ–Ω—É',
      singularNominative: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É',
      singularGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω'
    }
  }),
  xMinutes: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Ö–≤—ñ–ª—ñ–Ω–∞',
      singularGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω'
    },
    past: {
      singularNominative: '{{count}} —Ö–≤—ñ–ª—ñ–Ω—É —Ç–∞–º—É',
      singularGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω—ã —Ç–∞–º—É',
      pluralGenitive: '{{count}} —Ö–≤—ñ–ª—ñ–Ω —Ç–∞–º—É'
    },
    future: {
      singularNominative: '–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É',
      singularGenitive: '–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã',
      pluralGenitive: '–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω'
    }
  }),
  aboutXHours: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      singularGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω',
      pluralGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω'
    },
    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—É',
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω'
    }
  }),
  xHours: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –≥–∞–¥–∑—ñ–Ω–∞',
      singularGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      pluralGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω'
    },
    past: {
      singularNominative: '{{count}} –≥–∞–¥–∑—ñ–Ω—É —Ç–∞–º—É',
      singularGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω—ã —Ç–∞–º—É',
      pluralGenitive: '{{count}} –≥–∞–¥–∑—ñ–Ω —Ç–∞–º—É'
    },
    future: {
      singularNominative: '–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—É',
      singularGenitive: '–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—ã',
      pluralGenitive: '–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω'
    }
  }),
  xDays: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –¥–∑–µ–Ω—å',
      singularGenitive: '{{count}} –¥–Ω—ñ',
      pluralGenitive: '{{count}} –¥–∑—ë–Ω'
    }
  }),
  aboutXWeeks: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞',
      // TODO
      singularGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û',
      // TODO
      pluralGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û' // TODO
    },

    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü',
      // TODO
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü—ã',
      // TODO
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü–∞—û' // TODO
    }
  }),

  xWeeks: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º–µ—Å—è—Ü',
      singularGenitive: '{{count}} –º–µ—Å—è—Ü—ã',
      pluralGenitive: '{{count}} –º–µ—Å—è—Ü–∞—û'
    }
  }),
  aboutXMonths: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞',
      singularGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û',
      pluralGenitive: '–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û'
    },
    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü',
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü—ã',
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü–∞—û'
    }
  }),
  xMonths: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º–µ—Å—è—Ü',
      singularGenitive: '{{count}} –º–µ—Å—è—Ü—ã',
      pluralGenitive: '{{count}} –º–µ—Å—è—Ü–∞—û'
    }
  }),
  aboutXYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∫–∞–ª—è {{count}} –≥–æ–¥–∞',
      singularGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–æ—û',
      pluralGenitive: '–∫–∞–ª—è {{count}} –≥–∞–¥–æ—û'
    },
    future: {
      singularNominative: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û'
    }
  }),
  xYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –≥–æ–¥',
      singularGenitive: '{{count}} –≥–∞–¥—ã',
      pluralGenitive: '{{count}} –≥–∞–¥–æ—û'
    }
  }),
  overXYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–æ–ª—å—à –∑–∞ {{count}} –≥–æ–¥',
      singularGenitive: '–±–æ–ª—å—à –∑–∞ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–±–æ–ª—å—à –∑–∞ {{count}} –≥–∞–¥–æ—û'
    },
    future: {
      singularNominative: '–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û'
    }
  }),
  almostXYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–∞–º–∞–ª—å {{count}} –≥–æ–¥',
      singularGenitive: '–∞–º–∞–ª—å {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–∞–º–∞–ª—å {{count}} –≥–∞–¥–æ—û'
    },
    future: {
      singularNominative: '–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã',
      pluralGenitive: '–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û'
    }
  })
};
var be_tarask_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  return be_tarask_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const be_tarask_lib_formatDistance = (be_tarask_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/formatLong/index.js

var be_tarask_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y '–≥.'",
  long: "d MMMM y '–≥.'",
  medium: "d MMM y '–≥.'",
  short: 'dd.MM.y'
};
var be_tarask_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var be_tarask_lib_formatLong_dateTimeFormats = {
  any: '{{date}}, {{time}}'
};
var be_tarask_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: be_tarask_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: be_tarask_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: be_tarask_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const be_tarask_lib_formatLong = (be_tarask_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/formatRelative/index.js


var formatRelative_accusativeWeekdays = ['–Ω—è–¥–∑–µ–ª—é', '–ø–∞–Ω—è–¥–∑–µ–ª–∞–∫', '–∞—û—Ç–æ—Ä–∞–∫', '—Å–µ—Ä–∞–¥—É', '—á–∞—Ü—å–≤–µ—Ä', '–ø—è—Ç–Ω—ñ—Ü—É', '—Å—É–±–æ—Ç—É'];
function formatRelative_lastWeek(day) {
  var weekday = formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –º—ñ–Ω—É–ª—É—é " + weekday + " –∞' p";
    case 1:
    case 2:
    case 4:
      return "'—É –º—ñ–Ω—É–ª—ã " + weekday + " –∞' p";
  }
}
function formatRelative_thisWeek(day) {
  var weekday = formatRelative_accusativeWeekdays[day];
  return "'—É " + weekday + " –∞' p";
}
function formatRelative_nextWeek(day) {
  var weekday = formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—É—é " + weekday + " –∞' p";
    case 1:
    case 2:
    case 4:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—ã " + weekday + " –∞' p";
  }
}
var formatRelative_lastWeekFormat = function lastWeekFormat(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return formatRelative_thisWeek(day);
  } else {
    return formatRelative_lastWeek(day);
  }
};
var formatRelative_nextWeekFormat = function nextWeekFormat(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return formatRelative_thisWeek(day);
  } else {
    return formatRelative_nextWeek(day);
  }
};
var be_tarask_lib_formatRelative_formatRelativeLocale = {
  lastWeek: formatRelative_lastWeekFormat,
  yesterday: "'—É—á–æ—Ä–∞ –∞' p",
  today: "'—Å—ë–Ω—å–Ω—è –∞' p",
  tomorrow: "'–∑–∞—û—Ç—Ä–∞ –∞' p",
  nextWeek: formatRelative_nextWeekFormat,
  other: 'P'
};
var be_tarask_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = be_tarask_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const be_tarask_lib_formatRelative = (be_tarask_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/localize/index.js

var be_tarask_lib_localize_eraValues = {
  narrow: ['–¥–∞ –Ω.—ç.', '–Ω.—ç.'],
  abbreviated: ['–¥–∞ –Ω. —ç.', '–Ω. —ç.'],
  wide: ['–¥–∞ –Ω–∞—à–∞–π —ç—Ä—ã', '–Ω–∞—à–∞–π —ç—Ä—ã']
};
var be_tarask_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-—ã –∫–≤.', '2-—ñ –∫–≤.', '3-—ñ –∫–≤.', '4-—ã –∫–≤.'],
  wide: ['1-—ã –∫–≤–∞—Ä—Ç–∞–ª', '2-—ñ –∫–≤–∞—Ä—Ç–∞–ª', '3-—ñ –∫–≤–∞—Ä—Ç–∞–ª', '4-—ã –∫–≤–∞—Ä—Ç–∞–ª']
};
var be_tarask_lib_localize_monthValues = {
  narrow: ['–°', '–õ', '–°', '–ö', '–¢', '–ß', '–õ', '–ñ', '–í', '–ö', '–õ', '–°'],
  abbreviated: ['—Å—Ç—É–¥–∑.', '–ª—é—Ç.', '—Å–∞–∫.', '–∫—Ä–∞—Å.', '—Ç—Ä–∞–≤.', '—á—ç—Ä–≤.', '–ª—ñ–ø.', '–∂–Ω.', '–≤–µ—Ä.', '–∫–∞—Å—Ç—Ä.', '–ª—ñ—Å—Ç.', '—Å—å–Ω–µ–∂.'],
  wide: ['—Å—Ç—É–¥–∑–µ–Ω—å', '–ª—é—Ç—ã', '—Å–∞–∫–∞–≤—ñ–∫', '–∫—Ä–∞—Å–∞–≤—ñ–∫', '—Ç—Ä–∞–≤–µ–Ω—å', '—á—ç—Ä–≤–µ–Ω—å', '–ª—ñ–ø–µ–Ω—å', '–∂–Ω—ñ–≤–µ–Ω—å', '–≤–µ—Ä–∞—Å–µ–Ω—å', '–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫', '–ª—ñ—Å—Ç–∞–ø–∞–¥', '—Å—å–Ω–µ–∂–∞–Ω—å']
};
var localize_formattingMonthValues = {
  narrow: ['–°', '–õ', '–°', '–ö', '–¢', '–ß', '–õ', '–ñ', '–í', '–ö', '–õ', '–°'],
  abbreviated: ['—Å—Ç—É–¥–∑.', '–ª—é—Ç.', '—Å–∞–∫.', '–∫—Ä–∞—Å.', '—Ç—Ä–∞–≤.', '—á—ç—Ä–≤.', '–ª—ñ–ø.', '–∂–Ω.', '–≤–µ—Ä.', '–∫–∞—Å—Ç—Ä.', '–ª—ñ—Å—Ç.', '—Å—å–Ω–µ–∂.'],
  wide: ['—Å—Ç—É–¥–∑–µ–Ω—è', '–ª—é—Ç–∞–≥–∞', '—Å–∞–∫–∞–≤—ñ–∫–∞', '–∫—Ä–∞—Å–∞–≤—ñ–∫–∞', '—Ç—Ä–∞—û–Ω—è', '—á—ç—Ä–≤–µ–Ω—è', '–ª—ñ–ø–µ–Ω—è', '–∂–Ω—ñ—û–Ω—è', '–≤–µ—Ä–∞—Å–Ω—è', '–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫–∞', '–ª—ñ—Å—Ç–∞–ø–∞–¥–∞', '—Å—å–Ω–µ–∂–Ω—è']
};
var be_tarask_lib_localize_dayValues = {
  narrow: ['–ù', '–ü', '–ê', '–°', '–ß', '–ü', '–°'],
  short: ['–Ω–¥', '–ø–Ω', '–∞—û', '—Å—Ä', '—á—Ü', '–ø—Ç', '—Å–±'],
  abbreviated: ['–Ω—è–¥–∑', '–ø–∞–Ω', '–∞—û—Ç', '—Å–µ—Ä', '—á–∞—Ü—å', '–ø—è—Ç', '—Å—É–±'],
  wide: ['–Ω—è–¥–∑–µ–ª—è', '–ø–∞–Ω—è–¥–∑–µ–ª–∞–∫', '–∞—û—Ç–æ—Ä–∞–∫', '—Å–µ—Ä–∞–¥–∞', '—á–∞—Ü—å–≤–µ—Ä', '–ø—è—Ç–Ω—ñ—Ü–∞', '—Å—É–±–æ—Ç–∞']
};
var be_tarask_lib_localize_dayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–∑–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–∑–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω–∞—á',
    noon: '–ø–æ—û–¥–∑–µ–Ω—å',
    morning: '—Ä–∞–Ω—ñ—Ü–∞',
    afternoon: '–¥–∑–µ–Ω—å',
    evening: '–≤–µ—á–∞—Ä',
    night: '–Ω–æ—á'
  }
};
var be_tarask_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ã'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω.',
    noon: '–ø–æ—û–¥.',
    morning: '—Ä–∞–Ω.',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ã'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ—û–Ω–∞—á',
    noon: '–ø–æ—û–¥–∑–µ–Ω—å',
    morning: '—Ä–∞–Ω—ñ—Ü—ã',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á–∞—Ä–∞',
    night: '–Ω–æ—á—ã'
  }
};
var be_tarask_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;

  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 –≤–µ—Ä–∞—Å–Ω—è)
   *  Incorrect: `do MMMM` (4-–≥–∞ –≤–µ—Ä–∞—Å–Ω—è)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do –¥–∑–µ–Ω—å –º–µ—Å—è—Ü–∞`)
   *  library will produce:            `5-–≥–∞ –¥–∑–µ–Ω—å –º–µ—Å—è—Ü–∞`
   *  but correct spelling should be:  `5-—ã –¥–∑–µ–Ω—å –º–µ—Å—è—Ü–∞`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */
  if (unit === 'date') {
    suffix = '-–≥–∞';
  } else if (unit === 'hour' || unit === 'minute' || unit === 'second') {
    suffix = '-—è';
  } else {
    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? '-—ñ' : '-—ã';
  }
  return number + suffix;
};
var be_tarask_lib_localize_localize = {
  ordinalNumber: be_tarask_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_dayPeriodValues,
    defaultWidth: 'any',
    formattingValues: be_tarask_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const be_tarask_lib_localize = (be_tarask_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/match/index.js


var be_tarask_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(–µ|—è|–≥–∞|—ñ|—ã|–∞–µ|–∞—è|—è—è|—à—ã|–≥—ñ|—Ü—ñ|—Ç—ã|–º—ã))?/i;
var be_tarask_lib_match_parseOrdinalNumberPattern = /\d+/i;
var be_tarask_lib_match_matchEraPatterns = {
  narrow: /^((–¥–∞ )?–Ω\.?\s?—ç\.?)/i,
  abbreviated: /^((–¥–∞ )?–Ω\.?\s?—ç\.?)/i,
  wide: /^(–¥–∞ –Ω–∞—à–∞–π —ç—Ä—ã|–Ω–∞—à–∞–π —ç—Ä—ã|–Ω–∞—à–∞ —ç—Ä–∞)/i
};
var be_tarask_lib_match_parseEraPatterns = {
  any: [/^–¥/i, /^–Ω/i]
};
var be_tarask_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[—ã—ñ]?)? –∫–≤.?/i,
  wide: /^[1234](-?[—ã—ñ]?)? –∫–≤–∞—Ä—Ç–∞–ª/i
};
var be_tarask_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var be_tarask_lib_match_matchMonthPatterns = {
  narrow: /^[—Å–ª–∫–º—á–∂–≤]/i,
  abbreviated: /^(—Å—Ç—É–¥–∑|–ª—é—Ç|—Å–∞–∫|–∫—Ä–∞—Å|—Ç—Ä(–∞–≤)?|—á—ç—Ä–≤|–ª—ñ–ø|–∂–Ω|–≤–µ—Ä|–∫–∞—Å—Ç—Ä|–ª—ñ—Å—Ç|—Å—å–Ω–µ–∂)\.?/i,
  wide: /^(—Å—Ç—É–¥–∑–µ–Ω[—å—è]|–ª—é—Ç(—ã|–∞–≥–∞)|—Å–∞–∫–∞–≤—ñ–∫–∞?|–∫—Ä–∞—Å–∞–≤—ñ–∫–∞?|—Ç—Ä–∞(–≤–µ–Ω—å|—û–Ω—è)|—á—ç—Ä–≤–µ–Ω[—å—è]|–ª—ñ–ø–µ–Ω[—å—è]|–∂–Ω—ñ(–≤–µ–Ω—å|—û–Ω—è)|–≤–µ—Ä–∞—Å(–µ–Ω—å|–Ω—è)|–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫–∞?|–ª—ñ—Å—Ç–∞–ø–∞–¥–∞?|—Å—å–Ω–µ–∂(–∞–Ω—å|–Ω—è))/i
};
var be_tarask_lib_match_parseMonthPatterns = {
  narrow: [/^—Å/i, /^–ª/i, /^—Å/i, /^–∫/i, /^—Ç/i, /^—á/i, /^–ª/i, /^–∂/i, /^–≤/i, /^–∫/i, /^–ª/i, /^—Å/i],
  any: [/^—Å—Ç/i, /^–ª—é/i, /^—Å–∞/i, /^–∫—Ä/i, /^—Ç—Ä/i, /^—á/i, /^–ª—ñ–ø/i, /^–∂/i, /^–≤/i, /^–∫–∞/i, /^–ª—ñ—Å/i, /^—Å–Ω/i]
};
var be_tarask_lib_match_matchDayPatterns = {
  narrow: /^[–Ω–ø–∞—Å—á]/i,
  short: /^(–Ω–¥|–Ω—è|–ø–Ω|–ø–∞|–∞—û|–∞—Ç|—Å—Ä|—Å–µ|—á—Ü|—á–∞|–ø—Ç|–ø—è|—Å–±|—Å—É)\.?/i,
  abbreviated: /^(–Ω—è–¥–∑?|–Ω–¥–∑|–ø–Ω–¥|–ø–∞–Ω|–∞—û—Ç|—Å—Ä–¥|—Å–µ—Ä|—á—Ü—å–≤|—á–∞—Ü—å|–ø—Ç–Ω|–ø—è—Ç|—Å—É–±).?/i,
  wide: /^(–Ω—è–¥–∑–µ–ª[—è—ñ]|–ø–∞–Ω—è–¥–∑–µ–ª(–∞–∫|–∫–∞)|–∞—û—Ç–æ—Ä(–∞–∫|–∫–∞)|—Å–µ—Ä–∞–¥[–∞—ã]|—á–∞—Ü—å–≤(–µ—Ä|—è—Ä–≥–∞)|–ø—è—Ç–Ω—ñ—Ü[–∞—ã]|—Å—É–±–æ—Ç[–∞—ã])/i
};
var be_tarask_lib_match_parseDayPatterns = {
  narrow: [/^–Ω/i, /^–ø/i, /^–∞/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
  any: [/^–Ω/i, /^–ø[–∞–Ω]/i, /^–∞/i, /^—Å[–µ—Ä]/i, /^—á/i, /^–ø[—è—Ç]/i, /^—Å[—É–±]/i]
};
var be_tarask_lib_match_matchDayPeriodPatterns = {
  narrow: /^([–¥–ø]–ø|–ø–æ—û–Ω\.?|–ø–æ—û–¥\.?|—Ä–∞–Ω\.?|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á—ã?)/i,
  abbreviated: /^([–¥–ø]–ø|–ø–æ—û–Ω\.?|–ø–æ—û–¥\.?|—Ä–∞–Ω\.?|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á—ã?)/i,
  wide: /^([–¥–ø]–ø|–ø–æ—û–Ω–∞—á|–ø–æ—û–¥–∑–µ–Ω—å|—Ä–∞–Ω—ñ—Ü[–∞—ã]|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á–∞—Ä–∞?|–Ω–æ—á—ã?)/i
};
var be_tarask_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–¥–ø/i,
    pm: /^–ø–ø/i,
    midnight: /^–ø–æ—û–Ω/i,
    noon: /^–ø–æ—û–¥/i,
    morning: /^—Ä/i,
    afternoon: /^–¥[–∑–Ω]/i,
    evening: /^–≤/i,
    night: /^–Ω/i
  }
};
var be_tarask_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: be_tarask_lib_match_matchOrdinalNumberPattern,
    parsePattern: be_tarask_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_tarask_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_tarask_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_tarask_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_tarask_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: be_tarask_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const be_tarask_lib_match = (be_tarask_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Belarusian Classic locale.
 * @language Belarusian Classic
 * @iso-639-2 bel
 * @author Ryhor Nopears [@nopears]{@link https://github.com/nopears}
 */
var be_tarask_locale = {
  code: 'be-tarask',
  formatDistance: be_tarask_lib_formatDistance,
  formatLong: be_tarask_lib_formatLong,
  formatRelative: be_tarask_lib_formatRelative,
  localize: be_tarask_lib_localize,
  match: be_tarask_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const be_tarask = (be_tarask_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/formatDistance/index.js
var bg_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '–ø–æ-–º–∞–ª–∫–æ –æ—Ç —Å–µ–∫—É–Ω–¥–∞',
    other: '–ø–æ-–º–∞–ª–∫–æ –æ—Ç {{count}} —Å–µ–∫—É–Ω–¥–∏'
  },
  xSeconds: {
    one: '1 —Å–µ–∫—É–Ω–¥–∞',
    other: '{{count}} —Å–µ–∫—É–Ω–¥–∏'
  },
  halfAMinute: '–ø–æ–ª–æ–≤–∏–Ω –º–∏–Ω—É—Ç–∞',
  lessThanXMinutes: {
    one: '–ø–æ-–º–∞–ª–∫–æ –æ—Ç –º–∏–Ω—É—Ç–∞',
    other: '–ø–æ-–º–∞–ª–∫–æ –æ—Ç {{count}} –º–∏–Ω—É—Ç–∏'
  },
  xMinutes: {
    one: '1 –º–∏–Ω—É—Ç–∞',
    other: '{{count}} –º–∏–Ω—É—Ç–∏'
  },
  aboutXHours: {
    one: '–æ–∫–æ–ª–æ —á–∞—Å',
    other: '–æ–∫–æ–ª–æ {{count}} —á–∞—Å–∞'
  },
  xHours: {
    one: '1 —á–∞—Å',
    other: '{{count}} —á–∞—Å–∞'
  },
  xDays: {
    one: '1 –¥–µ–Ω',
    other: '{{count}} –¥–Ω–∏'
  },
  aboutXWeeks: {
    one: '–æ–∫–æ–ª–æ —Å–µ–¥–º–∏—Ü–∞',
    other: '–æ–∫–æ–ª–æ {{count}} —Å–µ–¥–º–∏—Ü–∏'
  },
  xWeeks: {
    one: '1 —Å–µ–¥–º–∏—Ü–∞',
    other: '{{count}} —Å–µ–¥–º–∏—Ü–∏'
  },
  aboutXMonths: {
    one: '–æ–∫–æ–ª–æ –º–µ—Å–µ—Ü',
    other: '–æ–∫–æ–ª–æ {{count}} –º–µ—Å–µ—Ü–∞'
  },
  xMonths: {
    one: '1 –º–µ—Å–µ—Ü',
    other: '{{count}} –º–µ—Å–µ—Ü–∞'
  },
  aboutXYears: {
    one: '–æ–∫–æ–ª–æ –≥–æ–¥–∏–Ω–∞',
    other: '–æ–∫–æ–ª–æ {{count}} –≥–æ–¥–∏–Ω–∏'
  },
  xYears: {
    one: '1 –≥–æ–¥–∏–Ω–∞',
    other: '{{count}} –≥–æ–¥–∏–Ω–∏'
  },
  overXYears: {
    one: '–Ω–∞–¥ –≥–æ–¥–∏–Ω–∞',
    other: '–Ω–∞–¥ {{count}} –≥–æ–¥–∏–Ω–∏'
  },
  almostXYears: {
    one: '–ø–æ—á—Ç–∏ –≥–æ–¥–∏–Ω–∞',
    other: '–ø–æ—á—Ç–∏ {{count}} –≥–æ–¥–∏–Ω–∏'
  }
};
var bg_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = bg_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '—Å–ª–µ–¥ ' + result;
    } else {
      return '–ø—Ä–µ–¥–∏ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const bg_lib_formatDistance = (bg_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/formatLong/index.js

var bg_lib_formatLong_dateFormats = {
  full: 'EEEE, dd MMMM yyyy',
  long: 'dd MMMM yyyy',
  medium: 'dd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var bg_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'H:mm'
};
var bg_lib_formatLong_dateTimeFormats = {
  any: '{{date}} {{time}}'
};
var bg_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: bg_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: bg_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: bg_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const bg_lib_formatLong = (bg_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/formatRelative/index.js


// Adapted from the `ru` translation

var weekdays = ['–Ω–µ–¥–µ–ª—è', '–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä—è–¥–∞', '—á–µ—Ç–≤—ä—Ä—Ç—ä–∫', '–ø–µ—Ç—ä–∫', '—Å—ä–±–æ—Ç–∞'];
function _lib_formatRelative_lastWeek(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'–º–∏–Ω–∞–ª–∞—Ç–∞ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'–º–∏–Ω–∞–ª–∏—è " + weekday + " –≤' p";
  }
}
function _lib_formatRelative_thisWeek(day) {
  var weekday = weekdays[day];
  if (day === 2 /* Tue */) {
    return "'–≤—ä–≤ " + weekday + " –≤' p";
  } else {
    return "'–≤ " + weekday + " –≤' p";
  }
}
function _lib_formatRelative_nextWeek(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'—Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'—Å–ª–µ–¥–≤–∞—â–∏—è " + weekday + " –≤' p";
  }
}
var lastWeekFormatToken = function lastWeekFormatToken(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return _lib_formatRelative_thisWeek(day);
  } else {
    return _lib_formatRelative_lastWeek(day);
  }
};
var nextWeekFormatToken = function nextWeekFormatToken(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return _lib_formatRelative_thisWeek(day);
  } else {
    return _lib_formatRelative_nextWeek(day);
  }
};
var bg_lib_formatRelative_formatRelativeLocale = {
  lastWeek: lastWeekFormatToken,
  yesterday: "'–≤—á–µ—Ä–∞ –≤' p",
  today: "'–¥–Ω–µ—Å –≤' p",
  tomorrow: "'—É—Ç—Ä–µ –≤' p",
  nextWeek: nextWeekFormatToken,
  other: 'P'
};
var bg_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = bg_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const bg_lib_formatRelative = (bg_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/localize/index.js

var bg_lib_localize_eraValues = {
  narrow: ['–ø—Ä.–Ω.–µ.', '–Ω.–µ.'],
  abbreviated: ['–ø—Ä–µ–¥–∏ –Ω. –µ.', '–Ω. –µ.'],
  wide: ['–ø—Ä–µ–¥–∏ –Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞', '–Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞']
};
var bg_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-–≤–æ —Ç—Ä–∏–º–µ—Å.', '2-—Ä–æ —Ç—Ä–∏–º–µ—Å.', '3-—Ç–æ —Ç—Ä–∏–º–µ—Å.', '4-—Ç–æ —Ç—Ä–∏–º–µ—Å.'],
  wide: ['1-–≤–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ', '2-—Ä–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ', '3-—Ç–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ', '4-—Ç–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ']
};
var bg_lib_localize_monthValues = {
  abbreviated: ['—è–Ω—É', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '—é–Ω–∏', '—é–ª–∏', '–∞–≤–≥', '—Å–µ–ø', '–æ–∫—Ç', '–Ω–æ–µ', '–¥–µ–∫'],
  wide: ['—è–Ω—É–∞—Ä–∏', '—Ñ–µ–≤—Ä—É–∞—Ä–∏', '–º–∞—Ä—Ç', '–∞–ø—Ä–∏–ª', '–º–∞–π', '—é–Ω–∏', '—é–ª–∏', '–∞–≤–≥—É—Å—Ç', '—Å–µ–ø—Ç–µ–º–≤—Ä–∏', '–æ–∫—Ç–æ–º–≤—Ä–∏', '–Ω–æ–µ–º–≤—Ä–∏', '–¥–µ–∫–µ–º–≤—Ä–∏']
};
var bg_lib_localize_dayValues = {
  narrow: ['–ù', '–ü', '–í', '–°', '–ß', '–ü', '–°'],
  short: ['–Ω–¥', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'],
  abbreviated: ['–Ω–µ–¥', '–ø–æ–Ω', '–≤—Ç–æ', '—Å—Ä—è', '—á–µ—Ç', '–ø–µ—Ç', '—Å—ä–±'],
  wide: ['–Ω–µ–¥–µ–ª—è', '–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä—è–¥–∞', '—á–µ—Ç–≤—ä—Ä—Ç—ä–∫', '–ø–µ—Ç—ä–∫', '—Å—ä–±–æ—Ç–∞']
};
var bg_lib_localize_dayPeriodValues = {
  wide: {
    am: '–ø—Ä–µ–¥–∏ –æ–±—è–¥',
    pm: '—Å–ª–µ–¥ –æ–±—è–¥',
    midnight: '–≤ –ø–æ–ª—É–Ω–æ—â',
    noon: '–Ω–∞ –æ–±—è–¥',
    morning: '—Å—É—Ç—Ä–∏–Ω—Ç–∞',
    afternoon: '—Å–ª–µ–¥–æ–±–µ–¥',
    evening: '–≤–µ—á–µ—Ä—Ç–∞',
    night: '–ø—Ä–µ–∑ –Ω–æ—â—Ç–∞'
  }
};
function isFeminine(unit) {
  return unit === 'year' || unit === 'week' || unit === 'minute' || unit === 'second';
}
function isNeuter(unit) {
  return unit === 'quarter';
}
function numberWithSuffix(number, unit, masculine, feminine, neuter) {
  var suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
  return number + '-' + suffix;
}
var bg_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (number === 0) {
    return numberWithSuffix(0, unit, '–µ–≤', '–µ–≤–∞', '–µ–≤–æ');
  } else if (number % 1000 === 0) {
    return numberWithSuffix(number, unit, '–µ–Ω', '–Ω–∞', '–Ω–æ');
  } else if (number % 100 === 0) {
    return numberWithSuffix(number, unit, '—Ç–µ–Ω', '—Ç–Ω–∞', '—Ç–Ω–æ');
  }
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return numberWithSuffix(number, unit, '–≤–∏', '–≤–∞', '–≤–æ');
      case 2:
        return numberWithSuffix(number, unit, '—Ä–∏', '—Ä–∞', '—Ä–æ');
      case 7:
      case 8:
        return numberWithSuffix(number, unit, '–º–∏', '–º–∞', '–º–æ');
    }
  }
  return numberWithSuffix(number, unit, '—Ç–∏', '—Ç–∞', '—Ç–æ');
};
var bg_lib_localize_localize = {
  ordinalNumber: bg_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const bg_lib_localize = (bg_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/match/index.js


var bg_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?[–≤—Ä–º—Ç][–∞–∏]|-?—Ç?(–µ–Ω|–Ω–∞)|-?(–µ–≤|–µ–≤–∞))?/i;
var bg_lib_match_parseOrdinalNumberPattern = /\d+/i;
var bg_lib_match_matchEraPatterns = {
  narrow: /^((–ø—Ä)?–Ω\.?\s?–µ\.?)/i,
  abbreviated: /^((–ø—Ä)?–Ω\.?\s?–µ\.?)/i,
  wide: /^(–ø—Ä–µ–¥–∏ –Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞|–Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞|–Ω–æ–≤–∞ –µ—Ä–∞)/i
};
var bg_lib_match_parseEraPatterns = {
  any: [/^–ø/i, /^–Ω/i]
};
var bg_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[–≤—Ä—Ç]?o?)? —Ç—Ä–∏–º–µ—Å.?/i,
  wide: /^[1234](-?[–≤—Ä—Ç]?–æ?)? —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ/i
};
var bg_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var bg_lib_match_matchDayPatterns = {
  narrow: /^[–Ω–ø–≤—Å—á]/i,
  short: /^(–Ω–¥|–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±)/i,
  abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|–≤—Ç–æ|—Å—Ä—è|—á–µ—Ç|–ø–µ—Ç|—Å—ä–±)/i,
  wide: /^(–Ω–µ–¥–µ–ª—è|–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä—è–¥–∞|—á–µ—Ç–≤—ä—Ä—Ç—ä–∫|–ø–µ—Ç—ä–∫|—Å—ä–±–æ—Ç–∞)/i
};
var bg_lib_match_parseDayPatterns = {
  narrow: [/^–Ω/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
  any: [/^–Ω[–µ–¥]/i, /^–ø[–æ–Ω]/i, /^–≤—Ç/i, /^—Å—Ä/i, /^—á[–µ—Ç]/i, /^–ø[–µ—Ç]/i, /^—Å[—ä–±]/i]
};
var bg_lib_match_matchMonthPatterns = {
  abbreviated: /^(—è–Ω—É|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥|—Å–µ–ø|–æ–∫—Ç|–Ω–æ–µ|–¥–µ–∫)/i,
  wide: /^(—è–Ω—É–∞—Ä–∏|—Ñ–µ–≤—Ä—É–∞—Ä–∏|–º–∞—Ä—Ç|–∞–ø—Ä–∏–ª|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥—É—Å—Ç|—Å–µ–ø—Ç–µ–º–≤—Ä–∏|–æ–∫—Ç–æ–º–≤—Ä–∏|–Ω–æ–µ–º–≤—Ä–∏|–¥–µ–∫–µ–º–≤—Ä–∏)/i
};
var bg_lib_match_parseMonthPatterns = {
  any: [/^—è/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞–π/i, /^—é–Ω/i, /^—é–ª/i, /^–∞–≤/i, /^—Å–µ/i, /^–æ–∫—Ç/i, /^–Ω–æ/i, /^–¥–µ/i]
};
var bg_lib_match_matchDayPeriodPatterns = {
  any: /^(–ø—Ä–µ–¥–∏ –æ|—Å–ª–µ–¥ –æ|–≤ –ø–æ|–Ω–∞ –æ|–ø—Ä–µ–∑|–≤–µ—á|—Å—É—Ç|—Å–ª–µ–¥–æ)/i
};
var bg_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–ø—Ä–µ–¥–∏ –æ/i,
    pm: /^—Å–ª–µ–¥ –æ/i,
    midnight: /^–≤ –ø–æ–ª/i,
    noon: /^–Ω–∞ –æ–±/i,
    morning: /^—Å—É—Ç/i,
    afternoon: /^—Å–ª–µ–¥–æ/i,
    evening: /^–≤–µ—á/i,
    night: /^–ø—Ä–µ–∑ –Ω/i
  }
};
var bg_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: bg_lib_match_matchOrdinalNumberPattern,
    parsePattern: bg_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bg_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bg_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bg_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bg_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: bg_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const bg_lib_match = (bg_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Bulgarian locale.
 * @language Bulgarian
 * @iso-639-2 bul
 * @author Nikolay Stoynov [@arvigeus]{@link https://github.com/arvigeus}
 * @author Tsvetan Ovedenski [@fintara]{@link https://github.com/fintara}
 */
var bg_locale = {
  code: 'bg',
  formatDistance: bg_lib_formatDistance,
  formatLong: bg_lib_formatLong,
  formatRelative: bg_lib_formatRelative,
  localize: bg_lib_localize,
  match: bg_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const bg = (bg_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/localize/index.js

var numberValues = {
  locale: {
    '1': '‡ßß',
    '2': '‡ß®',
    '3': '‡ß©',
    '4': '‡ß™',
    '5': '‡ß´',
    '6': '‡ß¨',
    '7': '‡ß≠',
    '8': '‡ßÆ',
    '9': '‡ßØ',
    '0': '‡ß¶'
  },
  number: {
    '‡ßß': '1',
    '‡ß®': '2',
    '‡ß©': '3',
    '‡ß™': '4',
    '‡ß´': '5',
    '‡ß¨': '6',
    '‡ß≠': '7',
    '‡ßÆ': '8',
    '‡ßØ': '9',
    '‡ß¶': '0'
  }
};
var bn_lib_localize_eraValues = {
  narrow: ['‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶É', '‡¶ñ‡ßç‡¶∞‡¶ø‡¶É'],
  abbreviated: ['‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶∞‡ßç‡¶¨', '‡¶ñ‡ßç‡¶∞‡¶ø‡¶É'],
  wide: ['‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶™‡ßÇ‡¶∞‡ßç‡¶¨', '‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶¨‡ßç‡¶¶']
};
var bn_lib_localize_quarterValues = {
  narrow: ['‡ßß', '‡ß®', '‡ß©', '‡ß™'],
  abbreviated: ['‡ßß‡¶§‡ßç‡¶∞‡ßà', '‡ß®‡¶§‡ßç‡¶∞‡ßà', '‡ß©‡¶§‡ßç‡¶∞‡ßà', '‡ß™‡¶§‡ßç‡¶∞‡ßà'],
  wide: ['‡ßß‡¶Æ ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï', '‡ß®‡ßü ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï', '‡ß©‡ßü ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï', '‡ß™‡¶∞‡ßç‡¶• ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï']
};
var bn_lib_localize_monthValues = {
  narrow: ['‡¶ú‡¶æ‡¶®‡ßÅ', '‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ', '‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö', '‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤', '‡¶Æ‡ßá', '‡¶ú‡ßÅ‡¶®', '‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á', '‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü', '‡¶∏‡ßá‡¶™‡ßç‡¶ü', '‡¶Ö‡¶ï‡ßç‡¶ü‡ßã', '‡¶®‡¶≠‡ßá', '‡¶°‡¶ø‡¶∏‡ßá'],
  abbreviated: ['‡¶ú‡¶æ‡¶®‡ßÅ', '‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ', '‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö', '‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤', '‡¶Æ‡ßá', '‡¶ú‡ßÅ‡¶®', '‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á', '‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü', '‡¶∏‡ßá‡¶™‡ßç‡¶ü', '‡¶Ö‡¶ï‡ßç‡¶ü‡ßã', '‡¶®‡¶≠‡ßá', '‡¶°‡¶ø‡¶∏‡ßá'],
  wide: ['‡¶ú‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø', '‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø', '‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö', '‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤', '‡¶Æ‡ßá', '‡¶ú‡ßÅ‡¶®', '‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á', '‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü', '‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞', '‡¶Ö‡¶ï‡ßç‡¶ü‡ßã‡¶¨‡¶∞', '‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞', '‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞']
};
var bn_lib_localize_dayValues = {
  narrow: ['‡¶∞', '‡¶∏‡ßã', '‡¶Æ', '‡¶¨‡ßÅ', '‡¶¨‡ßÉ', '‡¶∂‡ßÅ', '‡¶∂'],
  short: ['‡¶∞‡¶¨‡¶ø', '‡¶∏‡ßã‡¶Æ', '‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤', '‡¶¨‡ßÅ‡¶ß', '‡¶¨‡ßÉ‡¶π', '‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞', '‡¶∂‡¶®‡¶ø'],
  abbreviated: ['‡¶∞‡¶¨‡¶ø', '‡¶∏‡ßã‡¶Æ', '‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤', '‡¶¨‡ßÅ‡¶ß', '‡¶¨‡ßÉ‡¶π', '‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞', '‡¶∂‡¶®‡¶ø'],
  wide: ['‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞', '‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞', '‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞', '‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞', '‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ', '‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞', '‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞']
};
var bn_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‡¶™‡ßÇ',
    pm: '‡¶Ö‡¶™',
    midnight: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§',
    noon: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®',
    morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
    afternoon: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤',
    evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
    night: '‡¶∞‡¶æ‡¶§'
  },
  abbreviated: {
    am: '‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®',
    pm: '‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®',
    midnight: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§',
    noon: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®',
    morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
    afternoon: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤',
    evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
    night: '‡¶∞‡¶æ‡¶§'
  },
  wide: {
    am: '‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®',
    pm: '‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®',
    midnight: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§',
    noon: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®',
    morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
    afternoon: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤',
    evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
    night: '‡¶∞‡¶æ‡¶§'
  }
};
var bn_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‡¶™‡ßÇ',
    pm: '‡¶Ö‡¶™',
    midnight: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§',
    noon: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®',
    morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
    afternoon: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤',
    evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
    night: '‡¶∞‡¶æ‡¶§'
  },
  abbreviated: {
    am: '‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®',
    pm: '‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®',
    midnight: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§',
    noon: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®',
    morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
    afternoon: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤',
    evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
    night: '‡¶∞‡¶æ‡¶§'
  },
  wide: {
    am: '‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®',
    pm: '‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®',
    midnight: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§',
    noon: '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®',
    morning: '‡¶∏‡¶ï‡¶æ‡¶≤',
    afternoon: '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤',
    evening: '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
    night: '‡¶∞‡¶æ‡¶§'
  }
};
function dateOrdinalNumber(number, localeNumber) {
  if (number > 18 && number <= 31) {
    return localeNumber + '‡¶∂‡ßá';
  } else {
    switch (number) {
      case 1:
        return localeNumber + '‡¶≤‡¶æ';
      case 2:
      case 3:
        return localeNumber + '‡¶∞‡¶æ';
      case 4:
        return localeNumber + '‡¶†‡¶æ';
      default:
        return localeNumber + '‡¶á';
    }
  }
}
var bn_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var localeNumber = numberToLocale(number);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (unit === 'date') {
    return dateOrdinalNumber(number, localeNumber);
  }
  if (number > 10 || number === 0) return localeNumber + '‡¶§‡¶Æ';
  var rem10 = number % 10;
  switch (rem10) {
    case 2:
    case 3:
      return localeNumber + '‡ßü';
    case 4:
      return localeNumber + '‡¶∞‡ßç‡¶•';
    case 6:
      return localeNumber + '‡¶∑‡ßç‡¶†';
    default:
      return localeNumber + '‡¶Æ';
  }
};

// function localeToNumber(locale: string): number {
//   const enNumber = locale.toString().replace(/[‡ßß‡ß®‡ß©‡ß™‡ß´‡ß¨‡ß≠‡ßÆ‡ßØ‡ß¶]/g, function (match) {
//     return numberValues.number[match as keyof typeof numberValues.number]
//   })
//   return Number(enNumber)
// }

function numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function (match) {
    return numberValues.locale[match];
  });
}
var bn_lib_localize_localize = {
  ordinalNumber: bn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: bn_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const bn_lib_localize = (bn_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/formatDistance/index.js

var bn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°'
  },
  xSeconds: {
    one: '‡ßß ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°',
    other: '{{count}} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°'
  },
  halfAMinute: '‡¶Ü‡¶ß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü',
  lessThanXMinutes: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü'
  },
  xMinutes: {
    one: '‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü',
    other: '{{count}} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü'
  },
  aboutXHours: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶ò‡¶®‡ßç‡¶ü‡¶æ',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ'
  },
  xHours: {
    one: '‡ßß ‡¶ò‡¶®‡ßç‡¶ü‡¶æ',
    other: '{{count}} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ'
  },
  xDays: {
    one: '‡ßß ‡¶¶‡¶ø‡¶®',
    other: '{{count}} ‡¶¶‡¶ø‡¶®'
  },
  aboutXWeeks: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π'
  },
  xWeeks: {
    one: '‡ßß ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π',
    other: '{{count}} ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π'
  },
  aboutXMonths: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶Æ‡¶æ‡¶∏',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶Æ‡¶æ‡¶∏'
  },
  xMonths: {
    one: '‡ßß ‡¶Æ‡¶æ‡¶∏',
    other: '{{count}} ‡¶Æ‡¶æ‡¶∏'
  },
  aboutXYears: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶¨‡¶õ‡¶∞',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶¨‡¶õ‡¶∞'
  },
  xYears: {
    one: '‡ßß ‡¶¨‡¶õ‡¶∞',
    other: '{{count}} ‡¶¨‡¶õ‡¶∞'
  },
  overXYears: {
    one: '‡ßß ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø',
    other: '{{count}} ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø'
  },
  almostXYears: {
    one: '‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶¨‡¶õ‡¶∞',
    other: '‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶¨‡¶õ‡¶∞'
  }
};
var bn_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = bn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', numberToLocale(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá';
    } else {
      return result + ' ‡¶Ü‡¶ó‡ßá';
    }
  }
  return result;
};
/* harmony default export */ const bn_lib_formatDistance = (bn_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/formatLong/index.js

var bn_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var bn_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var bn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}} '‡¶∏‡¶Æ‡ßü'",
  long: "{{date}} {{time}} '‡¶∏‡¶Æ‡ßü'",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var bn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: bn_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: bn_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: bn_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const bn_lib_formatLong = (bn_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/formatRelative/index.js
var bn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‡¶ó‡¶§' eeee '‡¶∏‡¶Æ‡ßü' p",
  yesterday: "'‡¶ó‡¶§‡¶ï‡¶æ‡¶≤' '‡¶∏‡¶Æ‡ßü' p",
  today: "'‡¶Ü‡¶ú' '‡¶∏‡¶Æ‡ßü' p",
  tomorrow: "'‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤' '‡¶∏‡¶Æ‡ßü' p",
  nextWeek: "eeee '‡¶∏‡¶Æ‡ßü' p",
  other: 'P'
};
var bn_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return bn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const bn_lib_formatRelative = (bn_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/match/index.js


var bn_lib_match_matchOrdinalNumberPattern = /^(\d+)(‡¶Æ|‡ßü|‡¶∞‡ßç‡¶•|‡¶∑‡ßç‡¶†|‡¶∂‡ßá|‡¶á|‡¶§‡¶Æ)?/i;
var bn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var bn_lib_match_matchEraPatterns = {
  narrow: /^(‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶É|‡¶ñ‡ßç‡¶∞‡¶ø‡¶É)/i,
  abbreviated: /^(‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶∞‡ßç‡¶¨|‡¶ñ‡ßç‡¶∞‡¶ø‡¶É)/i,
  wide: /^(‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶™‡ßÇ‡¶∞‡ßç‡¶¨|‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶¨‡ßç‡¶¶)/i
};
var bn_lib_match_parseEraPatterns = {
  narrow: [/^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶É/i, /^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É/i],
  abbreviated: [/^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶∞‡ßç‡¶¨/i, /^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É/i],
  wide: [/^‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶™‡ßÇ‡¶∞‡ßç‡¶¨/i, /^‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶¨‡ßç‡¶¶/i]
};
var bn_lib_match_matchQuarterPatterns = {
  narrow: /^[‡ßß‡ß®‡ß©‡ß™]/i,
  abbreviated: /^[‡ßß‡ß®‡ß©‡ß™]‡¶§‡ßç‡¶∞‡ßà/i,
  wide: /^[‡ßß‡ß®‡ß©‡ß™](‡¶Æ|‡ßü|‡¶∞‡ßç‡¶•)? ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï/i
};
var bn_lib_match_parseQuarterPatterns = {
  any: [/‡ßß/i, /‡ß®/i, /‡ß©/i, /‡ß™/i]
};
var bn_lib_match_matchMonthPatterns = {
  narrow: /^(‡¶ú‡¶æ‡¶®‡ßÅ|‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ|‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö|‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤|‡¶Æ‡ßá|‡¶ú‡ßÅ‡¶®|‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á|‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü|‡¶∏‡ßá‡¶™‡ßç‡¶ü|‡¶Ö‡¶ï‡ßç‡¶ü‡ßã|‡¶®‡¶≠‡ßá|‡¶°‡¶ø‡¶∏‡ßá)/i,
  abbreviated: /^(‡¶ú‡¶æ‡¶®‡ßÅ|‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ|‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö|‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤|‡¶Æ‡ßá|‡¶ú‡ßÅ‡¶®|‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á|‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü|‡¶∏‡ßá‡¶™‡ßç‡¶ü|‡¶Ö‡¶ï‡ßç‡¶ü‡ßã|‡¶®‡¶≠‡ßá|‡¶°‡¶ø‡¶∏‡ßá)/i,
  wide: /^(‡¶ú‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø|‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø|‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö|‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤|‡¶Æ‡ßá|‡¶ú‡ßÅ‡¶®|‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á|‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü|‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞|‡¶Ö‡¶ï‡ßç‡¶ü‡ßã‡¶¨‡¶∞|‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞|‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞)/i
};
var bn_lib_match_parseMonthPatterns = {
  any: [/^‡¶ú‡¶æ‡¶®‡ßÅ/i, /^‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ/i, /^‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö/i, /^‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤/i, /^‡¶Æ‡ßá/i, /^‡¶ú‡ßÅ‡¶®/i, /^‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á/i, /^‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü/i, /^‡¶∏‡ßá‡¶™‡ßç‡¶ü/i, /^‡¶Ö‡¶ï‡ßç‡¶ü‡ßã/i, /^‡¶®‡¶≠‡ßá/i, /^‡¶°‡¶ø‡¶∏‡ßá/i]
};
var bn_lib_match_matchDayPatterns = {
  narrow: /^(‡¶∞|‡¶∏‡ßã|‡¶Æ|‡¶¨‡ßÅ|‡¶¨‡ßÉ|‡¶∂‡ßÅ|‡¶∂)+/i,
  short: /^(‡¶∞‡¶¨‡¶ø|‡¶∏‡ßã‡¶Æ|‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤|‡¶¨‡ßÅ‡¶ß|‡¶¨‡ßÉ‡¶π|‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞|‡¶∂‡¶®‡¶ø)+/i,
  abbreviated: /^(‡¶∞‡¶¨‡¶ø|‡¶∏‡ßã‡¶Æ|‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤|‡¶¨‡ßÅ‡¶ß|‡¶¨‡ßÉ‡¶π|‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞|‡¶∂‡¶®‡¶ø)+/i,
  wide: /^(‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞|‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞|‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞|‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞|‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ |‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞|‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞)+/i
};
var bn_lib_match_parseDayPatterns = {
  narrow: [/^‡¶∞/i, /^‡¶∏‡ßã/i, /^‡¶Æ/i, /^‡¶¨‡ßÅ/i, /^‡¶¨‡ßÉ/i, /^‡¶∂‡ßÅ/i, /^‡¶∂/i],
  short: [/^‡¶∞‡¶¨‡¶ø/i, /^‡¶∏‡ßã‡¶Æ/i, /^‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤/i, /^‡¶¨‡ßÅ‡¶ß/i, /^‡¶¨‡ßÉ‡¶π/i, /^‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞/i, /^‡¶∂‡¶®‡¶ø/i],
  abbreviated: [/^‡¶∞‡¶¨‡¶ø/i, /^‡¶∏‡ßã‡¶Æ/i, /^‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤/i, /^‡¶¨‡ßÅ‡¶ß/i, /^‡¶¨‡ßÉ‡¶π/i, /^‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞/i, /^‡¶∂‡¶®‡¶ø/i],
  wide: [/^‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞/i, /^‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞/i, /^‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞/i, /^‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞/i, /^‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ /i, /^‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞/i, /^‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞/i]
};
var bn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(‡¶™‡ßÇ|‡¶Ö‡¶™|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®|‡¶∏‡¶ï‡¶æ‡¶≤|‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤|‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ|‡¶∞‡¶æ‡¶§)/i,
  abbreviated: /^(‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®|‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®|‡¶∏‡¶ï‡¶æ‡¶≤|‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤|‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ|‡¶∞‡¶æ‡¶§)/i,
  wide: /^(‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®|‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®|‡¶∏‡¶ï‡¶æ‡¶≤|‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤|‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ|‡¶∞‡¶æ‡¶§)/i
};
var bn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‡¶™‡ßÇ/i,
    pm: /^‡¶Ö‡¶™/i,
    midnight: /^‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§/i,
    noon: /^‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®/i,
    morning: /‡¶∏‡¶ï‡¶æ‡¶≤/i,
    afternoon: /‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤/i,
    evening: /‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ/i,
    night: /‡¶∞‡¶æ‡¶§/i
  }
};
var bn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: bn_lib_match_matchOrdinalNumberPattern,
    parsePattern: bn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bn_lib_match_parseEraPatterns,
    defaultParseWidth: 'wide'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bn_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bn_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bn_lib_match_parseDayPatterns,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const bn_lib_match = (bn_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Bengali locale.
 * @language Bengali
 * @iso-639-2 ben
 * @author Touhidur Rahman [@touhidrahman]{@link https://github.com/touhidrahman}
 * @author Farhad Yasir [@nutboltu]{@link https://github.com/nutboltu}
 */
var bn_locale = {
  code: 'bn',
  formatDistance: bn_lib_formatDistance,
  formatLong: bn_lib_formatLong,
  formatRelative: bn_lib_formatRelative,
  localize: bn_lib_localize,
  match: bn_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const bn = (bn_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/formatDistance/index.js
var bs_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: 'manje od 1 sekunde',
      withPrepositionAgo: 'manje od 1 sekunde',
      withPrepositionIn: 'manje od 1 sekundu'
    },
    dual: 'manje od {{count}} sekunde',
    other: 'manje od {{count}} sekundi'
  },
  xSeconds: {
    one: {
      standalone: '1 sekunda',
      withPrepositionAgo: '1 sekunde',
      withPrepositionIn: '1 sekundu'
    },
    dual: '{{count}} sekunde',
    other: '{{count}} sekundi'
  },
  halfAMinute: 'pola minute',
  lessThanXMinutes: {
    one: {
      standalone: 'manje od 1 minute',
      withPrepositionAgo: 'manje od 1 minute',
      withPrepositionIn: 'manje od 1 minutu'
    },
    dual: 'manje od {{count}} minute',
    other: 'manje od {{count}} minuta'
  },
  xMinutes: {
    one: {
      standalone: '1 minuta',
      withPrepositionAgo: '1 minute',
      withPrepositionIn: '1 minutu'
    },
    dual: '{{count}} minute',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: {
      standalone: 'oko 1 sat',
      withPrepositionAgo: 'oko 1 sat',
      withPrepositionIn: 'oko 1 sat'
    },
    dual: 'oko {{count}} sata',
    other: 'oko {{count}} sati'
  },
  xHours: {
    one: {
      standalone: '1 sat',
      withPrepositionAgo: '1 sat',
      withPrepositionIn: '1 sat'
    },
    dual: '{{count}} sata',
    other: '{{count}} sati'
  },
  xDays: {
    one: {
      standalone: '1 dan',
      withPrepositionAgo: '1 dan',
      withPrepositionIn: '1 dan'
    },
    dual: '{{count}} dana',
    other: '{{count}} dana'
  },
  aboutXWeeks: {
    one: {
      standalone: 'oko 1 sedmicu',
      withPrepositionAgo: 'oko 1 sedmicu',
      withPrepositionIn: 'oko 1 sedmicu'
    },
    dual: 'oko {{count}} sedmice',
    other: 'oko {{count}} sedmice'
  },
  xWeeks: {
    one: {
      standalone: '1 sedmicu',
      withPrepositionAgo: '1 sedmicu',
      withPrepositionIn: '1 sedmicu'
    },
    dual: '{{count}} sedmice',
    other: '{{count}} sedmice'
  },
  aboutXMonths: {
    one: {
      standalone: 'oko 1 mjesec',
      withPrepositionAgo: 'oko 1 mjesec',
      withPrepositionIn: 'oko 1 mjesec'
    },
    dual: 'oko {{count}} mjeseca',
    other: 'oko {{count}} mjeseci'
  },
  xMonths: {
    one: {
      standalone: '1 mjesec',
      withPrepositionAgo: '1 mjesec',
      withPrepositionIn: '1 mjesec'
    },
    dual: '{{count}} mjeseca',
    other: '{{count}} mjeseci'
  },
  aboutXYears: {
    one: {
      standalone: 'oko 1 godinu',
      withPrepositionAgo: 'oko 1 godinu',
      withPrepositionIn: 'oko 1 godinu'
    },
    dual: 'oko {{count}} godine',
    other: 'oko {{count}} godina'
  },
  xYears: {
    one: {
      standalone: '1 godina',
      withPrepositionAgo: '1 godine',
      withPrepositionIn: '1 godinu'
    },
    dual: '{{count}} godine',
    other: '{{count}} godina'
  },
  overXYears: {
    one: {
      standalone: 'preko 1 godinu',
      withPrepositionAgo: 'preko 1 godinu',
      withPrepositionIn: 'preko 1 godinu'
    },
    dual: 'preko {{count}} godine',
    other: 'preko {{count}} godina'
  },
  almostXYears: {
    one: {
      standalone: 'gotovo 1 godinu',
      withPrepositionAgo: 'gotovo 1 godinu',
      withPrepositionIn: 'gotovo 1 godinu'
    },
    dual: 'gotovo {{count}} godine',
    other: 'gotovo {{count}} godina'
  }
};
var bs_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = bs_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'za ' + result;
    } else {
      return 'prije ' + result;
    }
  }
  return result;
};
/* harmony default export */ const bs_lib_formatDistance = (bs_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/formatLong/index.js

var bs_lib_formatLong_dateFormats = {
  full: 'EEEE, d. MMMM yyyy.',
  long: 'd. MMMM yyyy.',
  medium: 'd. MMM yy.',
  short: 'dd. MM. yy.'
};
var bs_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var bs_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var bs_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: bs_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: bs_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: bs_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const bs_lib_formatLong = (bs_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/formatRelative/index.js
var bs_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'pro≈°le nedjelje u' p";
      case 3:
        return "'pro≈°le srijede u' p";
      case 6:
        return "'pro≈°le subote u' p";
      default:
        return "'pro≈°li' EEEE 'u' p";
    }
  },
  yesterday: "'juƒçe u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'sljedeƒáe nedjelje u' p";
      case 3:
        return "'sljedeƒáu srijedu u' p";
      case 6:
        return "'sljedeƒáu subotu u' p";
      default:
        return "'sljedeƒái' EEEE 'u' p";
    }
  },
  other: 'P'
};
var bs_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = bs_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const bs_lib_formatRelative = (bs_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/localize/index.js

var bs_lib_localize_eraValues = {
  narrow: ['pr.n.e.', 'AD'],
  abbreviated: ['pr. Hr.', 'po. Hr.'],
  wide: ['Prije Hrista', 'Poslije Hrista']
};
var bs_lib_localize_quarterValues = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var bs_lib_localize_monthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'juni', 'juli', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var _lib_localize_formattingMonthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'juni', 'juli', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var bs_lib_localize_dayValues = {
  narrow: ['N', 'P', 'U', 'S', 'ƒå', 'P', 'S'],
  short: ['ned', 'pon', 'uto', 'sre', 'ƒçet', 'pet', 'sub'],
  abbreviated: ['ned', 'pon', 'uto', 'sre', 'ƒçet', 'pet', 'sub'],
  wide: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'ƒçetvrtak', 'petak', 'subota']
};
var bs_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'poslije podne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  }
};
var bs_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'poslije podne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  }
};
var bs_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return String(number) + '.';
};
var bs_lib_localize_localize = {
  ordinalNumber: bs_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: _lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: bs_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const bs_lib_localize = (bs_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/match/index.js


var bs_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var bs_lib_match_parseOrdinalNumberPattern = /\d+/i;
var bs_lib_match_matchEraPatterns = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i
};
var bs_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|nova)/i]
};
var bs_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var bs_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var bs_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
var bs_lib_match_parseMonthPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var bs_lib_match_matchDayPatterns = {
  narrow: /^[npusƒçc]/i,
  short: /^(ned|pon|uto|sre|(ƒçet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(ƒçet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(ƒçetvrtak|cetvrtak)|petak|subota)/i
};
var bs_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var bs_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|ponoc|ponoƒá|(po)?podne|uvece|uveƒçe|noƒáu|poslije podne|ujutru)/i
};
var bs_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(uvece|uveƒçe)/i,
    night: /(nocu|noƒáu)/i
  }
};
var bs_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: bs_lib_match_matchOrdinalNumberPattern,
    parsePattern: bs_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bs_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bs_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bs_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: bs_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: bs_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const bs_lib_match = (bs_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Bosnian locale.
 * @language Bosnian
 * @iso-639-2 bos
 * @author Branislav Laziƒá [@branislavlazic]{@link https://github.com/branislavlazic}
 */
var bs_locale = {
  code: 'bs',
  formatDistance: bs_lib_formatDistance,
  formatLong: bs_lib_formatLong,
  formatRelative: bs_lib_formatRelative,
  localize: bs_lib_localize,
  match: bs_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const bs = (bs_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/formatDistance/index.js
/**
 * Davant de les xifres que es diuen amb vocal inicial, 1 i 11, s'apostrofen els articles el i la i la preposici√≥ de igual que si estiguessin escrits amb lletres.
 *    l'1 de juliol ('l'u')
 *    l'11 de novembre ('l'onze')
 *    l'11a cl√†usula del contracte ('l'onzena')
 *    la contractaci√≥ d'11 jugadors ('d'onze')
 *    l'aval d'11.000 socis ('d'onze mil')
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=apostrofaci%25F3+davant+xifres&action=Principal&method=detall_completa&numPagina=1&idHit=11236&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=11236&titol=apostrofaci%F3%20davant%20de%20xifres%20%2F%20apostrofaci%F3%20davant%20de%201%20i%2011&numeroResultat=1&clickLink=detall&tipusCerca=cerca.normes
 */

var ca_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menys d'un segon",
    eleven: "menys d'onze segons",
    other: 'menys de {{count}} segons'
  },
  xSeconds: {
    one: '1 segon',
    other: '{{count}} segons'
  },
  halfAMinute: 'mig minut',
  lessThanXMinutes: {
    one: "menys d'un minut",
    eleven: "menys d'onze minuts",
    other: 'menys de {{count}} minuts'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minuts'
  },
  aboutXHours: {
    one: 'aproximadament una hora',
    other: 'aproximadament {{count}} hores'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} hores'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dies'
  },
  aboutXWeeks: {
    one: 'aproximadament una setmana',
    other: 'aproximadament {{count}} setmanes'
  },
  xWeeks: {
    one: '1 setmana',
    other: '{{count}} setmanes'
  },
  aboutXMonths: {
    one: 'aproximadament un mes',
    other: 'aproximadament {{count}} mesos'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} mesos'
  },
  aboutXYears: {
    one: 'aproximadament un any',
    other: 'aproximadament {{count}} anys'
  },
  xYears: {
    one: '1 any',
    other: '{{count}} anys'
  },
  overXYears: {
    one: "m√©s d'un any",
    eleven: "m√©s d'onze anys",
    other: 'm√©s de {{count}} anys'
  },
  almostXYears: {
    one: 'gaireb√© un any',
    other: 'gaireb√© {{count}} anys'
  }
};
var ca_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ca_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 11 && tokenValue.eleven) {
    result = tokenValue.eleven;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'fa ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ca_lib_formatDistance = (ca_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/formatLong/index.js

var ca_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var ca_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var ca_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'a les' {{time}}",
  long: "{{date}} 'a les' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ca_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ca_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ca_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ca_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ca_lib_formatLong = (ca_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/formatRelative/index.js
var ca_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'el' eeee 'passat a la' LT",
  yesterday: "'ahir a la' p",
  today: "'avui a la' p",
  tomorrow: "'dem√† a la' p",
  nextWeek: "eeee 'a la' p",
  other: 'P'
};
var formatRelativeLocalePlural = {
  lastWeek: "'el' eeee 'passat a les' p",
  yesterday: "'ahir a les' p",
  today: "'avui a les' p",
  tomorrow: "'dem√† a les' p",
  nextWeek: "eeee 'a les' p",
  other: 'P'
};
var ca_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural[token];
  }
  return ca_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ca_lib_formatRelative = (ca_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/localize/index.js

/**
 * General information
 * Reference: https://aplicacions.llengua.gencat.cat
 * Reference: https://www.uoc.edu/portal/ca/servei-linguistic/convencions/abreviacions/simbols/simbols-habituals.html
 */
/**
 * Abans de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abans+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6876&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6876&titol=abans%20de%20Crist%20(abreviatura)%20/%20abans%20de%20Crist%20(sigla)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 * Desprest de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=despr%E9s+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6879&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6879&titol=despr%E9s%20de%20Crist%20(sigla)%20/%20despr%E9s%20de%20Crist%20(abreviatura)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 */
var ca_lib_localize_eraValues = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a. de C.', 'd. de C.'],
  wide: ['abans de Crist', 'despr√©s de Crist']
};
var ca_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1r trimestre', '2n trimestre', '3r trimestre', '4t trimestre']
};

/**
 * Dins d'un text conv√© fer servir la forma sencera dels mesos, ja que sempre √©s m√©s clar el mot sencer que l'abreviatura, encara que aquesta sigui for√ßa coneguda.
 * Cal reservar, doncs, les abreviatures per a les llistes o classificacions, els gr√†fics, les taules o quadres estad√≠stics, els textos publicitaris, etc.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviacions+mesos&action=Principal&method=detall_completa&numPagina=1&idHit=8402&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8402&titol=abreviatures%20dels%20mesos%20de%20l%27any&numeroResultat=5&clickLink=detall&tipusCerca=cerca.fitxes
 */
var ca_lib_localize_monthValues = {
  narrow: ['GN', 'FB', 'M√á', 'AB', 'MG', 'JN', 'JL', 'AG', 'ST', 'OC', 'NV', 'DS'],
  /**
   * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formaci√≥ d'abreviatures.
   * S'escriu la primera s√≠l¬∑laba i les consonants de la s√≠l¬∑laba seg√ºent anteriors a la primera vocal.
   * Els mesos de mar√ß, maig i juny no s'abreugen perqu√® s√≥n paraules d'una sola s√≠l¬∑laba.
   */
  abbreviated: ['gen.', 'febr.', 'mar√ß', 'abr.', 'maig', 'juny', 'jul.', 'ag.', 'set.', 'oct.', 'nov.', 'des.'],
  wide: ['gener', 'febrer', 'mar√ß', 'abril', 'maig', 'juny', 'juliol', 'agost', 'setembre', 'octubre', 'novembre', 'desembre']
};

/**
 * Les abreviatures dels dies de la setmana comencen totes amb la lletra d.
 * Tot seguit porten la consonant seg√ºent a la i, excepte en el cas de dimarts, dimecres i diumenge, en qu√® aquesta consonant √©s la m i, per tant, hi podria haver confusi√≥.
 * Per evitar-ho, s'ha substitu√Øt la m per una t (en el cas de dimarts), una c (en el cas de dimecres) i una g (en el cas de diumenge), respectivament.
 *
 * Seguint la norma general d'√∫s de les abreviatures, les dels dies de la setmana sempre porten punt final.
 * Igualment, van amb la primera lletra en maj√∫scula quan la paraula sencera tamb√© hi aniria.
 * En canvi, van amb la primera lletra en min√∫scula quan la inicial de la paraula sencera tamb√© hi aniria.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviatures+dies&action=Principal&method=detall_completa&numPagina=1&idHit=8387&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8387&titol=abreviatures%20dels%20dies%20de%20la%20setmana&numeroResultat=1&clickLink=detall&tipusCerca=cerca.tot
 */
var ca_lib_localize_dayValues = {
  narrow: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
  short: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
  abbreviated: ['dg.', 'dl.', 'dt.', 'dm.', 'dj.', 'dv.', 'ds.'],
  wide: ['diumenge', 'dilluns', 'dimarts', 'dimecres', 'dijous', 'divendres', 'dissabte']
};

/**
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?action=Principal&method=detall&input_cercar=parts+del+dia&numPagina=1&database=FITXES_PUB&idFont=12801&idHit=12801&tipusFont=Fitxes+de+l%27Optimot&numeroResultat=1&databases_avansada=&categories_avansada=&clickLink=detall&titol=Nom+de+les+parts+del+dia&tematica=&tipusCerca=cerca.fitxes
 */
var ca_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'mitjanit',
    noon: 'migdia',
    morning: 'mat√≠',
    afternoon: 'tarda',
    evening: 'vespre',
    night: 'nit'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'mitjanit',
    noon: 'migdia',
    morning: 'mat√≠',
    afternoon: 'tarda',
    evening: 'vespre',
    night: 'nit'
  },
  wide: {
    am: 'ante meridiem',
    pm: 'post meridiem',
    midnight: 'mitjanit',
    noon: 'migdia',
    morning: 'mat√≠',
    afternoon: 'tarda',
    evening: 'vespre',
    night: 'nit'
  }
};
var ca_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'de la mitjanit',
    noon: 'del migdia',
    morning: 'del mat√≠',
    afternoon: 'de la tarda',
    evening: 'del vespre',
    night: 'de la nit'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'de la mitjanit',
    noon: 'del migdia',
    morning: 'del mat√≠',
    afternoon: 'de la tarda',
    evening: 'del vespre',
    night: 'de la nit'
  },
  wide: {
    am: 'ante meridiem',
    pm: 'post meridiem',
    midnight: 'de la mitjanit',
    noon: 'del migdia',
    morning: 'del mat√≠',
    afternoon: 'de la tarda',
    evening: 'del vespre',
    night: 'de la nit'
  }
};

/**
 * Quan van en singular, els nombres ordinals es representen, en forma d‚Äôabreviatura, amb la xifra seguida de l‚Äô√∫ltima lletra del mot desplegat.
 * √âs optatiu posar punt despr√©s de la lletra.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/pdf/abrevia.pdf#page=18
 */
var ca_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'r';
      case 2:
        return number + 'n';
      case 3:
        return number + 'r';
      case 4:
        return number + 't';
    }
  }
  return number + '√®';
};
var ca_lib_localize_localize = {
  ordinalNumber: ca_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ca_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ca_lib_localize = (ca_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/match/index.js


var ca_lib_match_matchOrdinalNumberPattern = /^(\d+)(√®|r|n|r|t)?/i;
var ca_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ca_lib_match_matchEraPatterns = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a. de C.|d. de C.)/i,
  wide: /^(abans de Crist|despr[e√©]s de Crist)/i
};
var ca_lib_match_parseEraPatterns = {
  narrow: [/^aC/i, /^dC/i],
  abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
  wide: [/^(abans de Crist)/i, /^(despr[e√©]s de Crist)/i]
};
var ca_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](√®|r|n|r|t)? trimestre/i
};
var ca_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ca_lib_match_matchMonthPatterns = {
  narrow: /^(GN|FB|M√á|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
  abbreviated: /^(gen.|febr.|mar√ß|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
  wide: /^(gener|febrer|mar√ß|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
};
var ca_lib_match_parseMonthPatterns = {
  narrow: [/^GN/i, /^FB/i, /^M√á/i, /^AB/i, /^MG/i, /^JN/i, /^JL/i, /^AG/i, /^ST/i, /^OC/i, /^NV/i, /^DS/i],
  abbreviated: [/^gen./i, /^febr./i, /^mar√ß/i, /^abr./i, /^maig/i, /^juny/i, /^jul./i, /^ag./i, /^set./i, /^oct./i, /^nov./i, /^des./i],
  wide: [/^gener/i, /^febrer/i, /^mar√ß/i, /^abril/i, /^maig/i, /^juny/i, /^juliol/i, /^agost/i, /^setembre/i, /^octubre/i, /^novembre/i, /^desembre/i]
};
var ca_lib_match_matchDayPatterns = {
  narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
};
var ca_lib_match_parseDayPatterns = {
  narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
  abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
  wide: [/^diumenge/i, /^dilluns/i, /^dimarts/i, /^dimecres/i, /^dijous/i, /^divendres/i, /^disssabte/i]
};
var ca_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(del|de la) (mat√≠|tarda|vespre|nit))/i,
  abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (mat√≠|tarda|vespre|nit))/i,
  wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (mat√≠|tarda|vespre|nit))/i
};
var ca_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mitjanit/i,
    noon: /^migdia/i,
    morning: /mat√≠/i,
    afternoon: /tarda/i,
    evening: /vespre/i,
    night: /nit/i
  }
};
var ca_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ca_lib_match_matchOrdinalNumberPattern,
    parsePattern: ca_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ca_lib_match_parseEraPatterns,
    defaultParseWidth: 'wide'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ca_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ca_lib_match_parseMonthPatterns,
    defaultParseWidth: 'wide'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ca_lib_match_parseDayPatterns,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ca_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ca_lib_match = (ca_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Catalan locale.
 * @language Catalan
 * @iso-639-2 cat
 * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
 * @author Alex Vizcaino [@avizcaino]{@link https://github.com/avizcaino}
 */
var ca_locale = {
  code: 'ca',
  formatDistance: ca_lib_formatDistance,
  formatLong: ca_lib_formatLong,
  formatRelative: ca_lib_formatRelative,
  localize: ca_lib_localize,
  match: ca_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const ca = (ca_locale);

// throw new Error('ca locale is currently unavailable. Please check the progress of converting this locale to v2.0.0 in this issue on Github: TBA')
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/formatDistance/index.js
var cs_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      regular: 'm√©nƒõ ne≈æ sekunda',
      past: 'p≈ôed m√©nƒõ ne≈æ sekundou',
      future: 'za m√©nƒõ ne≈æ sekundu'
    },
    few: {
      regular: 'm√©nƒõ ne≈æ {{count}} sekundy',
      past: 'p≈ôed m√©nƒõ ne≈æ {{count}} sekundami',
      future: 'za m√©nƒõ ne≈æ {{count}} sekundy'
    },
    many: {
      regular: 'm√©nƒõ ne≈æ {{count}} sekund',
      past: 'p≈ôed m√©nƒõ ne≈æ {{count}} sekundami',
      future: 'za m√©nƒõ ne≈æ {{count}} sekund'
    }
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'p≈ôed sekundou',
      future: 'za sekundu'
    },
    few: {
      regular: '{{count}} sekundy',
      past: 'p≈ôed {{count}} sekundami',
      future: 'za {{count}} sekundy'
    },
    many: {
      regular: '{{count}} sekund',
      past: 'p≈ôed {{count}} sekundami',
      future: 'za {{count}} sekund'
    }
  },
  halfAMinute: {
    type: 'other',
    other: {
      regular: 'p≈Øl minuty',
      past: 'p≈ôed p≈Øl minutou',
      future: 'za p≈Øl minuty'
    }
  },
  lessThanXMinutes: {
    one: {
      regular: 'm√©nƒõ ne≈æ minuta',
      past: 'p≈ôed m√©nƒõ ne≈æ minutou',
      future: 'za m√©nƒõ ne≈æ minutu'
    },
    few: {
      regular: 'm√©nƒõ ne≈æ {{count}} minuty',
      past: 'p≈ôed m√©nƒõ ne≈æ {{count}} minutami',
      future: 'za m√©nƒõ ne≈æ {{count}} minuty'
    },
    many: {
      regular: 'm√©nƒõ ne≈æ {{count}} minut',
      past: 'p≈ôed m√©nƒõ ne≈æ {{count}} minutami',
      future: 'za m√©nƒõ ne≈æ {{count}} minut'
    }
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'p≈ôed minutou',
      future: 'za minutu'
    },
    few: {
      regular: '{{count}} minuty',
      past: 'p≈ôed {{count}} minutami',
      future: 'za {{count}} minuty'
    },
    many: {
      regular: '{{count}} minut',
      past: 'p≈ôed {{count}} minutami',
      future: 'za {{count}} minut'
    }
  },
  aboutXHours: {
    one: {
      regular: 'p≈ôibli≈ænƒõ hodina',
      past: 'p≈ôibli≈ænƒõ p≈ôed hodinou',
      future: 'p≈ôibli≈ænƒõ za hodinu'
    },
    few: {
      regular: 'p≈ôibli≈ænƒõ {{count}} hodiny',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} hodinami',
      future: 'p≈ôibli≈ænƒõ za {{count}} hodiny'
    },
    many: {
      regular: 'p≈ôibli≈ænƒõ {{count}} hodin',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} hodinami',
      future: 'p≈ôibli≈ænƒõ za {{count}} hodin'
    }
  },
  xHours: {
    one: {
      regular: 'hodina',
      past: 'p≈ôed hodinou',
      future: 'za hodinu'
    },
    few: {
      regular: '{{count}} hodiny',
      past: 'p≈ôed {{count}} hodinami',
      future: 'za {{count}} hodiny'
    },
    many: {
      regular: '{{count}} hodin',
      past: 'p≈ôed {{count}} hodinami',
      future: 'za {{count}} hodin'
    }
  },
  xDays: {
    one: {
      regular: 'den',
      past: 'p≈ôed dnem',
      future: 'za den'
    },
    few: {
      regular: '{{count}} dny',
      past: 'p≈ôed {{count}} dny',
      future: 'za {{count}} dny'
    },
    many: {
      regular: '{{count}} dn√≠',
      past: 'p≈ôed {{count}} dny',
      future: 'za {{count}} dn√≠'
    }
  },
  aboutXWeeks: {
    one: {
      regular: 'p≈ôibli≈ænƒõ t√Ωden',
      past: 'p≈ôibli≈ænƒõ p≈ôed t√Ωdnem',
      future: 'p≈ôibli≈ænƒõ za t√Ωden'
    },
    few: {
      regular: 'p≈ôibli≈ænƒõ {{count}} t√Ωdny',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} t√Ωdny',
      future: 'p≈ôibli≈ænƒõ za {{count}} t√Ωdny'
    },
    many: {
      regular: 'p≈ôibli≈ænƒõ {{count}} t√Ωdn≈Ø',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} t√Ωdny',
      future: 'p≈ôibli≈ænƒõ za {{count}} t√Ωdn≈Ø'
    }
  },
  xWeeks: {
    one: {
      regular: 't√Ωden',
      past: 'p≈ôed t√Ωdnem',
      future: 'za t√Ωden'
    },
    few: {
      regular: '{{count}} t√Ωdny',
      past: 'p≈ôed {{count}} t√Ωdny',
      future: 'za {{count}} t√Ωdny'
    },
    many: {
      regular: '{{count}} t√Ωdn≈Ø',
      past: 'p≈ôed {{count}} t√Ωdny',
      future: 'za {{count}} t√Ωdn≈Ø'
    }
  },
  aboutXMonths: {
    one: {
      regular: 'p≈ôibli≈ænƒõ mƒõs√≠c',
      past: 'p≈ôibli≈ænƒõ p≈ôed mƒõs√≠cem',
      future: 'p≈ôibli≈ænƒõ za mƒõs√≠c'
    },
    few: {
      regular: 'p≈ôibli≈ænƒõ {{count}} mƒõs√≠ce',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} mƒõs√≠ci',
      future: 'p≈ôibli≈ænƒõ za {{count}} mƒõs√≠ce'
    },
    many: {
      regular: 'p≈ôibli≈ænƒõ {{count}} mƒõs√≠c≈Ø',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} mƒõs√≠ci',
      future: 'p≈ôibli≈ænƒõ za {{count}} mƒõs√≠c≈Ø'
    }
  },
  xMonths: {
    one: {
      regular: 'mƒõs√≠c',
      past: 'p≈ôed mƒõs√≠cem',
      future: 'za mƒõs√≠c'
    },
    few: {
      regular: '{{count}} mƒõs√≠ce',
      past: 'p≈ôed {{count}} mƒõs√≠ci',
      future: 'za {{count}} mƒõs√≠ce'
    },
    many: {
      regular: '{{count}} mƒõs√≠c≈Ø',
      past: 'p≈ôed {{count}} mƒõs√≠ci',
      future: 'za {{count}} mƒõs√≠c≈Ø'
    }
  },
  aboutXYears: {
    one: {
      regular: 'p≈ôibli≈ænƒõ rok',
      past: 'p≈ôibli≈ænƒõ p≈ôed rokem',
      future: 'p≈ôibli≈ænƒõ za rok'
    },
    few: {
      regular: 'p≈ôibli≈ænƒõ {{count}} roky',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} roky',
      future: 'p≈ôibli≈ænƒõ za {{count}} roky'
    },
    many: {
      regular: 'p≈ôibli≈ænƒõ {{count}} rok≈Ø',
      past: 'p≈ôibli≈ænƒõ p≈ôed {{count}} roky',
      future: 'p≈ôibli≈ænƒõ za {{count}} rok≈Ø'
    }
  },
  xYears: {
    one: {
      regular: 'rok',
      past: 'p≈ôed rokem',
      future: 'za rok'
    },
    few: {
      regular: '{{count}} roky',
      past: 'p≈ôed {{count}} roky',
      future: 'za {{count}} roky'
    },
    many: {
      regular: '{{count}} rok≈Ø',
      past: 'p≈ôed {{count}} roky',
      future: 'za {{count}} rok≈Ø'
    }
  },
  overXYears: {
    one: {
      regular: 'v√≠ce ne≈æ rok',
      past: 'p≈ôed v√≠ce ne≈æ rokem',
      future: 'za v√≠ce ne≈æ rok'
    },
    few: {
      regular: 'v√≠ce ne≈æ {{count}} roky',
      past: 'p≈ôed v√≠ce ne≈æ {{count}} roky',
      future: 'za v√≠ce ne≈æ {{count}} roky'
    },
    many: {
      regular: 'v√≠ce ne≈æ {{count}} rok≈Ø',
      past: 'p≈ôed v√≠ce ne≈æ {{count}} roky',
      future: 'za v√≠ce ne≈æ {{count}} rok≈Ø'
    }
  },
  almostXYears: {
    one: {
      regular: 'skoro rok',
      past: 'skoro p≈ôed rokem',
      future: 'skoro za rok'
    },
    few: {
      regular: 'skoro {{count}} roky',
      past: 'skoro p≈ôed {{count}} roky',
      future: 'skoro za {{count}} roky'
    },
    many: {
      regular: 'skoro {{count}} rok≈Ø',
      past: 'skoro p≈ôed {{count}} roky',
      future: 'skoro za {{count}} rok≈Ø'
    }
  }
};
var cs_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var pluralResult;
  var tokenValue = cs_lib_formatDistance_formatDistanceLocale[token];

  // cs pluralization
  if (tokenValue.type === 'other') {
    pluralResult = tokenValue.other;
  } else if (count === 1) {
    pluralResult = tokenValue.one;
  } else if (count > 1 && count < 5) {
    pluralResult = tokenValue.few;
  } else {
    pluralResult = tokenValue.many;
  }

  // times
  var suffixExist = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var comparison = options === null || options === void 0 ? void 0 : options.comparison;
  var timeResult;
  if (suffixExist && comparison === -1) {
    timeResult = pluralResult.past;
  } else if (suffixExist && comparison === 1) {
    timeResult = pluralResult.future;
  } else {
    timeResult = pluralResult.regular;
  }
  return timeResult.replace('{{count}}', String(count));
};
/* harmony default export */ const cs_lib_formatDistance = (cs_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/formatLong/index.js

var cs_lib_formatLong_dateFormats = {
  full: 'EEEE, d. MMMM yyyy',
  long: 'd. MMMM yyyy',
  medium: 'd. M. yyyy',
  short: 'dd.MM.yyyy'
};
var cs_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var cs_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'v' {{time}}",
  long: "{{date}} 'v' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var cs_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: cs_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: cs_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: cs_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const cs_lib_formatLong = (cs_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/formatRelative/index.js
var _lib_formatRelative_accusativeWeekdays = ['nedƒõli', 'pondƒõl√≠', '√∫ter√Ω', 'st≈ôedu', 'ƒçtvrtek', 'p√°tek', 'sobotu'];
var cs_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'posledn√≠' eeee 've' p",
  yesterday: "'vƒçera v' p",
  today: "'dnes v' p",
  tomorrow: "'z√≠tra v' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    return "'v " + _lib_formatRelative_accusativeWeekdays[day] + " o' p";
  },
  other: 'P'
};
var cs_lib_formatRelative_formatRelative = function formatRelative(token, date) {
  var format = cs_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const cs_lib_formatRelative = (cs_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/localize/index.js

var cs_lib_localize_eraValues = {
  narrow: ['p≈ô. n. l.', 'n. l.'],
  abbreviated: ['p≈ô. n. l.', 'n. l.'],
  wide: ['p≈ôed na≈°√≠m letopoƒçtem', 'na≈°eho letopoƒçtu']
};
var cs_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. ƒçtvrtlet√≠', '2. ƒçtvrtlet√≠', '3. ƒçtvrtlet√≠', '4. ƒçtvrtlet√≠'],
  wide: ['1. ƒçtvrtlet√≠', '2. ƒçtvrtlet√≠', '3. ƒçtvrtlet√≠', '4. ƒçtvrtlet√≠']
};
var cs_lib_localize_monthValues = {
  narrow: ['L', '√ö', 'B', 'D', 'K', 'ƒå', 'ƒå', 'S', 'Z', '≈ò', 'L', 'P'],
  abbreviated: ['led', '√∫no', 'b≈ôe', 'dub', 'kvƒõ', 'ƒçvn', 'ƒçvc', 'srp', 'z√°≈ô', '≈ô√≠j', 'lis', 'pro'],
  wide: ['leden', '√∫nor', 'b≈ôezen', 'duben', 'kvƒõten', 'ƒçerven', 'ƒçervenec', 'srpen', 'z√°≈ô√≠', '≈ô√≠jen', 'listopad', 'prosinec']
};
var cs_lib_localize_formattingMonthValues = {
  narrow: ['L', '√ö', 'B', 'D', 'K', 'ƒå', 'ƒå', 'S', 'Z', '≈ò', 'L', 'P'],
  abbreviated: ['led', '√∫no', 'b≈ôe', 'dub', 'kvƒõ', 'ƒçvn', 'ƒçvc', 'srp', 'z√°≈ô', '≈ô√≠j', 'lis', 'pro'],
  wide: ['ledna', '√∫nora', 'b≈ôezna', 'dubna', 'kvƒõtna', 'ƒçervna', 'ƒçervence', 'srpna', 'z√°≈ô√≠', '≈ô√≠jna', 'listopadu', 'prosince']
};
var cs_lib_localize_dayValues = {
  narrow: ['ne', 'po', '√∫t', 'st', 'ƒçt', 'p√°', 'so'],
  short: ['ne', 'po', '√∫t', 'st', 'ƒçt', 'p√°', 'so'],
  abbreviated: ['ned', 'pon', '√∫te', 'st≈ô', 'ƒçtv', 'p√°t', 'sob'],
  wide: ['nedƒõle', 'pondƒõl√≠', '√∫ter√Ω', 'st≈ôeda', 'ƒçtvrtek', 'p√°tek', 'sobota']
};
var cs_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'p≈Ølnoc',
    noon: 'poledne',
    morning: 'r√°no',
    afternoon: 'odpoledne',
    evening: 'veƒçer',
    night: 'noc'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'p≈Ølnoc',
    noon: 'poledne',
    morning: 'r√°no',
    afternoon: 'odpoledne',
    evening: 'veƒçer',
    night: 'noc'
  },
  wide: {
    am: 'dopoledne',
    pm: 'odpoledne',
    midnight: 'p≈Ølnoc',
    noon: 'poledne',
    morning: 'r√°no',
    afternoon: 'odpoledne',
    evening: 'veƒçer',
    night: 'noc'
  }
};
var cs_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'p≈Ølnoc',
    noon: 'poledne',
    morning: 'r√°no',
    afternoon: 'odpoledne',
    evening: 'veƒçer',
    night: 'noc'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'p≈Ølnoc',
    noon: 'poledne',
    morning: 'r√°no',
    afternoon: 'odpoledne',
    evening: 'veƒçer',
    night: 'noc'
  },
  wide: {
    am: 'dopoledne',
    pm: 'odpoledne',
    midnight: 'p≈Ølnoc',
    noon: 'poledne',
    morning: 'r√°no',
    afternoon: 'odpoledne',
    evening: 'veƒçer',
    night: 'noc'
  }
};
var cs_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var cs_lib_localize_localize = {
  ordinalNumber: cs_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: cs_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: cs_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const cs_lib_localize = (cs_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/match/index.js


var cs_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var cs_lib_match_parseOrdinalNumberPattern = /\d+/i;
var cs_lib_match_matchEraPatterns = {
  narrow: /^(p[≈ôr](\.|ed) Kr\.|p[≈ôr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(p[≈ôr](\.|ed) Kr\.|p[≈ôr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(p[≈ôr](\.|ed) Kristem|p[≈ôr](\.|ed) na[≈°s][√≠i]m letopo[ƒçc]tem|po Kristu|na[≈°s]eho letopo[ƒçc]tu)/i
};
var cs_lib_match_parseEraPatterns = {
  any: [/^p[≈ôr]/i, /^(po|n)/i]
};
var cs_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\. [ƒçc]tvrtlet[√≠i]/i,
  wide: /^[1234]\. [ƒçc]tvrtlet[√≠i]/i
};
var cs_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var cs_lib_match_matchMonthPatterns = {
  narrow: /^[l√∫ubdkƒçcsz≈ôrlp]/i,
  abbreviated: /^(led|[√∫u]no|b[≈ôr]e|dub|kv[ƒõe]|[ƒçc]vn|[ƒçc]vc|srp|z[√°a][≈ôr]|[≈ôr][√≠i]j|lis|pro)/i,
  wide: /^(leden|ledna|[√∫u]nora?|b[≈ôr]ezen|b[≈ôr]ezna|duben|dubna|kv[ƒõe]ten|kv[ƒõe]tna|[ƒçc]erven(ec|ce)?|[ƒçc]ervna|srpen|srpna|z[√°a][≈ôr][√≠i]|[≈ôr][√≠i]jen|[≈ôr][√≠i]jna|listopad(a|u)?|prosinec|prosince)/i
};
var cs_lib_match_parseMonthPatterns = {
  narrow: [/^l/i, /^[√∫u]/i, /^b/i, /^d/i, /^k/i, /^[ƒçc]/i, /^[ƒçc]/i, /^s/i, /^z/i, /^[≈ôr]/i, /^l/i, /^p/i],
  any: [/^led/i, /^[√∫u]n/i, /^b[≈ôr]e/i, /^dub/i, /^kv[ƒõe]/i, /^[ƒçc]vn|[ƒçc]erven(?!\w)|[ƒçc]ervna/i, /^[ƒçc]vc|[ƒçc]erven(ec|ce)/i, /^srp/i, /^z[√°a][≈ôr]/i, /^[≈ôr][√≠i]j/i, /^lis/i, /^pro/i]
};
var cs_lib_match_matchDayPatterns = {
  narrow: /^[npu√∫sƒçps]/i,
  short: /^(ne|po|[√∫u]t|st|[ƒçc]t|p[√°a]|so)/i,
  abbreviated: /^(ned|pon|[√∫u]te|st[r≈ô]|[ƒçc]tv|p[√°a]t|sob)/i,
  wide: /^(ned[ƒõe]le|pond[ƒõe]l[√≠i]|[√∫u]ter[√Ωy]|st[≈ôr]eda|[ƒçc]tvrtek|p[√°a]tek|sobota)/i
};
var cs_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^[√∫u]/i, /^s/i, /^[ƒçc]/i, /^p/i, /^s/i],
  any: [/^ne/i, /^po/i, /^[√∫u]t/i, /^st/i, /^[ƒçc]t/i, /^p[√°a]/i, /^so/i]
};
var cs_lib_match_matchDayPeriodPatterns = {
  any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[≈Øu]lnoc|poledne|r[√°a]no|odpoledne|ve[ƒçc]er|(v )?noci?/i
};
var cs_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^dop/i,
    pm: /^odp/i,
    midnight: /^p[≈Øu]lnoc/i,
    noon: /^poledne/i,
    morning: /r[√°a]no/i,
    afternoon: /odpoledne/i,
    evening: /ve[ƒçc]er/i,
    night: /noc/i
  }
};
var cs_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: cs_lib_match_matchOrdinalNumberPattern,
    parsePattern: cs_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cs_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cs_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cs_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cs_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: cs_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const cs_lib_match = (cs_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Czech locale.
 * @language Czech
 * @iso-639-2 ces
 * @author David Rus [@davidrus]{@link https://github.com/davidrus}
 * @author Pavel Hr√°ch [@SilenY]{@link https://github.com/SilenY}
 * @author Jozef B√≠ro≈° [@JozefBiros]{@link https://github.com/JozefBiros}
 */
var cs_locale = {
  code: 'cs',
  formatDistance: cs_lib_formatDistance,
  formatLong: cs_lib_formatLong,
  formatRelative: cs_lib_formatRelative,
  localize: cs_lib_localize,
  match: cs_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const cs = (cs_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/formatDistance/index.js
var cy_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'llai na eiliad',
    other: 'llai na {{count}} eiliad'
  },
  xSeconds: {
    one: '1 eiliad',
    other: '{{count}} eiliad'
  },
  halfAMinute: 'hanner munud',
  lessThanXMinutes: {
    one: 'llai na munud',
    two: 'llai na 2 funud',
    other: 'llai na {{count}} munud'
  },
  xMinutes: {
    one: '1 munud',
    two: '2 funud',
    other: '{{count}} munud'
  },
  aboutXHours: {
    one: 'tua 1 awr',
    other: 'tua {{count}} awr'
  },
  xHours: {
    one: '1 awr',
    other: '{{count}} awr'
  },
  xDays: {
    one: '1 diwrnod',
    two: '2 ddiwrnod',
    other: '{{count}} diwrnod'
  },
  aboutXWeeks: {
    one: 'tua 1 wythnos',
    two: 'tua pythefnos',
    other: 'tua {{count}} wythnos'
  },
  xWeeks: {
    one: '1 wythnos',
    two: 'pythefnos',
    other: '{{count}} wythnos'
  },
  aboutXMonths: {
    one: 'tua 1 mis',
    two: 'tua 2 fis',
    other: 'tua {{count}} mis'
  },
  xMonths: {
    one: '1 mis',
    two: '2 fis',
    other: '{{count}} mis'
  },
  aboutXYears: {
    one: 'tua 1 flwyddyn',
    two: 'tua 2 flynedd',
    other: 'tua {{count}} mlynedd'
  },
  xYears: {
    one: '1 flwyddyn',
    two: '2 flynedd',
    other: '{{count}} mlynedd'
  },
  overXYears: {
    one: 'dros 1 flwyddyn',
    two: 'dros 2 flynedd',
    other: 'dros {{count}} mlynedd'
  },
  almostXYears: {
    one: 'bron 1 flwyddyn',
    two: 'bron 2 flynedd',
    other: 'bron {{count}} mlynedd'
  }
};
var cy_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = cy_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'mewn ' + result;
    } else {
      return result + ' yn √¥l';
    }
  }
  return result;
};
/* harmony default export */ const cy_lib_formatDistance = (cy_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/formatLong/index.js

var cy_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var cy_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var cy_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'am' {{time}}",
  long: "{{date}} 'am' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var cy_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: cy_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: cy_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: cy_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const cy_lib_formatLong = (cy_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/formatRelative/index.js
var cy_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'diwethaf am' p",
  yesterday: "'ddoe am' p",
  today: "'heddiw am' p",
  tomorrow: "'yfory am' p",
  nextWeek: "eeee 'am' p",
  other: 'P'
};
var cy_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return cy_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const cy_lib_formatRelative = (cy_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/localize/index.js

var cy_lib_localize_eraValues = {
  narrow: ['C', 'O'],
  abbreviated: ['CC', 'OC'],
  wide: ['Cyn Crist', 'Ar √¥l Crist']
};
var cy_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Ch1', 'Ch2', 'Ch3', 'Ch4'],
  wide: ['Chwarter 1af', '2ail chwarter', '3ydd chwarter', '4ydd chwarter']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var cy_lib_localize_monthValues = {
  narrow: ['I', 'Ch', 'Ma', 'E', 'Mi', 'Me', 'G', 'A', 'Md', 'H', 'T', 'Rh'],
  abbreviated: ['Ion', 'Chwe', 'Maw', 'Ebr', 'Mai', 'Meh', 'Gor', 'Aws', 'Med', 'Hyd', 'Tach', 'Rhag'],
  wide: ['Ionawr', 'Chwefror', 'Mawrth', 'Ebrill', 'Mai', 'Mehefin', 'Gorffennaf', 'Awst', 'Medi', 'Hydref', 'Tachwedd', 'Rhagfyr']
};
var cy_lib_localize_dayValues = {
  narrow: ['S', 'Ll', 'M', 'M', 'I', 'G', 'S'],
  short: ['Su', 'Ll', 'Ma', 'Me', 'Ia', 'Gw', 'Sa'],
  abbreviated: ['Sul', 'Llun', 'Maw', 'Mer', 'Iau', 'Gwe', 'Sad'],
  wide: ['dydd Sul', 'dydd Llun', 'dydd Mawrth', 'dydd Mercher', 'dydd Iau', 'dydd Gwener', 'dydd Sadwrn']
};
var cy_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'b',
    pm: 'h',
    midnight: 'hn',
    noon: 'hd',
    morning: 'bore',
    afternoon: 'prynhawn',
    evening: "gyda'r nos",
    night: 'nos'
  },
  abbreviated: {
    am: 'yb',
    pm: 'yh',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'bore',
    afternoon: 'prynhawn',
    evening: "gyda'r nos",
    night: 'nos'
  },
  wide: {
    am: 'y.b.',
    pm: 'y.h.',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'bore',
    afternoon: 'prynhawn',
    evening: "gyda'r nos",
    night: 'nos'
  }
};
var cy_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'b',
    pm: 'h',
    midnight: 'hn',
    noon: 'hd',
    morning: 'yn y bore',
    afternoon: 'yn y prynhawn',
    evening: "gyda'r nos",
    night: 'yn y nos'
  },
  abbreviated: {
    am: 'yb',
    pm: 'yh',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'yn y bore',
    afternoon: 'yn y prynhawn',
    evening: "gyda'r nos",
    night: 'yn y nos'
  },
  wide: {
    am: 'y.b.',
    pm: 'y.h.',
    midnight: 'hanner nos',
    noon: 'hanner dydd',
    morning: 'yn y bore',
    afternoon: 'yn y prynhawn',
    evening: "gyda'r nos",
    night: 'yn y nos'
  }
};
var cy_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number < 20) {
    switch (number) {
      case 0:
        return number + 'fed';
      case 1:
        return number + 'af';
      case 2:
        return number + 'ail';
      case 3:
      case 4:
        return number + 'ydd';
      case 5:
      case 6:
        return number + 'ed';
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 15:
      case 18:
        return number + 'fed';
      case 11:
      case 13:
      case 14:
      case 16:
      case 17:
      case 19:
        return number + 'eg';
    }
  } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
    return number + 'fed';
  }
  return number + 'ain';
};
var cy_lib_localize_localize = {
  ordinalNumber: cy_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: cy_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const cy_lib_localize = (cy_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/match/index.js


var cy_lib_match_matchOrdinalNumberPattern = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
var cy_lib_match_parseOrdinalNumberPattern = /\d+/i;
var cy_lib_match_matchEraPatterns = {
  narrow: /^(c|o)/i,
  abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
  wide: /^(cyn christ|ar √¥l crist|ar ol crist)/i
};
var cy_lib_match_parseEraPatterns = {
  wide: [/^c/i, /^(ar √¥l crist|ar ol crist)/i],
  any: [/^c/i, /^o/i]
};
var cy_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ch[1234]/i,
  wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
};
var cy_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var cy_lib_match_matchMonthPatterns = {
  narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
  abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
  wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
};
var cy_lib_match_parseMonthPatterns = {
  narrow: [/^i/i, /^ch/i, /^m/i, /^e/i, /^m/i, /^m/i, /^g/i, /^a/i, /^m/i, /^h/i, /^t/i, /^rh/i],
  any: [/^io/i, /^ch/i, /^maw/i, /^e/i, /^mai/i, /^meh/i, /^g/i, /^a/i, /^med/i, /^h/i, /^t/i, /^rh/i]
};
var cy_lib_match_matchDayPatterns = {
  narrow: /^(s|ll|m|i|g)/i,
  short: /^(su|ll|ma|me|ia|gw|sa)/i,
  abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
  wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
};
var cy_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
  wide: [/^dydd su/i, /^dydd ll/i, /^dydd ma/i, /^dydd me/i, /^dydd i/i, /^dydd g/i, /^dydd sa/i],
  any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
};
var cy_lib_match_matchDayPeriodPatterns = {
  narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
  any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
};
var cy_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^b|(y\.?\s?b\.?)/i,
    pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
    midnight: /^hn|hanner nos/i,
    noon: /^hd|hanner dydd/i,
    morning: /bore/i,
    afternoon: /prynhawn/i,
    evening: /^gyda'r nos$/i,
    night: /blah/i
  }
};
var cy_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: cy_lib_match_matchOrdinalNumberPattern,
    parsePattern: cy_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cy_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cy_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cy_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: cy_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: cy_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const cy_lib_match = (cy_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Welsh locale.
 * @language Welsh
 * @iso-639-2 cym
 * @author Elwyn Malethan [@elmomalmo]{@link https://github.com/elmomalmo}
 */
var cy_locale = {
  code: 'cy',
  formatDistance: cy_lib_formatDistance,
  formatLong: cy_lib_formatLong,
  formatRelative: cy_lib_formatRelative,
  localize: cy_lib_localize,
  match: cy_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const cy = (cy_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/formatDistance/index.js
var da_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mindre end √©t sekund',
    other: 'mindre end {{count}} sekunder'
  },
  xSeconds: {
    one: '1 sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: '√©t halvt minut',
  lessThanXMinutes: {
    one: 'mindre end √©t minut',
    other: 'mindre end {{count}} minutter'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minutter'
  },
  aboutXHours: {
    one: 'cirka 1 time',
    other: 'cirka {{count}} timer'
  },
  xHours: {
    one: '1 time',
    other: '{{count}} timer'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dage'
  },
  aboutXWeeks: {
    one: 'cirka 1 uge',
    other: 'cirka {{count}} uger'
  },
  xWeeks: {
    one: '1 uge',
    other: '{{count}} uger'
  },
  aboutXMonths: {
    one: 'cirka 1 m√•ned',
    other: 'cirka {{count}} m√•neder'
  },
  xMonths: {
    one: '1 m√•ned',
    other: '{{count}} m√•neder'
  },
  aboutXYears: {
    one: 'cirka 1 √•r',
    other: 'cirka {{count}} √•r'
  },
  xYears: {
    one: '1 √•r',
    other: '{{count}} √•r'
  },
  overXYears: {
    one: 'over 1 √•r',
    other: 'over {{count}} √•r'
  },
  almostXYears: {
    one: 'n√¶sten 1 √•r',
    other: 'n√¶sten {{count}} √•r'
  }
};
var da_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = da_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }
  return result;
};
/* harmony default export */ const da_lib_formatDistance = (da_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/formatLong/index.js

var da_lib_formatLong_dateFormats = {
  full: "EEEE 'den' d. MMMM y",
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd/MM/y'
};
var da_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var da_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl'. {{time}}",
  long: "{{date}} 'kl'. {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var da_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: da_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: da_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: da_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const da_lib_formatLong = (da_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/formatRelative/index.js
var da_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'sidste' eeee 'kl.' p",
  yesterday: "'i g√•r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "'p√•' eeee 'kl.' p",
  other: 'P'
};
var da_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return da_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const da_lib_formatRelative = (da_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/localize/index.js

var da_lib_localize_eraValues = {
  narrow: ['fvt', 'vt'],
  abbreviated: ['f.v.t.', 'v.t.'],
  wide: ['f√∏r vesterlandsk tidsregning', 'vesterlandsk tidsregning']
};
var da_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. kvt.', '2. kvt.', '3. kvt.', '4. kvt.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var da_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januar', 'februar', 'marts', 'april', 'maj', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'december']
};

// Note that 'Days - abbreviated - Formatting' has periods at the end.
// https://www.unicode.org/cldr/charts/32/summary/da.html#1760
// This makes grammatical sense in danish, as most abbreviations have periods.
var da_lib_localize_dayValues = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['s√∏', 'ma', 'ti', 'on', 'to', 'fr', 'l√∏'],
  abbreviated: ['s√∏n.', 'man.', 'tir.', 'ons.', 'tor.', 'fre.', 'l√∏r.'],
  wide: ['s√∏ndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'l√∏rdag']
};
var da_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  }
};
var da_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  }
};
var da_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var da_lib_localize_localize = {
  ordinalNumber: da_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: da_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const da_lib_localize = (da_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/match/index.js


var da_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var da_lib_match_parseOrdinalNumberPattern = /\d+/i;
var da_lib_match_matchEraPatterns = {
  narrow: /^(fKr|fvt|eKr|vt)/i,
  abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
  wide: /^(f.Kr.|f√∏r vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
};
var da_lib_match_parseEraPatterns = {
  any: [/^f/i, /^(v|e)/i]
};
var da_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]. kvt\./i,
  wide: /^[1234]\.? kvartal/i
};
var da_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var da_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
};
var da_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var da_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(s√∏n.|man.|tir.|ons.|tor.|fre.|l√∏r.)/i,
  abbreviated: /^(s√∏n|man|tir|ons|tor|fre|l√∏r)/i,
  wide: /^(s√∏ndag|mandag|tirsdag|onsdag|torsdag|fredag|l√∏rdag)/i
};
var da_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var da_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
  any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
};
var da_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /midnat/i,
    noon: /middag/i,
    morning: /morgen/i,
    afternoon: /eftermiddag/i,
    evening: /aften/i,
    night: /nat/i
  }
};
var da_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: da_lib_match_matchOrdinalNumberPattern,
    parsePattern: da_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: da_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: da_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: da_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: da_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: da_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const da_lib_match = (da_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Danish locale.
 * @language Danish
 * @iso-639-2 dan
 * @author Mathias W√∏bbe [@MathiasKandelborg]{@link https://github.com/MathiasKandelborg}
 * @author Anders B. Hansen [@Andersbiha]{@link https://github.com/Andersbiha}
 * @author [@kgram]{@link https://github.com/kgram}
 * @author [@stefanbugge]{@link https://github.com/stefanbugge}
 */
var da_locale = {
  code: 'da',
  formatDistance: da_lib_formatDistance,
  formatLong: da_lib_formatLong,
  formatRelative: da_lib_formatRelative,
  localize: da_lib_localize,
  match: da_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const da = (da_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/formatDistance/index.js
var de_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: 'weniger als 1 Sekunde',
      other: 'weniger als {{count}} Sekunden'
    },
    withPreposition: {
      one: 'weniger als 1 Sekunde',
      other: 'weniger als {{count}} Sekunden'
    }
  },
  xSeconds: {
    standalone: {
      one: '1 Sekunde',
      other: '{{count}} Sekunden'
    },
    withPreposition: {
      one: '1 Sekunde',
      other: '{{count}} Sekunden'
    }
  },
  halfAMinute: {
    standalone: 'halbe Minute',
    withPreposition: 'halben Minute'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'weniger als 1 Minute',
      other: 'weniger als {{count}} Minuten'
    },
    withPreposition: {
      one: 'weniger als 1 Minute',
      other: 'weniger als {{count}} Minuten'
    }
  },
  xMinutes: {
    standalone: {
      one: '1 Minute',
      other: '{{count}} Minuten'
    },
    withPreposition: {
      one: '1 Minute',
      other: '{{count}} Minuten'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'etwa 1 Stunde',
      other: 'etwa {{count}} Stunden'
    },
    withPreposition: {
      one: 'etwa 1 Stunde',
      other: 'etwa {{count}} Stunden'
    }
  },
  xHours: {
    standalone: {
      one: '1 Stunde',
      other: '{{count}} Stunden'
    },
    withPreposition: {
      one: '1 Stunde',
      other: '{{count}} Stunden'
    }
  },
  xDays: {
    standalone: {
      one: '1 Tag',
      other: '{{count}} Tage'
    },
    withPreposition: {
      one: '1 Tag',
      other: '{{count}} Tagen'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'etwa 1 Woche',
      other: 'etwa {{count}} Wochen'
    },
    withPreposition: {
      one: 'etwa 1 Woche',
      other: 'etwa {{count}} Wochen'
    }
  },
  xWeeks: {
    standalone: {
      one: '1 Woche',
      other: '{{count}} Wochen'
    },
    withPreposition: {
      one: '1 Woche',
      other: '{{count}} Wochen'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'etwa 1 Monat',
      other: 'etwa {{count}} Monate'
    },
    withPreposition: {
      one: 'etwa 1 Monat',
      other: 'etwa {{count}} Monaten'
    }
  },
  xMonths: {
    standalone: {
      one: '1 Monat',
      other: '{{count}} Monate'
    },
    withPreposition: {
      one: '1 Monat',
      other: '{{count}} Monaten'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'etwa 1 Jahr',
      other: 'etwa {{count}} Jahre'
    },
    withPreposition: {
      one: 'etwa 1 Jahr',
      other: 'etwa {{count}} Jahren'
    }
  },
  xYears: {
    standalone: {
      one: '1 Jahr',
      other: '{{count}} Jahre'
    },
    withPreposition: {
      one: '1 Jahr',
      other: '{{count}} Jahren'
    }
  },
  overXYears: {
    standalone: {
      one: 'mehr als 1 Jahr',
      other: 'mehr als {{count}} Jahre'
    },
    withPreposition: {
      one: 'mehr als 1 Jahr',
      other: 'mehr als {{count}} Jahren'
    }
  },
  almostXYears: {
    standalone: {
      one: 'fast 1 Jahr',
      other: 'fast {{count}} Jahre'
    },
    withPreposition: {
      one: 'fast 1 Jahr',
      other: 'fast {{count}} Jahren'
    }
  }
};
var de_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = options !== null && options !== void 0 && options.addSuffix ? de_lib_formatDistance_formatDistanceLocale[token].withPreposition : de_lib_formatDistance_formatDistanceLocale[token].standalone;
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return 'vor ' + result;
    }
  }
  return result;
};
/* harmony default export */ const de_lib_formatDistance = (de_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/formatLong/index.js

// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
var de_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM y',
  // Montag, 7. Januar 2018
  long: 'do MMMM y',
  // 7. Januar 2018
  medium: 'do MMM y',
  // 7. Jan. 2018
  short: 'dd.MM.y' // 07.01.2018
};

var de_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var de_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var de_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: de_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: de_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: de_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const de_lib_formatLong = (de_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/formatRelative/index.js
var de_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'letzten' eeee 'um' p",
  yesterday: "'gestern um' p",
  today: "'heute um' p",
  tomorrow: "'morgen um' p",
  nextWeek: "eeee 'um' p",
  other: 'P'
};
var de_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return de_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const de_lib_formatRelative = (de_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/localize/index.js

var de_lib_localize_eraValues = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['vor Christus', 'nach Christus']
};
var de_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};

// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var de_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'M√§r', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};

// https://st.unicode.org/cldr-apps/v#/de/Gregorian/
var de_lib_localize_formattingMonthValues = {
  narrow: de_lib_localize_monthValues.narrow,
  abbreviated: ['Jan.', 'Feb.', 'M√§rz', 'Apr.', 'Mai', 'Juni', 'Juli', 'Aug.', 'Sep.', 'Okt.', 'Nov.', 'Dez.'],
  wide: de_lib_localize_monthValues.wide
};
var de_lib_localize_dayValues = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag']
};

// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
var de_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachm.',
    evening: 'Abend',
    night: 'Nacht'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  }
};
var de_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachm.',
    evening: 'abends',
    night: 'nachts'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  }
};
var de_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var de_lib_localize_localize = {
  ordinalNumber: de_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_monthValues,
    formattingValues: de_lib_localize_formattingMonthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: de_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const de_lib_localize = (de_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/match/index.js


var de_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var de_lib_match_parseOrdinalNumberPattern = /\d+/i;
var de_lib_match_matchEraPatterns = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
};
var de_lib_match_parseEraPatterns = {
  any: [/^v/i, /^n/i]
};
var de_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var de_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var de_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(j[a√§]n|feb|m√§r[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
  wide: /^(januar|februar|m√§rz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
};
var de_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^j[a√§]/i, /^f/i, /^m√§r/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var de_lib_match_matchDayPatterns = {
  narrow: /^[smdmf]/i,
  short: /^(so|mo|di|mi|do|fr|sa)/i,
  abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
  wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
};
var de_lib_match_parseDayPatterns = {
  any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
};
var de_lib_match_matchDayPeriodPatterns = {
  narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
};
var de_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^v/i,
    pm: /^n/i,
    midnight: /^Mitte/i,
    noon: /^Mitta/i,
    morning: /morgens/i,
    afternoon: /nachmittags/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /abends/i,
    night: /nachts/i // will never be matched. Night is matched by `pm`
  }
};

var de_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: de_lib_match_matchOrdinalNumberPattern,
    parsePattern: de_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: de_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: de_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: de_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: de_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: de_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const de_lib_match = (de_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary German locale.
 * @language German
 * @iso-639-2 deu
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Asia [@asia-t]{@link https://github.com/asia-t}
 * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
 * @author RomanErnst [@pex]{@link https://github.com/pex}
 * @author Philipp Keck [@Philipp91]{@link https://github.com/Philipp91}
 */
var de_locale = {
  code: 'de',
  formatDistance: de_lib_formatDistance,
  formatLong: de_lib_formatLong,
  formatRelative: de_lib_formatRelative,
  localize: de_lib_localize,
  match: de_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const de = (de_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de-AT/_lib/localize/index.js

var de_AT_lib_localize_eraValues = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['vor Christus', 'nach Christus']
};
var de_AT_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};

// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var de_AT_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['J√§n', 'Feb', 'M√§r', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['J√§nner', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};

// https://st.unicode.org/cldr-apps/v#/de_AT/Gregorian/
var de_AT_lib_localize_formattingMonthValues = {
  narrow: de_AT_lib_localize_monthValues.narrow,
  abbreviated: ['J√§n.', 'Feb.', 'M√§rz', 'Apr.', 'Mai', 'Juni', 'Juli', 'Aug.', 'Sep.', 'Okt.', 'Nov.', 'Dez.'],
  wide: de_AT_lib_localize_monthValues.wide
};
var de_AT_lib_localize_dayValues = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag']
};

// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
var de_AT_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachm.',
    evening: 'Abend',
    night: 'Nacht'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  }
};
var de_AT_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachm.',
    evening: 'abends',
    night: 'nachts'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  }
};
var de_AT_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var de_AT_lib_localize_localize = {
  ordinalNumber: de_AT_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_monthValues,
    formattingValues: de_AT_lib_localize_formattingMonthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: de_AT_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const de_AT_lib_localize = (de_AT_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de-AT/index.js




// difference to 'de' locale

/**
 * @type {Locale}
 * @category Locales
 * @summary German locale (Austria).
 * @language German
 * @iso-639-2 deu
 * @author Christoph Tobias Stenglein [@cstenglein]{@link https://github.com/cstenglein}
 */
var de_AT_locale = {
  code: 'de-AT',
  formatDistance: de_lib_formatDistance,
  formatLong: de_lib_formatLong,
  formatRelative: de_lib_formatRelative,
  localize: de_AT_lib_localize,
  match: de_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const de_AT = (de_AT_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/formatDistance/index.js
var el_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå Œ≠ŒΩŒ± Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒø',
    other: 'ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå {{count}} Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒ±'
  },
  xSeconds: {
    one: '1 Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒø',
    other: '{{count}} Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒ±'
  },
  halfAMinute: 'ŒºŒπœÉœå ŒªŒµœÄœÑœå',
  lessThanXMinutes: {
    one: 'ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå Œ≠ŒΩŒ± ŒªŒµœÄœÑœå',
    other: 'ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå {{count}} ŒªŒµœÄœÑŒ¨'
  },
  xMinutes: {
    one: '1 ŒªŒµœÄœÑœå',
    other: '{{count}} ŒªŒµœÄœÑŒ¨'
  },
  aboutXHours: {
    one: 'œÄŒµœÅŒØœÄŒøœÖ 1 œéœÅŒ±',
    other: 'œÄŒµœÅŒØœÄŒøœÖ {{count}} œéœÅŒµœÇ'
  },
  xHours: {
    one: '1 œéœÅŒ±',
    other: '{{count}} œéœÅŒµœÇ'
  },
  xDays: {
    one: '1 Œ∑ŒºŒ≠œÅŒ±',
    other: '{{count}} Œ∑ŒºŒ≠œÅŒµœÇ'
  },
  aboutXWeeks: {
    one: 'œÄŒµœÅŒØœÄŒøœÖ 1 ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥Œ±',
    other: 'œÄŒµœÅŒØœÄŒøœÖ {{count}} ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ'
  },
  xWeeks: {
    one: '1 ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥Œ±',
    other: '{{count}} ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ'
  },
  aboutXMonths: {
    one: 'œÄŒµœÅŒØœÄŒøœÖ 1 ŒºŒÆŒΩŒ±œÇ',
    other: 'œÄŒµœÅŒØœÄŒøœÖ {{count}} ŒºŒÆŒΩŒµœÇ'
  },
  xMonths: {
    one: '1 ŒºŒÆŒΩŒ±œÇ',
    other: '{{count}} ŒºŒÆŒΩŒµœÇ'
  },
  aboutXYears: {
    one: 'œÄŒµœÅŒØœÄŒøœÖ 1 œáœÅœåŒΩŒø',
    other: 'œÄŒµœÅŒØœÄŒøœÖ {{count}} œáœÅœåŒΩŒπŒ±'
  },
  xYears: {
    one: '1 œáœÅœåŒΩŒø',
    other: '{{count}} œáœÅœåŒΩŒπŒ±'
  },
  overXYears: {
    one: 'œÄŒ¨ŒΩœâ Œ±œÄœå 1 œáœÅœåŒΩŒø',
    other: 'œÄŒ¨ŒΩœâ Œ±œÄœå {{count}} œáœÅœåŒΩŒπŒ±'
  },
  almostXYears: {
    one: 'œÄŒµœÅŒØœÄŒøœÖ 1 œáœÅœåŒΩŒø',
    other: 'œÄŒµœÅŒØœÄŒøœÖ {{count}} œáœÅœåŒΩŒπŒ±'
  }
};
var el_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = el_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'œÉŒµ ' + result;
    } else {
      return result + ' œÄœÅŒπŒΩ';
    }
  }
  return result;
};
/* harmony default export */ const el_lib_formatDistance = (el_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/formatLong/index.js

var el_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'd/M/yy'
};
var el_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var el_lib_formatLong_dateTimeFormats = {
  full: '{{date}} - {{time}}',
  long: '{{date}} - {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var el_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: el_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: el_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: el_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const el_lib_formatLong = (el_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/formatRelative/index.js
var el_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 6:
        //Œ£Œ¨Œ≤Œ≤Œ±œÑŒø
        return "'œÑŒø œÄœÅŒøŒ∑Œ≥ŒøœçŒºŒµŒΩŒø' eeee 'œÉœÑŒπœÇ' p";
      default:
        return "'œÑŒ∑ŒΩ œÄœÅŒøŒ∑Œ≥ŒøœçŒºŒµŒΩŒ∑' eeee 'œÉœÑŒπœÇ' p";
    }
  },
  yesterday: "'œáŒ∏ŒµœÇ œÉœÑŒπœÇ' p",
  today: "'œÉŒÆŒºŒµœÅŒ± œÉœÑŒπœÇ' p",
  tomorrow: "'Œ±œçœÅŒπŒø œÉœÑŒπœÇ' p",
  nextWeek: "eeee 'œÉœÑŒπœÇ' p",
  other: 'P'
};
var el_lib_formatRelative_formatRelative = function formatRelative(token, date) {
  var format = el_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') return format(date);
  return format;
};
/* harmony default export */ const el_lib_formatRelative = (el_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/localize/index.js

var el_lib_localize_eraValues = {
  narrow: ['œÄŒß', 'ŒºŒß'],
  abbreviated: ['œÄ.Œß.', 'Œº.Œß.'],
  wide: ['œÄœÅŒø ŒßœÅŒπœÉœÑŒøœç', 'ŒºŒµœÑŒ¨ ŒßœÅŒπœÉœÑœåŒΩ']
};
var el_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Œ§1', 'Œ§2', 'Œ§3', 'Œ§4'],
  wide: ['1Œø œÑœÅŒØŒºŒ∑ŒΩŒø', '2Œø œÑœÅŒØŒºŒ∑ŒΩŒø', '3Œø œÑœÅŒØŒºŒ∑ŒΩŒø', '4Œø œÑœÅŒØŒºŒ∑ŒΩŒø']
};
var el_lib_localize_monthValues = {
  narrow: ['Œô', 'Œ¶', 'Œú', 'Œë', 'Œú', 'Œô', 'Œô', 'Œë', 'Œ£', 'Œü', 'Œù', 'Œî'],
  abbreviated: ['ŒôŒ±ŒΩ', 'Œ¶ŒµŒ≤', 'ŒúŒ¨œÅ', 'ŒëœÄœÅ', 'ŒúŒ¨Œπ', 'ŒôŒøœçŒΩ', 'ŒôŒøœçŒª', 'ŒëœçŒ≥', 'Œ£ŒµœÄ', 'ŒüŒ∫œÑ', 'ŒùŒøŒ≠', 'ŒîŒµŒ∫'],
  wide: ['ŒôŒ±ŒΩŒøœÖŒ¨œÅŒπŒøœÇ', 'Œ¶ŒµŒ≤œÅŒøœÖŒ¨œÅŒπŒøœÇ', 'ŒúŒ¨œÅœÑŒπŒøœÇ', 'ŒëœÄœÅŒØŒªŒπŒøœÇ', 'ŒúŒ¨ŒπŒøœÇ', 'ŒôŒøœçŒΩŒπŒøœÇ', 'ŒôŒøœçŒªŒπŒøœÇ', 'ŒëœçŒ≥ŒøœÖœÉœÑŒøœÇ', 'Œ£ŒµœÄœÑŒ≠ŒºŒ≤œÅŒπŒøœÇ', 'ŒüŒ∫œÑœéŒ≤œÅŒπŒøœÇ', 'ŒùŒøŒ≠ŒºŒ≤œÅŒπŒøœÇ', 'ŒîŒµŒ∫Œ≠ŒºŒ≤œÅŒπŒøœÇ']
};
var el_lib_localize_formattingMonthValues = {
  narrow: ['Œô', 'Œ¶', 'Œú', 'Œë', 'Œú', 'Œô', 'Œô', 'Œë', 'Œ£', 'Œü', 'Œù', 'Œî'],
  abbreviated: ['ŒôŒ±ŒΩ', 'Œ¶ŒµŒ≤', 'ŒúŒ±œÅ', 'ŒëœÄœÅ', 'ŒúŒ±Œê', 'ŒôŒøœÖŒΩ', 'ŒôŒøœÖŒª', 'ŒëœÖŒ≥', 'Œ£ŒµœÄ', 'ŒüŒ∫œÑ', 'ŒùŒøŒµ', 'ŒîŒµŒ∫'],
  wide: ['ŒôŒ±ŒΩŒøœÖŒ±œÅŒØŒøœÖ', 'Œ¶ŒµŒ≤œÅŒøœÖŒ±œÅŒØŒøœÖ', 'ŒúŒ±œÅœÑŒØŒøœÖ', 'ŒëœÄœÅŒπŒªŒØŒøœÖ', 'ŒúŒ±ŒêŒøœÖ', 'ŒôŒøœÖŒΩŒØŒøœÖ', 'ŒôŒøœÖŒªŒØŒøœÖ', 'ŒëœÖŒ≥ŒøœçœÉœÑŒøœÖ', 'Œ£ŒµœÄœÑŒµŒºŒ≤œÅŒØŒøœÖ', 'ŒüŒ∫œÑœâŒ≤œÅŒØŒøœÖ', 'ŒùŒøŒµŒºŒ≤œÅŒØŒøœÖ', 'ŒîŒµŒ∫ŒµŒºŒ≤œÅŒØŒøœÖ']
};
var el_lib_localize_dayValues = {
  narrow: ['Œö', 'Œî', 'T', 'Œ§', 'Œ†', 'Œ†', 'Œ£'],
  short: ['ŒöœÖ', 'ŒîŒµ', 'Œ§œÅ', 'Œ§Œµ', 'Œ†Œ≠', 'Œ†Œ±', 'Œ£Œ¨'],
  abbreviated: ['ŒöœÖœÅ', 'ŒîŒµœÖ', 'Œ§œÅŒØ', 'Œ§ŒµœÑ', 'Œ†Œ≠Œº', 'Œ†Œ±œÅ', 'Œ£Œ¨Œ≤'],
  wide: ['ŒöœÖœÅŒπŒ±Œ∫ŒÆ', 'ŒîŒµœÖœÑŒ≠œÅŒ±', 'Œ§œÅŒØœÑŒ∑', 'Œ§ŒµœÑŒ¨œÅœÑŒ∑', 'Œ†Œ≠ŒºœÄœÑŒ∑', 'Œ†Œ±œÅŒ±œÉŒ∫ŒµœÖŒÆ', 'Œ£Œ¨Œ≤Œ≤Œ±œÑŒø']
};
var el_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'œÄŒº',
    pm: 'ŒºŒº',
    midnight: 'ŒºŒµœÉŒ¨ŒΩœÖœáœÑŒ±',
    noon: 'ŒºŒµœÉŒ∑ŒºŒ≠œÅŒπ',
    morning: 'œÄœÅœâŒØ',
    afternoon: 'Œ±œÄœåŒ≥ŒµœÖŒºŒ±',
    evening: 'Œ≤œÅŒ¨Œ¥œÖ',
    night: 'ŒΩœçœáœÑŒ±'
  },
  abbreviated: {
    am: 'œÄ.Œº.',
    pm: 'Œº.Œº.',
    midnight: 'ŒºŒµœÉŒ¨ŒΩœÖœáœÑŒ±',
    noon: 'ŒºŒµœÉŒ∑ŒºŒ≠œÅŒπ',
    morning: 'œÄœÅœâŒØ',
    afternoon: 'Œ±œÄœåŒ≥ŒµœÖŒºŒ±',
    evening: 'Œ≤œÅŒ¨Œ¥œÖ',
    night: 'ŒΩœçœáœÑŒ±'
  },
  wide: {
    am: 'œÄ.Œº.',
    pm: 'Œº.Œº.',
    midnight: 'ŒºŒµœÉŒ¨ŒΩœÖœáœÑŒ±',
    noon: 'ŒºŒµœÉŒ∑ŒºŒ≠œÅŒπ',
    morning: 'œÄœÅœâŒØ',
    afternoon: 'Œ±œÄœåŒ≥ŒµœÖŒºŒ±',
    evening: 'Œ≤œÅŒ¨Œ¥œÖ',
    night: 'ŒΩœçœáœÑŒ±'
  }
};
var el_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var suffix;
  if (unit === 'year' || unit === 'month') {
    suffix = 'ŒøœÇ';
  } else if (unit === 'week' || unit === 'dayOfYear' || unit === 'day' || unit === 'hour' || unit === 'date') {
    suffix = 'Œ∑';
  } else {
    suffix = 'Œø';
  }
  return number + suffix;
};
var el_lib_localize_localize = {
  ordinalNumber: el_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: el_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const el_lib_localize = (el_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/match/index.js


var el_lib_match_matchOrdinalNumberPattern = /^(\d+)(ŒøœÇ|Œ∑|Œø)?/i;
var el_lib_match_parseOrdinalNumberPattern = /\d+/i;
var el_lib_match_matchEraPatterns = {
  narrow: /^(œÄŒß|ŒºŒß)/i,
  abbreviated: /^(œÄ\.?\s?œá\.?|œÄ\.?\s?Œ∫\.?\s?œá\.?|Œº\.?\s?œá\.?|Œ∫\.?\s?œá\.?)/i,
  wide: /^(œÄœÅŒø ŒßœÅŒπœÉœÑŒø(œç|œÖ)|œÄœÅŒπŒΩ Œ±œÄ(œå|Œø) œÑŒ∑ŒΩ ŒöŒøŒπŒΩ(ŒÆ|Œ∑) ŒßœÅŒøŒΩŒøŒªŒøŒ≥(ŒØ|Œπ)Œ±|ŒºŒµœÑ(Œ¨|Œ±) ŒßœÅŒπœÉœÑ(œå|Œø)ŒΩ|ŒöŒøŒπŒΩ(ŒÆ|Œ∑) ŒßœÅŒøŒΩŒøŒªŒøŒ≥(ŒØ|Œπ)Œ±)/i
};
var el_lib_match_parseEraPatterns = {
  any: [/^œÄ/i, /^(Œº|Œ∫)/i]
};
var el_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^œÑ[1234]/i,
  wide: /^[1234]Œø? œÑœÅ(ŒØ|Œπ)ŒºŒ∑ŒΩŒø/i
};
var el_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var el_lib_match_matchMonthPatterns = {
  narrow: /^[ŒπœÜŒºŒ±ŒºŒπŒπŒ±œÉŒøŒΩŒ¥]/i,
  abbreviated: /^(ŒπŒ±ŒΩ|œÜŒµŒ≤|Œº[Œ¨Œ±]œÅ|Œ±œÄœÅ|Œº[Œ¨Œ±][ŒπŒê]|ŒπŒø[œçœÖ]ŒΩ|ŒπŒø[œçœÖ]Œª|Œ±[œçœÖ]Œ≥|œÉŒµœÄ|ŒøŒ∫œÑ|ŒΩŒø[Œ≠Œµ]|Œ¥ŒµŒ∫)/i,
  wide: /^(Œº[Œ¨Œ±][ŒπŒê]|Œ±[œçœÖ]Œ≥Œø[œÖœç]œÉœÑ)(ŒøœÇ|ŒøœÖ)|(ŒπŒ±ŒΩŒøœÖ[Œ¨Œ±]œÅ|œÜŒµŒ≤œÅŒøœÖ[Œ¨Œ±]œÅ|Œº[Œ¨Œ±]œÅœÑ|Œ±œÄœÅ[ŒØŒπ]Œª|ŒπŒø[œçœÖ]ŒΩ|ŒπŒø[œçœÖ]Œª|œÉŒµœÄœÑ[Œ≠Œµ]ŒºŒ≤œÅ|ŒøŒ∫œÑ[œéœâ]Œ≤œÅ|ŒΩŒø[Œ≠Œµ]ŒºŒ≤œÅ|Œ¥ŒµŒ∫[Œ≠Œµ]ŒºŒ≤œÅ)(ŒπŒøœÇ|ŒØŒøœÖ)/i
};
var el_lib_match_parseMonthPatterns = {
  narrow: [/^Œπ/i, /^œÜ/i, /^Œº/i, /^Œ±/i, /^Œº/i, /^Œπ/i, /^Œπ/i, /^Œ±/i, /^œÉ/i, /^Œø/i, /^ŒΩ/i, /^Œ¥/i],
  any: [/^ŒπŒ±/i, /^œÜ/i, /^Œº[Œ¨Œ±]œÅ/i, /^Œ±œÄ/i, /^Œº[Œ¨Œ±][ŒπŒê]/i, /^ŒπŒø[œçœÖ]ŒΩ/i, /^ŒπŒø[œçœÖ]Œª/i, /^Œ±[œçœÖ]/i, /^œÉ/i, /^Œø/i, /^ŒΩ/i, /^Œ¥/i]
};
var el_lib_match_matchDayPatterns = {
  narrow: /^[Œ∫Œ¥œÑœÄœÉ]/i,
  short: /^(Œ∫œÖ|Œ¥Œµ|œÑœÅ|œÑŒµ|œÄ[ŒµŒ≠]|œÄ[Œ±Œ¨]|œÉ[Œ±Œ¨])/i,
  abbreviated: /^(Œ∫œÖœÅ|Œ¥ŒµœÖ|œÑœÅŒπ|œÑŒµœÑ|œÄŒµŒº|œÄŒ±œÅ|œÉŒ±Œ≤)/i,
  wide: /^(Œ∫œÖœÅŒπŒ±Œ∫(ŒÆ|Œ∑)|Œ¥ŒµœÖœÑ(Œ≠|Œµ)œÅŒ±|œÑœÅ(ŒØ|Œπ)œÑŒ∑|œÑŒµœÑ(Œ¨|Œ±)œÅœÑŒ∑|œÄ(Œ≠|Œµ)ŒºœÄœÑŒ∑|œÄŒ±œÅŒ±œÉŒ∫ŒµœÖ(ŒÆ|Œ∑)|œÉ(Œ¨|Œ±)Œ≤Œ≤Œ±œÑŒø)/i
};
var el_lib_match_parseDayPatterns = {
  narrow: [/^Œ∫/i, /^Œ¥/i, /^œÑ/i, /^œÑ/i, /^œÄ/i, /^œÄ/i, /^œÉ/i],
  any: [/^Œ∫/i, /^Œ¥/i, /^œÑœÅ/i, /^œÑŒµ/i, /^œÄ[ŒµŒ≠]/i, /^œÄ[Œ±Œ¨]/i, /^œÉ/i]
};
var el_lib_match_matchDayPeriodPatterns = {
  narrow: /^(œÄŒº|ŒºŒº|ŒºŒµœÉ(Œ¨|Œ±)ŒΩœÖœáœÑŒ±|ŒºŒµœÉŒ∑Œº(Œ≠|Œµ)œÅŒπ|œÄœÅœâ(ŒØ|Œπ)|Œ±œÄ(œå|Œø)Œ≥ŒµœÖŒºŒ±|Œ≤œÅ(Œ¨|Œ±)Œ¥œÖ|ŒΩ(œç|œÖ)œáœÑŒ±)/i,
  any: /^([œÄŒº]\.?\s?Œº\.?|ŒºŒµœÉ(Œ¨|Œ±)ŒΩœÖœáœÑŒ±|ŒºŒµœÉŒ∑Œº(Œ≠|Œµ)œÅŒπ|œÄœÅœâ(ŒØ|Œπ)|Œ±œÄ(œå|Œø)Œ≥ŒµœÖŒºŒ±|Œ≤œÅ(Œ¨|Œ±)Œ¥œÖ|ŒΩ(œç|œÖ)œáœÑŒ±)/i
};
var el_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^œÄŒº|œÄ\.\s?Œº\./i,
    pm: /^ŒºŒº|Œº\.\s?Œº\./i,
    midnight: /^ŒºŒµœÉŒ¨ŒΩ/i,
    noon: /^ŒºŒµœÉŒ∑Œº(Œ≠|Œµ)/i,
    morning: /œÄœÅœâ(ŒØ|Œπ)/i,
    afternoon: /Œ±œÄ(œå|Œø)Œ≥ŒµœÖŒºŒ±/i,
    evening: /Œ≤œÅ(Œ¨|Œ±)Œ¥œÖ/i,
    night: /ŒΩ(œç|œÖ)œáœÑŒ±/i
  }
};
var el_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: el_lib_match_matchOrdinalNumberPattern,
    parsePattern: el_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: el_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: el_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: el_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: el_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: el_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const el_lib_match = (el_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Greek locale.
 * @language Greek
 * @iso-639-2 ell
 * @author Fanis Katsimpas [@fanixk]{@link https://github.com/fanixk}
 * @author Theodoros Orfanidis [@teoulas]{@link https://github.com/teoulas}
 */
var el_locale = {
  code: 'el',
  formatDistance: el_lib_formatDistance,
  formatLong: el_lib_formatLong,
  formatRelative: el_lib_formatRelative,
  localize: el_lib_localize,
  match: el_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const el = (el_locale);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var en_US_lib_formatDistance = __webpack_require__(81991);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-AU/_lib/formatLong/index.js

var en_AU_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var en_AU_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var en_AU_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var en_AU_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_AU_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_AU_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_AU_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const en_AU_lib_formatLong = (en_AU_lib_formatLong_formatLong);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var en_US_lib_formatRelative = __webpack_require__(21865);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var en_US_lib_localize = __webpack_require__(11950);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var en_US_lib_match = __webpack_require__(7219);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-AU/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (Australia).
 * @language English
 * @iso-639-2 eng
 * @author Julien Malige [@JulienMalige]{@link https://github.com/JulienMalige}
 */
var en_AU_locale = {
  code: 'en-AU',
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_AU_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_AU = (en_AU_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-CA/_lib/formatDistance/index.js
var en_CA_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: 'a second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: 'a minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about an hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: 'an hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: 'a day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about a week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: 'a week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about a month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: 'a month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about a year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: 'a year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over a year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost a year',
    other: 'almost {{count}} years'
  }
};
var en_CA_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = en_CA_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }
  return result;
};
/* harmony default export */ const en_CA_lib_formatDistance = (en_CA_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-CA/_lib/formatLong/index.js

var en_CA_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, yyyy',
  long: 'MMMM do, yyyy',
  medium: 'MMM d, yyyy',
  short: 'yyyy-MM-dd'
};
var en_CA_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var en_CA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var en_CA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_CA_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_CA_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_CA_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const en_CA_lib_formatLong = (en_CA_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-CA/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (Canada).
 * @language English
 * @iso-639-2 eng
 * @author Mark Owsiak [@markowsiak]{@link https://github.com/markowsiak}
 * @author Marco Imperatore [@mimperatore]{@link https://github.com/mimperatore}
 */
var en_CA_locale = {
  code: 'en-CA',
  formatDistance: en_CA_lib_formatDistance,
  formatLong: en_CA_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const en_CA = (en_CA_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-GB/_lib/formatLong/index.js

var en_GB_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var en_GB_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var en_GB_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var en_GB_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_GB_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_GB_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_GB_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const en_GB_lib_formatLong = (en_GB_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-GB/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United Kingdom).
 * @language English
 * @iso-639-2 eng
 * @author Alex [@glintik]{@link https://github.com/glintik}
 */
var en_GB_locale = {
  code: 'en-GB',
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_GB_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_GB = (en_GB_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-IE/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (Ireland).
 * @language English
 * @iso-639-2 eng
 * @author Tetiana [@tan75]{@link https://github.com/tan75}
 */
var en_IE_locale = {
  code: 'en-IE',
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_GB_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_IE = (en_IE_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-IN/_lib/formatLong/index.js

var en_IN_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM, yyyy',
  medium: 'd MMM, yyyy',
  short: 'dd/MM/yyyy'
};
var en_IN_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var en_IN_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var en_IN_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_IN_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_IN_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_IN_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const en_IN_lib_formatLong = (en_IN_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-IN/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (India).
 * @language English
 * @iso-639-2 eng
 * @author Galeel Bhasha Satthar [@gbhasha]{@link https://github.com/gbhasha}
 */
var en_IN_locale = {
  code: 'en-IN',
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_IN_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1,
    // Monday is the first day of the week.
    firstWeekContainsDate: 4 // The week that contains Jan 4th is the first week of the year.
  }
};

/* harmony default export */ const en_IN = (en_IN_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-NZ/_lib/formatLong/index.js

var en_NZ_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var en_NZ_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var en_NZ_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var en_NZ_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_NZ_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_NZ_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_NZ_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const en_NZ_lib_formatLong = (en_NZ_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-NZ/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (New Zealand).
 * @language English
 * @iso-639-2 eng
 * @author Murray Lucas [@muntact]{@link https://github.com/muntact}
 */
var en_NZ_locale = {
  code: 'en-NZ',
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_NZ_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_NZ = (en_NZ_locale);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/index.js + 1 modules
var en_US = __webpack_require__(21224);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-ZA/_lib/formatLong/index.js

var en_ZA_lib_formatLong_dateFormats = {
  full: 'EEEE, dd MMMM yyyy',
  long: 'dd MMMM yyyy',
  medium: 'dd MMM yyyy',
  short: 'yyyy/MM/dd'
};
var en_ZA_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var en_ZA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var en_ZA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_ZA_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_ZA_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_ZA_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const en_ZA_lib_formatLong = (en_ZA_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-ZA/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (South Africa).
 * @language English
 * @iso-639-2 eng
 * @author Shaila Kavrakova [@shaykav]{@link https://github.com/shaykav}
 */
var en_ZA_locale = {
  code: 'en-ZA',
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_ZA_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 0,
    // Sunday is the first day of the week.
    firstWeekContainsDate: 1 // The week that contains Jan 1st is the first week of the year.
  }
};

/* harmony default export */ const en_ZA = (en_ZA_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/formatDistance/index.js
var eo_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'malpli ol sekundo',
    other: 'malpli ol {{count}} sekundoj'
  },
  xSeconds: {
    one: '1 sekundo',
    other: '{{count}} sekundoj'
  },
  halfAMinute: 'duonminuto',
  lessThanXMinutes: {
    one: 'malpli ol minuto',
    other: 'malpli ol {{count}} minutoj'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutoj'
  },
  aboutXHours: {
    one: 'proksimume 1 horo',
    other: 'proksimume {{count}} horoj'
  },
  xHours: {
    one: '1 horo',
    other: '{{count}} horoj'
  },
  xDays: {
    one: '1 tago',
    other: '{{count}} tagoj'
  },
  aboutXMonths: {
    one: 'proksimume 1 monato',
    other: 'proksimume {{count}} monatoj'
  },
  xWeeks: {
    one: '1 semajno',
    other: '{{count}} semajnoj'
  },
  aboutXWeeks: {
    one: 'proksimume 1 semajno',
    other: 'proksimume {{count}} semajnoj'
  },
  xMonths: {
    one: '1 monato',
    other: '{{count}} monatoj'
  },
  aboutXYears: {
    one: 'proksimume 1 jaro',
    other: 'proksimume {{count}} jaroj'
  },
  xYears: {
    one: '1 jaro',
    other: '{{count}} jaroj'
  },
  overXYears: {
    one: 'pli ol 1 jaro',
    other: 'pli ol {{count}} jaroj'
  },
  almostXYears: {
    one: 'preska≈≠ 1 jaro',
    other: 'preska≈≠ {{count}} jaroj'
  }
};
var eo_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = eo_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options !== null && options !== void 0 && options.comparison && options.comparison > 0) {
      return 'post ' + result;
    } else {
      return 'anta≈≠ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const eo_lib_formatDistance = (eo_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/formatLong/index.js

var eo_lib_formatLong_dateFormats = {
  full: "EEEE, do 'de' MMMM y",
  long: 'y-MMMM-dd',
  medium: 'y-MMM-dd',
  short: 'yyyy-MM-dd'
};
var eo_lib_formatLong_timeFormats = {
  full: "Ho 'horo kaj' m:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var eo_lib_formatLong_dateTimeFormats = {
  any: '{{date}} {{time}}'
};
var eo_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: eo_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: eo_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: eo_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const eo_lib_formatLong = (eo_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/formatRelative/index.js
var eo_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'pasinta' eeee 'je' p",
  yesterday: "'hiera≈≠ je' p",
  today: "'hodia≈≠ je' p",
  tomorrow: "'morga≈≠ je' p",
  nextWeek: "eeee 'je' p",
  other: 'P'
};
var eo_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return eo_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const eo_lib_formatRelative = (eo_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/localize/index.js

var eo_lib_localize_eraValues = {
  narrow: ['aK', 'pK'],
  abbreviated: ['a.K.E.', 'p.K.E.'],
  wide: ['anta≈≠ Komuna Erao', 'Komuna Erao']
};
var eo_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1-a kvaronjaro', '2-a kvaronjaro', '3-a kvaronjaro', '4-a kvaronjaro']
};
var eo_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'a≈≠g', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januaro', 'februaro', 'marto', 'aprilo', 'majo', 'junio', 'julio', 'a≈≠gusto', 'septembro', 'oktobro', 'novembro', 'decembro']
};
var eo_lib_localize_dayValues = {
  narrow: ['D', 'L', 'M', 'M', 'ƒ¥', 'V', 'S'],
  short: ['di', 'lu', 'ma', 'me', 'ƒµa', 've', 'sa'],
  abbreviated: ['dim', 'lun', 'mar', 'mer', 'ƒµa≈≠', 'ven', 'sab'],
  wide: ['dimanƒâo', 'lundo', 'mardo', 'merkredo', 'ƒµa≈≠do', 'vendredo', 'sabato']
};
var eo_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'noktomezo',
    noon: 'tagmezo',
    morning: 'matene',
    afternoon: 'posttagmeze',
    evening: 'vespere',
    night: 'nokte'
  },
  abbreviated: {
    am: 'a.t.m.',
    pm: 'p.t.m.',
    midnight: 'noktomezo',
    noon: 'tagmezo',
    morning: 'matene',
    afternoon: 'posttagmeze',
    evening: 'vespere',
    night: 'nokte'
  },
  wide: {
    am: 'anta≈≠tagmeze',
    pm: 'posttagmeze',
    midnight: 'noktomezo',
    noon: 'tagmezo',
    morning: 'matene',
    afternoon: 'posttagmeze',
    evening: 'vespere',
    night: 'nokte'
  }
};
var eo_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '-a';
};
var eo_lib_localize_localize = {
  ordinalNumber: eo_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const eo_lib_localize = (eo_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/match/index.js


var eo_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?a)?/i;
var eo_lib_match_parseOrdinalNumberPattern = /\d+/i;
var eo_lib_match_matchEraPatterns = {
  narrow: /^([ap]k)/i,
  abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
  wide: /^((anta«î |post )?komuna erao)/i
};
var eo_lib_match_parseEraPatterns = {
  any: [/^a/i, /^[kp]/i]
};
var eo_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](-?a)? kvaronjaro/i
};
var eo_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var eo_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(≈≠|ux|uh|u)g|sep|okt|nov|dec)/i,
  wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(≈≠|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
};
var eo_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^a(u|≈≠)/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var eo_lib_match_matchDayPatterns = {
  narrow: /^[dlmƒµjvs]/i,
  short: /^(di|lu|ma|me|(ƒµ|jx|jh|j)a|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|(ƒµ|jx|jh|j)a(≈≠|ux|uh|u)|ven|sab)/i,
  wide: /^(diman(ƒâ|cx|ch|c)o|lundo|mardo|merkredo|(ƒµ|jx|jh|j)a(≈≠|ux|uh|u)do|vendredo|sabato)/i
};
var eo_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ƒµ)/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ƒµ)/i, /^v/i, /^s/i]
};
var eo_lib_match_matchDayPeriodPatterns = {
  narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  wide: /^(anta(≈≠|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
};
var eo_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^noktom/i,
    noon: /^t/i,
    morning: /^m/i,
    afternoon: /^posttagmeze/i,
    evening: /^v/i,
    night: /^n/i
  }
};
var eo_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: eo_lib_match_matchOrdinalNumberPattern,
    parsePattern: eo_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eo_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eo_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eo_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eo_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eo_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const eo_lib_match = (eo_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Esperanto locale.
 * @language Esperanto
 * @iso-639-2 epo
 * @author date-fns
 */
var eo_locale = {
  code: 'eo',
  formatDistance: eo_lib_formatDistance,
  formatLong: eo_lib_formatLong,
  formatRelative: eo_lib_formatRelative,
  localize: eo_lib_localize,
  match: eo_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const eo = (eo_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/formatDistance/index.js
var es_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'menos de un segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'medio minuto',
  lessThanXMinutes: {
    one: 'menos de un minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'alrededor de 1 hora',
    other: 'alrededor de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 d√≠a',
    other: '{{count}} d√≠as'
  },
  aboutXWeeks: {
    one: 'alrededor de 1 semana',
    other: 'alrededor de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'alrededor de 1 mes',
    other: 'alrededor de {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'alrededor de 1 a√±o',
    other: 'alrededor de {{count}} a√±os'
  },
  xYears: {
    one: '1 a√±o',
    other: '{{count}} a√±os'
  },
  overXYears: {
    one: 'm√°s de 1 a√±o',
    other: 'm√°s de {{count}} a√±os'
  },
  almostXYears: {
    one: 'casi 1 a√±o',
    other: 'casi {{count}} a√±os'
  }
};
var es_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = es_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'hace ' + result;
    }
  }
  return result;
};
/* harmony default export */ const es_lib_formatDistance = (es_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/formatLong/index.js

var es_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var es_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var es_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'a las' {{time}}",
  long: "{{date}} 'a las' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var es_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: es_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: es_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: es_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const es_lib_formatLong = (es_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/formatRelative/index.js
var es_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'el' eeee 'pasado a la' p",
  yesterday: "'ayer a la' p",
  today: "'hoy a la' p",
  tomorrow: "'ma√±ana a la' p",
  nextWeek: "eeee 'a la' p",
  other: 'P'
};
var formatRelative_formatRelativeLocalePlural = {
  lastWeek: "'el' eeee 'pasado a las' p",
  yesterday: "'ayer a las' p",
  today: "'hoy a las' p",
  tomorrow: "'ma√±ana a las' p",
  nextWeek: "eeee 'a las' p",
  other: 'P'
};
var es_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelative_formatRelativeLocalePlural[token];
  } else {
    return es_lib_formatRelative_formatRelativeLocale[token];
  }
};
/* harmony default export */ const es_lib_formatRelative = (es_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/localize/index.js

var es_lib_localize_eraValues = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'despu√©s de cristo']
};
var es_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1¬∫ trimestre', '2¬∫ trimestre', '3¬∫ trimestre', '4¬∫ trimestre']
};
var es_lib_localize_monthValues = {
  narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],
  wide: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']
};
var es_lib_localize_dayValues = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 's√°'],
  abbreviated: ['dom', 'lun', 'mar', 'mi√©', 'jue', 'vie', 's√°b'],
  wide: ['domingo', 'lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado']
};
var es_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'ma√±ana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'ma√±ana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'ma√±ana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  }
};
var es_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'de la ma√±ana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'de la ma√±ana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'de la ma√±ana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  }
};
var es_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '¬∫';
};
var es_lib_localize_localize = {
  ordinalNumber: es_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: es_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const es_lib_localize = (es_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/match/index.js


var es_lib_match_matchOrdinalNumberPattern = /^(\d+)(¬∫)?/i;
var es_lib_match_parseOrdinalNumberPattern = /\d+/i;
var es_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes de la era com[u√∫]n|despu[e√©]s de cristo|era com[u√∫]n)/i
};
var es_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes de la era com[u√∫]n)/i, /^(despu[e√©]s de cristo|era com[u√∫]n)/i]
};
var es_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](¬∫)? trimestre/i
};
var es_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var es_lib_match_matchMonthPatterns = {
  narrow: /^[efmajsond]/i,
  abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
  wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
};
var es_lib_match_parseMonthPatterns = {
  narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
};
var es_lib_match_matchDayPatterns = {
  narrow: /^[dlmjvs]/i,
  short: /^(do|lu|ma|mi|ju|vi|s[√°a])/i,
  abbreviated: /^(dom|lun|mar|mi[√©e]|jue|vie|s[√°a]b)/i,
  wide: /^(domingo|lunes|martes|mi[√©e]rcoles|jueves|viernes|s[√°a]bado)/i
};
var es_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
};
var es_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(de la|a las) (ma√±ana|tarde|noche))/i,
  any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (ma√±ana|tarde|noche))/i
};
var es_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /ma√±ana/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noche/i
  }
};
var es_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: es_lib_match_matchOrdinalNumberPattern,
    parsePattern: es_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: es_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: es_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: es_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: es_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: es_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const es_lib_match = (es_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Spanish locale.
 * @language Spanish
 * @iso-639-2 spa
 * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}
 * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
 * @author Fernando Ag√ºero [@fjaguero]{@link https://github.com/fjaguero}
 * @author Gast√≥n Haro [@harogaston]{@link https://github.com/harogaston}
 * @author Yago Carballo [@YagoCarballo]{@link https://github.com/YagoCarballo}
 */
var es_locale = {
  code: 'es',
  formatDistance: es_lib_formatDistance,
  formatLong: es_lib_formatLong,
  formatRelative: es_lib_formatRelative,
  localize: es_lib_localize,
  match: es_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const es = (es_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/formatDistance/index.js
var et_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: 'v√§hem kui √ºks sekund',
      other: 'v√§hem kui {{count}} sekundit'
    },
    withPreposition: {
      one: 'v√§hem kui √ºhe sekundi',
      other: 'v√§hem kui {{count}} sekundi'
    }
  },
  xSeconds: {
    standalone: {
      one: '√ºks sekund',
      other: '{{count}} sekundit'
    },
    withPreposition: {
      one: '√ºhe sekundi',
      other: '{{count}} sekundi'
    }
  },
  halfAMinute: {
    standalone: 'pool minutit',
    withPreposition: 'poole minuti'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'v√§hem kui √ºks minut',
      other: 'v√§hem kui {{count}} minutit'
    },
    withPreposition: {
      one: 'v√§hem kui √ºhe minuti',
      other: 'v√§hem kui {{count}} minuti'
    }
  },
  xMinutes: {
    standalone: {
      one: '√ºks minut',
      other: '{{count}} minutit'
    },
    withPreposition: {
      one: '√ºhe minuti',
      other: '{{count}} minuti'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'umbes √ºks tund',
      other: 'umbes {{count}} tundi'
    },
    withPreposition: {
      one: 'umbes √ºhe tunni',
      other: 'umbes {{count}} tunni'
    }
  },
  xHours: {
    standalone: {
      one: '√ºks tund',
      other: '{{count}} tundi'
    },
    withPreposition: {
      one: '√ºhe tunni',
      other: '{{count}} tunni'
    }
  },
  xDays: {
    standalone: {
      one: '√ºks p√§ev',
      other: '{{count}} p√§eva'
    },
    withPreposition: {
      one: '√ºhe p√§eva',
      other: '{{count}} p√§eva'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'umbes √ºks n√§dal',
      other: 'umbes {{count}} n√§dalat'
    },
    withPreposition: {
      one: 'umbes √ºhe n√§dala',
      other: 'umbes {{count}} n√§dala'
    }
  },
  xWeeks: {
    standalone: {
      one: '√ºks n√§dal',
      other: '{{count}} n√§dalat'
    },
    withPreposition: {
      one: '√ºhe n√§dala',
      other: '{{count}} n√§dala'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'umbes √ºks kuu',
      other: 'umbes {{count}} kuud'
    },
    withPreposition: {
      one: 'umbes √ºhe kuu',
      other: 'umbes {{count}} kuu'
    }
  },
  xMonths: {
    standalone: {
      one: '√ºks kuu',
      other: '{{count}} kuud'
    },
    withPreposition: {
      one: '√ºhe kuu',
      other: '{{count}} kuu'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'umbes √ºks aasta',
      other: 'umbes {{count}} aastat'
    },
    withPreposition: {
      one: 'umbes √ºhe aasta',
      other: 'umbes {{count}} aasta'
    }
  },
  xYears: {
    standalone: {
      one: '√ºks aasta',
      other: '{{count}} aastat'
    },
    withPreposition: {
      one: '√ºhe aasta',
      other: '{{count}} aasta'
    }
  },
  overXYears: {
    standalone: {
      one: 'rohkem kui √ºks aasta',
      other: 'rohkem kui {{count}} aastat'
    },
    withPreposition: {
      one: 'rohkem kui √ºhe aasta',
      other: 'rohkem kui {{count}} aasta'
    }
  },
  almostXYears: {
    standalone: {
      one: 'peaaegu √ºks aasta',
      other: 'peaaegu {{count}} aastat'
    },
    withPreposition: {
      one: 'peaaegu √ºhe aasta',
      other: 'peaaegu {{count}} aasta'
    }
  }
};
var et_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var usageGroup = options !== null && options !== void 0 && options.addSuffix ? et_lib_formatDistance_formatDistanceLocale[token].withPreposition : et_lib_formatDistance_formatDistanceLocale[token].standalone;
  var result;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' p√§rast';
    } else {
      return result + ' eest';
    }
  }
  return result;
};
/* harmony default export */ const et_lib_formatDistance = (et_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/formatLong/index.js

var et_lib_formatLong_dateFormats = {
  full: 'EEEE, d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var et_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var et_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kell' {{time}}",
  long: "{{date}} 'kell' {{time}}",
  medium: '{{date}}. {{time}}',
  short: '{{date}}. {{time}}'
};
var et_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: et_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: et_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: et_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const et_lib_formatLong = (et_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/formatRelative/index.js
var et_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'eelmine' eeee 'kell' p",
  yesterday: "'eile kell' p",
  today: "'t√§na kell' p",
  tomorrow: "'homme kell' p",
  nextWeek: "'j√§rgmine' eeee 'kell' p",
  other: 'P'
};
var et_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return et_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const et_lib_formatRelative = (et_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/localize/index.js

var et_lib_localize_eraValues = {
  narrow: ['e.m.a', 'm.a.j'],
  abbreviated: ['e.m.a', 'm.a.j'],
  wide: ['enne meie ajaarvamist', 'meie ajaarvamise j√§rgi']
};
var et_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var et_lib_localize_monthValues = {
  narrow: ['J', 'V', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jaan', 'veebr', 'm√§rts', 'apr', 'mai', 'juuni', 'juuli', 'aug', 'sept', 'okt', 'nov', 'dets'],
  wide: ['jaanuar', 'veebruar', 'm√§rts', 'aprill', 'mai', 'juuni', 'juuli', 'august', 'september', 'oktoober', 'november', 'detsember']
};
var et_lib_localize_dayValues = {
  narrow: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
  short: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
  abbreviated: ['p√ºhap.', 'esmasp.', 'teisip.', 'kolmap.', 'neljap.', 'reede.', 'laup.'],
  wide: ['p√ºhap√§ev', 'esmasp√§ev', 'teisip√§ev', 'kolmap√§ev', 'neljap√§ev', 'reede', 'laup√§ev']
};
var et_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesk√∂√∂',
    noon: 'keskp√§ev',
    morning: 'hommik',
    afternoon: 'p√§rastl√µuna',
    evening: '√µhtu',
    night: '√∂√∂'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesk√∂√∂',
    noon: 'keskp√§ev',
    morning: 'hommik',
    afternoon: 'p√§rastl√µuna',
    evening: '√µhtu',
    night: '√∂√∂'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesk√∂√∂',
    noon: 'keskp√§ev',
    morning: 'hommik',
    afternoon: 'p√§rastl√µuna',
    evening: '√µhtu',
    night: '√∂√∂'
  }
};
var et_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesk√∂√∂l',
    noon: 'keskp√§eval',
    morning: 'hommikul',
    afternoon: 'p√§rastl√µunal',
    evening: '√µhtul',
    night: '√∂√∂sel'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesk√∂√∂l',
    noon: 'keskp√§eval',
    morning: 'hommikul',
    afternoon: 'p√§rastl√µunal',
    evening: '√µhtul',
    night: '√∂√∂sel'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'kesk√∂√∂l',
    noon: 'keskp√§eval',
    morning: 'hommikul',
    afternoon: 'p√§rastl√µunal',
    evening: '√µhtul',
    night: '√∂√∂sel'
  }
};
var et_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var et_lib_localize_localize = {
  ordinalNumber: et_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: et_lib_localize_monthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_dayValues,
    defaultWidth: 'wide',
    formattingValues: et_lib_localize_dayValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: et_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const et_lib_localize = (et_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/match/index.js


var et_lib_match_matchOrdinalNumberPattern = /^\d+\./i;
var et_lib_match_parseOrdinalNumberPattern = /\d+/i;
var et_lib_match_matchEraPatterns = {
  narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  wide: /^(enne meie ajaarvamist|meie ajaarvamise j√§rgi|enne Kristust|p√§rast Kristust)/i
};
var et_lib_match_parseEraPatterns = {
  any: [/^e/i, /^(m|p)/i]
};
var et_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var et_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var et_lib_match_matchMonthPatterns = {
  narrow: /^[jvmasond]/i,
  abbreviated: /^(jaan|veebr|m√§rts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
  wide: /^(jaanuar|veebruar|m√§rts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i
};
var et_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^v/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^v/i, /^m√§r/i, /^ap/i, /^mai/i, /^juun/i, /^juul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var et_lib_match_matchDayPatterns = {
  narrow: /^[petknrl]/i,
  short: /^[petknrl]/i,
  abbreviated: /^(p√ºh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
  wide: /^(p√ºhap√§ev|esmasp√§ev|teisip√§ev|kolmap√§ev|neljap√§ev|reede|laup√§ev)/i
};
var et_lib_match_parseDayPatterns = {
  any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i]
};
var et_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|kesk√∂√∂l?|keskp√§ev(al)?|hommik(ul)?|p√§rastl√µunal?|√µhtul?|√∂√∂(sel)?)/i
};
var et_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^kesk√∂/i,
    noon: /^keskp/i,
    morning: /hommik/i,
    afternoon: /p√§rastl√µuna/i,
    evening: /√µhtu/i,
    night: /√∂√∂/i
  }
};
var et_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: et_lib_match_matchOrdinalNumberPattern,
    parsePattern: et_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: et_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: et_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: et_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: et_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: et_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const et_lib_match = (et_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Estonian locale.
 * @language Estonian
 * @iso-639-2 est
 * @author Priit Hansen [@HansenPriit]{@link https://github.com/priithansen}
 */
var et_locale = {
  code: 'et',
  formatDistance: et_lib_formatDistance,
  formatLong: et_lib_formatLong,
  formatRelative: et_lib_formatRelative,
  localize: et_lib_localize,
  match: et_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const et = (et_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/formatDistance/index.js
var eu_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'segundo bat baino gutxiago',
    other: '{{count}} segundo baino gutxiago'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundo'
  },
  halfAMinute: 'minutu erdi',
  lessThanXMinutes: {
    one: 'minutu bat baino gutxiago',
    other: '{{count}} minutu baino gutxiago'
  },
  xMinutes: {
    one: '1 minutu',
    other: '{{count}} minutu'
  },
  aboutXHours: {
    one: '1 ordu gutxi gorabehera',
    other: '{{count}} ordu gutxi gorabehera'
  },
  xHours: {
    one: '1 ordu',
    other: '{{count}} ordu'
  },
  xDays: {
    one: '1 egun',
    other: '{{count}} egun'
  },
  aboutXWeeks: {
    one: 'aste 1 inguru',
    other: '{{count}} aste inguru'
  },
  xWeeks: {
    one: '1 aste',
    other: '{{count}} astean'
  },
  aboutXMonths: {
    one: '1 hilabete gutxi gorabehera',
    other: '{{count}} hilabete gutxi gorabehera'
  },
  xMonths: {
    one: '1 hilabete',
    other: '{{count}} hilabete'
  },
  aboutXYears: {
    one: '1 urte gutxi gorabehera',
    other: '{{count}} urte gutxi gorabehera'
  },
  xYears: {
    one: '1 urte',
    other: '{{count}} urte'
  },
  overXYears: {
    one: '1 urte baino gehiago',
    other: '{{count}} urte baino gehiago'
  },
  almostXYears: {
    one: 'ia 1 urte',
    other: 'ia {{count}} urte'
  }
};
var eu_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = eu_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'duela ' + result;
    }
  }
  return result;
};
/* harmony default export */ const eu_lib_formatDistance = (eu_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/formatLong/index.js

var eu_lib_formatLong_dateFormats = {
  full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
  long: "y'ko' MMMM'ren' d'a'",
  medium: 'y MMM d',
  short: 'yy/MM/dd'
};
var eu_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var eu_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'tan' {{time}}",
  long: "{{date}} 'tan' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var eu_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: eu_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: eu_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: eu_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const eu_lib_formatLong = (eu_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/formatRelative/index.js
var eu_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'joan den' eeee, LT",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: 'eeee, p',
  other: 'P'
};
var _lib_formatRelative_formatRelativeLocalePlural = {
  lastWeek: "'joan den' eeee, p",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: 'eeee, p',
  other: 'P'
};
var eu_lib_formatRelative_formatRelative = function formatRelative(token, date) {
  if (date.getUTCHours() !== 1) {
    return _lib_formatRelative_formatRelativeLocalePlural[token];
  }
  return eu_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const eu_lib_formatRelative = (eu_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/localize/index.js

var eu_lib_localize_eraValues = {
  narrow: ['k.a.', 'k.o.'],
  abbreviated: ['k.a.', 'k.o.'],
  wide: ['kristo aurretik', 'kristo ondoren']
};
var eu_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1H', '2H', '3H', '4H'],
  wide: ['1. hiruhilekoa', '2. hiruhilekoa', '3. hiruhilekoa', '4. hiruhilekoa']
};
var eu_lib_localize_monthValues = {
  narrow: ['u', 'o', 'm', 'a', 'm', 'e', 'u', 'a', 'i', 'u', 'a', 'a'],
  abbreviated: ['urt', 'ots', 'mar', 'api', 'mai', 'eka', 'uzt', 'abu', 'ira', 'urr', 'aza', 'abe'],
  wide: ['urtarrila', 'otsaila', 'martxoa', 'apirila', 'maiatza', 'ekaina', 'uztaila', 'abuztua', 'iraila', 'urria', 'azaroa', 'abendua']
};
var eu_lib_localize_dayValues = {
  narrow: ['i', 'a', 'a', 'a', 'o', 'o', 'l'],
  short: ['ig', 'al', 'as', 'az', 'og', 'or', 'lr'],
  abbreviated: ['iga', 'ast', 'ast', 'ast', 'ost', 'ost', 'lar'],
  wide: ['igandea', 'astelehena', 'asteartea', 'asteazkena', 'osteguna', 'ostirala', 'larunbata']
};
var eu_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'ge',
    noon: 'eg',
    morning: 'goiza',
    afternoon: 'arratsaldea',
    evening: 'arratsaldea',
    night: 'gaua'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goiza',
    afternoon: 'arratsaldea',
    evening: 'arratsaldea',
    night: 'gaua'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goiza',
    afternoon: 'arratsaldea',
    evening: 'arratsaldea',
    night: 'gaua'
  }
};
var eu_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'ge',
    noon: 'eg',
    morning: 'goizean',
    afternoon: 'arratsaldean',
    evening: 'arratsaldean',
    night: 'gauean'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goizean',
    afternoon: 'arratsaldean',
    evening: 'arratsaldean',
    night: 'gauean'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'gauerdia',
    noon: 'eguerdia',
    morning: 'goizean',
    afternoon: 'arratsaldean',
    evening: 'arratsaldean',
    night: 'gauean'
  }
};
var eu_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var eu_lib_localize_localize = {
  ordinalNumber: eu_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: eu_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const eu_lib_localize = (eu_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/match/index.js


var eu_lib_match_matchOrdinalNumberPattern = /^(\d+)(.)?/i;
var eu_lib_match_parseOrdinalNumberPattern = /\d+/i;
var eu_lib_match_matchEraPatterns = {
  narrow: /^(k.a.|k.o.)/i,
  abbreviated: /^(k.a.|k.o.)/i,
  wide: /^(kristo aurretik|kristo ondoren)/i
};
var eu_lib_match_parseEraPatterns = {
  narrow: [/^k.a./i, /^k.o./i],
  abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
  wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i]
};
var eu_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]H/i,
  wide: /^[1234](.)? hiruhilekoa/i
};
var eu_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var eu_lib_match_matchMonthPatterns = {
  narrow: /^[uomaei]/i,
  abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
  wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
};
var eu_lib_match_parseMonthPatterns = {
  narrow: [/^u/i, /^o/i, /^m/i, /^a/i, /^m/i, /^e/i, /^u/i, /^a/i, /^i/i, /^u/i, /^a/i, /^a/i],
  any: [/^urt/i, /^ots/i, /^mar/i, /^api/i, /^mai/i, /^eka/i, /^uzt/i, /^abu/i, /^ira/i, /^urr/i, /^aza/i, /^abe/i]
};
var eu_lib_match_matchDayPatterns = {
  narrow: /^[iaol]/i,
  short: /^(ig|al|as|az|og|or|lr)/i,
  abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
  wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
};
var eu_lib_match_parseDayPatterns = {
  narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
  short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
  abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],
  wide: [/^igandea/i, /^astelehena/i, /^asteartea/i, /^asteazkena/i, /^osteguna/i, /^ostirala/i, /^larunbata/i]
};
var eu_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
  any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
};
var eu_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^ge/i,
    noon: /^eg/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  },
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^gauerdia/i,
    noon: /^eguerdia/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  }
};
var eu_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: eu_lib_match_matchOrdinalNumberPattern,
    parsePattern: eu_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eu_lib_match_parseEraPatterns,
    defaultParseWidth: 'wide'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eu_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eu_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: eu_lib_match_parseDayPatterns,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: eu_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const eu_lib_match = (eu_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Basque locale.
 * @language Basque
 * @iso-639-2 eus
 * @author Jacob S√∂derblom [@JacobSoderblom]{@link https://github.com/JacobSoderblom}
 */
var eu_locale = {
  code: 'eu',
  formatDistance: eu_lib_formatDistance,
  formatLong: eu_lib_formatLong,
  formatRelative: eu_lib_formatRelative,
  localize: eu_lib_localize,
  match: eu_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const eu = (eu_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/formatDistance/index.js
var fa_IR_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '⁄©ŸÖÿ™ÿ± ÿßÿ≤ €å⁄© ÿ´ÿßŸÜ€åŸá',
    other: '⁄©ŸÖÿ™ÿ± ÿßÿ≤ {{count}} ÿ´ÿßŸÜ€åŸá'
  },
  xSeconds: {
    one: '1 ÿ´ÿßŸÜ€åŸá',
    other: '{{count}} ÿ´ÿßŸÜ€åŸá'
  },
  halfAMinute: 'ŸÜ€åŸÖ ÿØŸÇ€åŸÇŸá',
  lessThanXMinutes: {
    one: '⁄©ŸÖÿ™ÿ± ÿßÿ≤ €å⁄© ÿØŸÇ€åŸÇŸá',
    other: '⁄©ŸÖÿ™ÿ± ÿßÿ≤ {{count}} ÿØŸÇ€åŸÇŸá'
  },
  xMinutes: {
    one: '1 ÿØŸÇ€åŸÇŸá',
    other: '{{count}} ÿØŸÇ€åŸÇŸá'
  },
  aboutXHours: {
    one: 'ÿ≠ÿØŸàÿØ 1 ÿ≥ÿßÿπÿ™',
    other: 'ÿ≠ÿØŸàÿØ {{count}} ÿ≥ÿßÿπÿ™'
  },
  xHours: {
    one: '1 ÿ≥ÿßÿπÿ™',
    other: '{{count}} ÿ≥ÿßÿπÿ™'
  },
  xDays: {
    one: '1 ÿ±Ÿàÿ≤',
    other: '{{count}} ÿ±Ÿàÿ≤'
  },
  aboutXWeeks: {
    one: 'ÿ≠ÿØŸàÿØ 1 ŸáŸÅÿ™Ÿá',
    other: 'ÿ≠ÿØŸàÿØ {{count}} ŸáŸÅÿ™Ÿá'
  },
  xWeeks: {
    one: '1 ŸáŸÅÿ™Ÿá',
    other: '{{count}} ŸáŸÅÿ™Ÿá'
  },
  aboutXMonths: {
    one: 'ÿ≠ÿØŸàÿØ 1 ŸÖÿßŸá',
    other: 'ÿ≠ÿØŸàÿØ {{count}} ŸÖÿßŸá'
  },
  xMonths: {
    one: '1 ŸÖÿßŸá',
    other: '{{count}} ŸÖÿßŸá'
  },
  aboutXYears: {
    one: 'ÿ≠ÿØŸàÿØ 1 ÿ≥ÿßŸÑ',
    other: 'ÿ≠ÿØŸàÿØ {{count}} ÿ≥ÿßŸÑ'
  },
  xYears: {
    one: '1 ÿ≥ÿßŸÑ',
    other: '{{count}} ÿ≥ÿßŸÑ'
  },
  overXYears: {
    one: 'ÿ®€åÿ¥ÿ™ÿ± ÿßÿ≤ 1 ÿ≥ÿßŸÑ',
    other: 'ÿ®€åÿ¥ÿ™ÿ± ÿßÿ≤ {{count}} ÿ≥ÿßŸÑ'
  },
  almostXYears: {
    one: 'ŸÜÿ≤ÿØ€å⁄© 1 ÿ≥ÿßŸÑ',
    other: 'ŸÜÿ≤ÿØ€å⁄© {{count}} ÿ≥ÿßŸÑ'
  }
};
var fa_IR_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = fa_IR_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ÿØÿ± ' + result;
    } else {
      return result + ' ŸÇÿ®ŸÑ';
    }
  }
  return result;
};
/* harmony default export */ const fa_IR_lib_formatDistance = (fa_IR_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/formatLong/index.js

var fa_IR_lib_formatLong_dateFormats = {
  full: 'EEEE do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'yyyy/MM/dd'
};
var fa_IR_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var fa_IR_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿØÿ±' {{time}}",
  long: "{{date}} 'ÿØÿ±' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var fa_IR_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fa_IR_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fa_IR_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fa_IR_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const fa_IR_lib_formatLong = (fa_IR_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/formatRelative/index.js
var fa_IR_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '⁄Øÿ∞ÿ¥ÿ™Ÿá ÿØÿ±' p",
  yesterday: "'ÿØ€åÿ±Ÿàÿ≤ ÿØÿ±' p",
  today: "'ÿßŸÖÿ±Ÿàÿ≤ ÿØÿ±' p",
  tomorrow: "'ŸÅÿ±ÿØÿß ÿØÿ±' p",
  nextWeek: "eeee 'ÿØÿ±' p",
  other: 'P'
};
var fa_IR_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return fa_IR_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fa_IR_lib_formatRelative = (fa_IR_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/localize/index.js

var fa_IR_lib_localize_eraValues = {
  narrow: ['ŸÇ', 'ÿ®'],
  abbreviated: ['ŸÇ.ŸÖ.', 'ÿ®.ŸÖ.'],
  wide: ['ŸÇÿ®ŸÑ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ', 'ÿ®ÿπÿØ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ']
};
var fa_IR_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ÿ≥‚ÄåŸÖ1', 'ÿ≥‚ÄåŸÖ2', 'ÿ≥‚ÄåŸÖ3', 'ÿ≥‚ÄåŸÖ4'],
  wide: ['ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 1', 'ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 2', 'ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 3', 'ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 4']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var fa_IR_lib_localize_monthValues = {
  narrow: ['⁄ò', 'ŸÅ', 'ŸÖ', 'ÿ¢', 'ŸÖ', 'ÿ¨', 'ÿ¨', 'ÿ¢', 'ÿ≥', 'ÿß', 'ŸÜ', 'ÿØ'],
  abbreviated: ['⁄òÿßŸÜŸÄ', 'ŸÅŸàÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ¢Ÿæÿ±', 'ŸÖ€å', 'ÿ¨ŸàŸÜ', 'ÿ¨ŸàŸÑŸÄ', 'ÿ¢⁄ØŸà', 'ÿ≥Ÿæÿ™ŸÄ', 'ÿß⁄©ÿ™ŸÄ', 'ŸÜŸàÿßŸÖŸÄ', 'ÿØÿ≥ÿßŸÖŸÄ'],
  wide: ['⁄òÿßŸÜŸà€åŸá', 'ŸÅŸàÿ±€åŸá', 'ŸÖÿßÿ±ÿ≥', 'ÿ¢Ÿæÿ±€åŸÑ', 'ŸÖ€å', 'ÿ¨ŸàŸÜ', 'ÿ¨ŸàŸÑÿß€å', 'ÿ¢⁄ØŸàÿ≥ÿ™', 'ÿ≥Ÿæÿ™ÿßŸÖÿ®ÿ±', 'ÿß⁄©ÿ™ÿ®ÿ±', 'ŸÜŸàÿßŸÖÿ®ÿ±', 'ÿØÿ≥ÿßŸÖÿ®ÿ±']
};
var fa_IR_lib_localize_dayValues = {
  narrow: ['€å', 'ÿØ', 'ÿ≥', '⁄Ü', 'Ÿæ', 'ÿ¨', 'ÿ¥'],
  short: ['1ÿ¥', '2ÿ¥', '3ÿ¥', '4ÿ¥', '5ÿ¥', 'ÿ¨', 'ÿ¥'],
  abbreviated: ['€å⁄©ÿ¥ŸÜÿ®Ÿá', 'ÿØŸàÿ¥ŸÜÿ®Ÿá', 'ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá', '⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá', 'ŸæŸÜÿ¨ÿ¥ŸÜÿ®Ÿá', 'ÿ¨ŸÖÿπŸá', 'ÿ¥ŸÜÿ®Ÿá'],
  wide: ['€å⁄©ÿ¥ŸÜÿ®Ÿá', 'ÿØŸàÿ¥ŸÜÿ®Ÿá', 'ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá', '⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá', 'ŸæŸÜÿ¨ÿ¥ŸÜÿ®Ÿá', 'ÿ¨ŸÖÿπŸá', 'ÿ¥ŸÜÿ®Ÿá']
};
var fa_IR_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ŸÇ',
    pm: 'ÿ®',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ÿµ',
    afternoon: 'ÿ®.ÿ∏.',
    evening: 'ÿπ',
    night: 'ÿ¥'
  },
  abbreviated: {
    am: 'ŸÇ.ÿ∏.',
    pm: 'ÿ®.ÿ∏.',
    midnight: 'ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿ≠',
    afternoon: 'ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±',
    evening: 'ÿπÿµÿ±',
    night: 'ÿ¥ÿ®'
  },
  wide: {
    am: 'ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±',
    pm: 'ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±',
    midnight: 'ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿ≠',
    afternoon: 'ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±',
    evening: 'ÿπÿµÿ±',
    night: 'ÿ¥ÿ®'
  }
};
var fa_IR_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ŸÇ',
    pm: 'ÿ®',
    midnight: 'ŸÜ',
    noon: 'ÿ∏',
    morning: 'ÿµ',
    afternoon: 'ÿ®.ÿ∏.',
    evening: 'ÿπ',
    night: 'ÿ¥'
  },
  abbreviated: {
    am: 'ŸÇ.ÿ∏.',
    pm: 'ÿ®.ÿ∏.',
    midnight: 'ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿ≠',
    afternoon: 'ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±',
    evening: 'ÿπÿµÿ±',
    night: 'ÿ¥ÿ®'
  },
  wide: {
    am: 'ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±',
    pm: 'ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±',
    midnight: 'ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®',
    noon: 'ÿ∏Ÿáÿ±',
    morning: 'ÿµÿ®ÿ≠',
    afternoon: 'ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±',
    evening: 'ÿπÿµÿ±',
    night: 'ÿ¥ÿ®'
  }
};
var fa_IR_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var fa_IR_lib_localize_localize = {
  ordinalNumber: fa_IR_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: fa_IR_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const fa_IR_lib_localize = (fa_IR_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/match/index.js


var fa_IR_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var fa_IR_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fa_IR_lib_match_matchEraPatterns = {
  narrow: /^(ŸÇ|ÿ®)/i,
  abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ÿØ\.?\s?ŸÖ\.?|ŸÖ\.?\s?|ÿØ\.?\s?ŸÖ\.?)/i,
  wide: /^(ŸÇÿ®ŸÑ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßÿ≤ ÿØŸàÿ±ÿßŸÜ ŸÖÿ¥ÿ™ÿ±⁄©|ŸÖ€åŸÑÿßÿØ€å|ÿØŸàÿ±ÿßŸÜ ŸÖÿ¥ÿ™ÿ±⁄©|ÿ®ÿπÿØ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ)/i
};
var fa_IR_lib_match_parseEraPatterns = {
  any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
};
var fa_IR_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ÿ≥‚ÄåŸÖ[1234]/i,
  wide: /^ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá [1234]/i
};
var fa_IR_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fa_IR_lib_match_matchMonthPatterns = {
  narrow: /^[ÿ¨⁄òŸÅŸÖÿ¢ÿßŸÖÿßÿ≥ŸÜÿØ]/i,
  abbreviated: /^(ÿ¨ŸÜŸà|⁄òÿßŸÜŸÄ|⁄òÿßŸÜŸà€åŸá|ŸÅŸàÿ±€åŸá|ŸÅŸàÿ±|ŸÖÿßÿ±ÿ≥|ÿ¢Ÿàÿ±€åŸÑ|ÿ¢Ÿæÿ±|ŸÖŸá|ŸÖ€å|⁄òŸàÿ¶ŸÜ|ÿ¨ŸàŸÜ|ÿ¨ŸàŸÑ|ÿ¨ŸàŸÑŸÄ|⁄òŸàÿ¶€åŸá|ÿßŸàÿ™|ÿ¢⁄ØŸà|ÿ≥Ÿæÿ™ŸÖÿ®ÿ±|ÿ≥Ÿæÿ™ÿßŸÖÿ®ÿ±|ÿß⁄©ÿ™ÿ®ÿ±|ÿß⁄©ÿ™Ÿàÿ®ÿ±|ŸÜŸàÿßŸÖÿ®ÿ±|ŸÜŸàÿßŸÖŸÄ|ÿØÿ≥ÿßŸÖÿ®ÿ±|ÿØÿ≥ÿßŸÖŸÄ|ÿØÿ≥ŸÖ)/i,
  wide: /^(⁄òÿßŸÜŸà€åŸá|ÿ¨ŸÜŸàÿ±€å|ŸÅÿ®ÿ±Ÿàÿ±€å|ŸÅŸàÿ±€åŸá|ŸÖÿßÿ±⁄Ü|ŸÖÿßÿ±ÿ≥|ÿ¢Ÿæÿ±€åŸÑ|ÿßŸæÿ±€åŸÑ|ÿß€åŸæÿ±€åŸÑ|ÿ¢Ÿàÿ±€åŸÑ|ŸÖŸá|ŸÖ€å|⁄òŸàÿ¶ŸÜ|ÿ¨ŸàŸÜ|ÿ¨ŸàŸÑÿß€å|⁄òŸàÿ¶€åŸá|ÿ¢⁄Øÿ≥ÿ™|ÿß⁄Øÿ≥ÿ™|ÿ¢⁄ØŸàÿ≥ÿ™|ÿßŸàÿ™|ÿ≥Ÿæÿ™ŸÖÿ®ÿ±|ÿ≥Ÿæÿ™ÿßŸÖÿ®ÿ±|ÿß⁄©ÿ™ÿ®ÿ±|ÿß⁄©ÿ™Ÿàÿ®ÿ±|ŸÜŸàÿßŸÖÿ®ÿ±|ŸÜŸàŸÖÿ®ÿ±|ÿØÿ≥ÿßŸÖÿ®ÿ±|ÿØÿ≥ŸÖÿ®ÿ±)/i
};
var fa_IR_lib_match_parseMonthPatterns = {
  narrow: [/^(⁄ò|ÿ¨)/i, /^ŸÅ/i, /^ŸÖ/i, /^(ÿ¢|ÿß)/i, /^ŸÖ/i, /^(⁄ò|ÿ¨)/i, /^(ÿ¨|⁄ò)/i, /^(ÿ¢|ÿß)/i, /^ÿ≥/i, /^ÿß/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^⁄òÿß/i, /^ŸÅ/i, /^ŸÖÿß/i, /^ÿ¢Ÿæ/i, /^(ŸÖ€å|ŸÖŸá)/i, /^(⁄òŸàÿ¶ŸÜ|ÿ¨ŸàŸÜ)/i, /^(⁄òŸàÿ¶€å|ÿ¨ŸàŸÑ)/i, /^(ÿßŸàÿ™|ÿ¢⁄Ø)/i, /^ÿ≥/i, /^(ÿßŸà⁄©|ÿß⁄©)/i, /^ŸÜ/i, /^ÿØ/i]
};
var fa_IR_lib_match_matchDayPatterns = {
  narrow: /^[ÿ¥€åÿØÿ≥⁄ÜŸæÿ¨]/i,
  short: /^(ÿ¥|ÿ¨|1ÿ¥|2ÿ¥|3ÿ¥|4ÿ¥|5ÿ¥)/i,
  abbreviated: /^(€å⁄©ÿ¥ŸÜÿ®Ÿá|ÿØŸàÿ¥ŸÜÿ®Ÿá|ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá|⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá|ŸæŸÜÿ¨‚Äåÿ¥ŸÜÿ®Ÿá|ÿ¨ŸÖÿπŸá|ÿ¥ŸÜÿ®Ÿá)/i,
  wide: /^(€å⁄©ÿ¥ŸÜÿ®Ÿá|ÿØŸàÿ¥ŸÜÿ®Ÿá|ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá|⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá|ŸæŸÜÿ¨‚Äåÿ¥ŸÜÿ®Ÿá|ÿ¨ŸÖÿπŸá|ÿ¥ŸÜÿ®Ÿá)/i
};
var fa_IR_lib_match_parseDayPatterns = {
  narrow: [/^€å/i, /^ÿØŸà/i, /^ÿ≥/i, /^⁄Ü/i, /^Ÿæ/i, /^ÿ¨/i, /^ÿ¥/i],
  any: [/^(€å|1ÿ¥|€å⁄©ÿ¥ŸÜÿ®Ÿá)/i, /^(ÿØ|2ÿ¥|ÿØŸàÿ¥ŸÜÿ®Ÿá)/i, /^(ÿ≥|3ÿ¥|ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá)/i, /^(⁄Ü|4ÿ¥|⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá)/i, /^(Ÿæ|5ÿ¥|ŸæŸÜÿ¨ÿ¥ŸÜÿ®Ÿá)/i, /^(ÿ¨|ÿ¨ŸÖÿπŸá)/i, /^(ÿ¥|ÿ¥ŸÜÿ®Ÿá)/i]
};
var fa_IR_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ÿ®|ŸÇ|ŸÜ|ÿ∏|ÿµ|ÿ®.ÿ∏.|ÿπ|ÿ¥)/i,
  abbreviated: /^(ŸÇ.ÿ∏.|ÿ®.ÿ∏.|ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®|ÿ∏Ÿáÿ±|ÿµÿ®ÿ≠|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±|ÿπÿµÿ±|ÿ¥ÿ®)/i,
  wide: /^(ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±|ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®|ÿ∏Ÿáÿ±|ÿµÿ®ÿ≠|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±|ÿπÿµÿ±|ÿ¥ÿ®)/i
};
var fa_IR_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(ŸÇ|ŸÇ.ÿ∏.|ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±)/i,
    pm: /^(ÿ®|ÿ®.ÿ∏.|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±)/i,
    midnight: /^(‚ÄåŸÜ€åŸÖŸá‚Äåÿ¥ÿ®|ŸÜ)/i,
    noon: /^(ÿ∏|ÿ∏Ÿáÿ±)/i,
    morning: /(ÿµ|ÿµÿ®ÿ≠)/i,
    afternoon: /(ÿ®|ÿ®.ÿ∏.|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±)/i,
    evening: /(ÿπ|ÿπÿµÿ±)/i,
    night: /(ÿ¥|ÿ¥ÿ®)/i
  }
};
var fa_IR_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fa_IR_lib_match_matchOrdinalNumberPattern,
    parsePattern: fa_IR_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fa_IR_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fa_IR_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fa_IR_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fa_IR_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fa_IR_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const fa_IR_lib_match = (fa_IR_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Persian/Farsi locale (Iran).
 * @language Persian
 * @iso-639-2 ira
 * @author Morteza Ziyae [@mort3za]{@link https://github.com/mort3za}
 */
var fa_IR_locale = {
  code: 'fa-IR',
  formatDistance: fa_IR_lib_formatDistance,
  formatLong: fa_IR_lib_formatLong,
  formatRelative: fa_IR_lib_formatRelative,
  localize: fa_IR_lib_localize,
  match: fa_IR_lib_match,
  options: {
    weekStartsOn: 6 /* Saturday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const fa_IR = (fa_IR_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/formatDistance/index.js
function futureSeconds(text) {
  return text.replace(/sekuntia?/, 'sekunnin');
}
function futureMinutes(text) {
  return text.replace(/minuuttia?/, 'minuutin');
}
function futureHours(text) {
  return text.replace(/tuntia?/, 'tunnin');
}
function futureDays(text) {
  return text.replace(/p√§iv√§√§?/, 'p√§iv√§n');
}
function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, 'viikon');
}
function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');
}
function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, 'vuoden');
}
var fi_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'alle sekunti',
    other: 'alle {{count}} sekuntia',
    futureTense: futureSeconds
  },
  xSeconds: {
    one: 'sekunti',
    other: '{{count}} sekuntia',
    futureTense: futureSeconds
  },
  halfAMinute: {
    one: 'puoli minuuttia',
    other: 'puoli minuuttia',
    futureTense: function futureTense(_text) {
      return 'puolen minuutin';
    }
  },
  lessThanXMinutes: {
    one: 'alle minuutti',
    other: 'alle {{count}} minuuttia',
    futureTense: futureMinutes
  },
  xMinutes: {
    one: 'minuutti',
    other: '{{count}} minuuttia',
    futureTense: futureMinutes
  },
  aboutXHours: {
    one: 'noin tunti',
    other: 'noin {{count}} tuntia',
    futureTense: futureHours
  },
  xHours: {
    one: 'tunti',
    other: '{{count}} tuntia',
    futureTense: futureHours
  },
  xDays: {
    one: 'p√§iv√§',
    other: '{{count}} p√§iv√§√§',
    futureTense: futureDays
  },
  aboutXWeeks: {
    one: 'noin viikko',
    other: 'noin {{count}} viikkoa',
    futureTense: futureWeeks
  },
  xWeeks: {
    one: 'viikko',
    other: '{{count}} viikkoa',
    futureTense: futureWeeks
  },
  aboutXMonths: {
    one: 'noin kuukausi',
    other: 'noin {{count}} kuukautta',
    futureTense: futureMonths
  },
  xMonths: {
    one: 'kuukausi',
    other: '{{count}} kuukautta',
    futureTense: futureMonths
  },
  aboutXYears: {
    one: 'noin vuosi',
    other: 'noin {{count}} vuotta',
    futureTense: futureYears
  },
  xYears: {
    one: 'vuosi',
    other: '{{count}} vuotta',
    futureTense: futureYears
  },
  overXYears: {
    one: 'yli vuosi',
    other: 'yli {{count}} vuotta',
    futureTense: futureYears
  },
  almostXYears: {
    one: 'l√§hes vuosi',
    other: 'l√§hes {{count}} vuotta',
    futureTense: futureYears
  }
};
var fi_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var tokenValue = fi_lib_formatDistance_formatDistanceLocale[token];
  var result = count === 1 ? tokenValue.one : tokenValue.other.replace('{{count}}', String(count));
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return tokenValue.futureTense(result) + ' kuluttua';
    } else {
      return result + ' sitten';
    }
  }
  return result;
};
/* harmony default export */ const fi_lib_formatDistance = (fi_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/formatLong/index.js

var fi_lib_formatLong_dateFormats = {
  full: 'eeee d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'd.M.y'
};
var fi_lib_formatLong_timeFormats = {
  full: 'HH.mm.ss zzzz',
  long: 'HH.mm.ss z',
  medium: 'HH.mm.ss',
  short: 'HH.mm'
};
var fi_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'klo' {{time}}",
  long: "{{date}} 'klo' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var fi_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fi_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fi_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fi_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const fi_lib_formatLong = (fi_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/formatRelative/index.js
var fi_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'viime' eeee 'klo' p",
  yesterday: "'eilen klo' p",
  today: "'t√§n√§√§n klo' p",
  tomorrow: "'huomenna klo' p",
  nextWeek: "'ensi' eeee 'klo' p",
  other: 'P'
};
var fi_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return fi_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fi_lib_formatRelative = (fi_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/localize/index.js

var fi_lib_localize_eraValues = {
  narrow: ['eaa.', 'jaa.'],
  abbreviated: ['eaa.', 'jaa.'],
  wide: ['ennen ajanlaskun alkua', 'j√§lkeen ajanlaskun alun']
};
var fi_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartaali', '2. kvartaali', '3. kvartaali', '4. kvartaali']
};
var fi_lib_localize_monthValues = {
  narrow: ['T', 'H', 'M', 'H', 'T', 'K', 'H', 'E', 'S', 'L', 'M', 'J'],
  abbreviated: ['tammi', 'helmi', 'maalis', 'huhti', 'touko', 'kes√§', 'hein√§', 'elo', 'syys', 'loka', 'marras', 'joulu'],
  wide: ['tammikuu', 'helmikuu', 'maaliskuu', 'huhtikuu', 'toukokuu', 'kes√§kuu', 'hein√§kuu', 'elokuu', 'syyskuu', 'lokakuu', 'marraskuu', 'joulukuu']
};
var fi_lib_localize_formattingMonthValues = {
  narrow: fi_lib_localize_monthValues.narrow,
  abbreviated: fi_lib_localize_monthValues.abbreviated,
  wide: ['tammikuuta', 'helmikuuta', 'maaliskuuta', 'huhtikuuta', 'toukokuuta', 'kes√§kuuta', 'hein√§kuuta', 'elokuuta', 'syyskuuta', 'lokakuuta', 'marraskuuta', 'joulukuuta']
};
var fi_lib_localize_dayValues = {
  narrow: ['S', 'M', 'T', 'K', 'T', 'P', 'L'],
  short: ['su', 'ma', 'ti', 'ke', 'to', 'pe', 'la'],
  abbreviated: ['sunn.', 'maan.', 'tiis.', 'kesk.', 'torst.', 'perj.', 'la'],
  wide: ['sunnuntai', 'maanantai', 'tiistai', 'keskiviikko', 'torstai', 'perjantai', 'lauantai']
};
var formattingDayValues = {
  narrow: fi_lib_localize_dayValues.narrow,
  short: fi_lib_localize_dayValues.short,
  abbreviated: fi_lib_localize_dayValues.abbreviated,
  wide: ['sunnuntaina', 'maanantaina', 'tiistaina', 'keskiviikkona', 'torstaina', 'perjantaina', 'lauantaina']
};
var fi_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiy√∂',
    noon: 'keskip√§iv√§',
    morning: 'ap',
    afternoon: 'ip',
    evening: 'illalla',
    night: 'y√∂ll√§'
  },
  abbreviated: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiy√∂',
    noon: 'keskip√§iv√§',
    morning: 'ap',
    afternoon: 'ip',
    evening: 'illalla',
    night: 'y√∂ll√§'
  },
  wide: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiy√∂ll√§',
    noon: 'keskip√§iv√§ll√§',
    morning: 'aamup√§iv√§ll√§',
    afternoon: 'iltap√§iv√§ll√§',
    evening: 'illalla',
    night: 'y√∂ll√§'
  }
};
var fi_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var fi_lib_localize_localize = {
  ordinalNumber: fi_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: fi_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_dayValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const fi_lib_localize = (fi_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/match/index.js


var fi_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)/i;
var fi_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fi_lib_match_matchEraPatterns = {
  narrow: /^(e|j)/i,
  abbreviated: /^(eaa.|jaa.)/i,
  wide: /^(ennen ajanlaskun alkua|j√§lkeen ajanlaskun alun)/i
};
var fi_lib_match_parseEraPatterns = {
  any: [/^e/i, /^j/i]
};
var fi_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\.? kvartaali/i
};
var fi_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fi_lib_match_matchMonthPatterns = {
  narrow: /^[thmkeslj]/i,
  abbreviated: /^(tammi|helmi|maalis|huhti|touko|kes√§|hein√§|elo|syys|loka|marras|joulu)/i,
  wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kes√§kuu|hein√§kuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
};
var fi_lib_match_parseMonthPatterns = {
  narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
  any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
};
var fi_lib_match_matchDayPatterns = {
  narrow: /^[smtkpl]/i,
  short: /^(su|ma|ti|ke|to|pe|la)/i,
  abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
  wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
};
var fi_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
};
var fi_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ap|ip|keskiy√∂|keskip√§iv√§|aamup√§iv√§ll√§|iltap√§iv√§ll√§|illalla|y√∂ll√§)/i,
  any: /^(ap|ip|keskiy√∂ll√§|keskip√§iv√§ll√§|aamup√§iv√§ll√§|iltap√§iv√§ll√§|illalla|y√∂ll√§)/i
};
var fi_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ap/i,
    pm: /^ip/i,
    midnight: /^keskiy√∂/i,
    noon: /^keskip√§iv√§/i,
    morning: /aamup√§iv√§ll√§/i,
    afternoon: /iltap√§iv√§ll√§/i,
    evening: /illalla/i,
    night: /y√∂ll√§/i
  }
};
var fi_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fi_lib_match_matchOrdinalNumberPattern,
    parsePattern: fi_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fi_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fi_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fi_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fi_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: fi_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const fi_lib_match = (fi_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Finnish locale.
 * @language Finnish
 * @iso-639-2 fin
 * @author Pyry-Samuli Lahti [@Pyppe]{@link https://github.com/Pyppe}
 * @author Edo Rivai [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Samu Juvonen [@sjuvonen]{@link https://github.com/sjuvonen}
 */
var fi_locale = {
  code: 'fi',
  formatDistance: fi_lib_formatDistance,
  formatLong: fi_lib_formatLong,
  formatRelative: fi_lib_formatRelative,
  localize: fi_lib_localize,
  match: fi_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fi = (fi_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/formatDistance/index.js
var fr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'moins d‚Äôune seconde',
    other: 'moins de {{count}} secondes'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} secondes'
  },
  halfAMinute: '30 secondes',
  lessThanXMinutes: {
    one: 'moins d‚Äôune minute',
    other: 'moins de {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'environ 1 heure',
    other: 'environ {{count}} heures'
  },
  xHours: {
    one: '1 heure',
    other: '{{count}} heures'
  },
  xDays: {
    one: '1 jour',
    other: '{{count}} jours'
  },
  aboutXWeeks: {
    one: 'environ 1 semaine',
    other: 'environ {{count}} semaines'
  },
  xWeeks: {
    one: '1 semaine',
    other: '{{count}} semaines'
  },
  aboutXMonths: {
    one: 'environ 1 mois',
    other: 'environ {{count}} mois'
  },
  xMonths: {
    one: '1 mois',
    other: '{{count}} mois'
  },
  aboutXYears: {
    one: 'environ 1 an',
    other: 'environ {{count}} ans'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ans'
  },
  overXYears: {
    one: 'plus d‚Äôun an',
    other: 'plus de {{count}} ans'
  },
  almostXYears: {
    one: 'presqu‚Äôun an',
    other: 'presque {{count}} ans'
  }
};
var fr_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var form = fr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof form === 'string') {
    result = form;
  } else if (count === 1) {
    result = form.one;
  } else {
    result = form.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'dans ' + result;
    } else {
      return 'il y a ' + result;
    }
  }
  return result;
};
/* harmony default export */ const fr_lib_formatDistance = (fr_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/formatLong/index.js

var fr_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var fr_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var fr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '√†' {{time}}",
  long: "{{date}} '√†' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var fr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const fr_lib_formatLong = (fr_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/formatRelative/index.js
var fr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'dernier √†' p",
  yesterday: "'hier √†' p",
  today: "'aujourd‚Äôhui √†' p",
  tomorrow: "'demain √†' p'",
  nextWeek: "eeee 'prochain √†' p",
  other: 'P'
};
var fr_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return fr_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fr_lib_formatRelative = (fr_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/localize/index.js

var fr_lib_localize_eraValues = {
  narrow: ['av. J.-C', 'ap. J.-C'],
  abbreviated: ['av. J.-C', 'ap. J.-C'],
  wide: ['avant J√©sus-Christ', 'apr√®s J√©sus-Christ']
};
var fr_lib_localize_quarterValues = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1er trim.', '2√®me trim.', '3√®me trim.', '4√®me trim.'],
  wide: ['1er trimestre', '2√®me trimestre', '3√®me trimestre', '4√®me trimestre']
};
var fr_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'f√©vr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'ao√ªt', 'sept.', 'oct.', 'nov.', 'd√©c.'],
  wide: ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre']
};
var fr_lib_localize_dayValues = {
  narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  short: ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'],
  abbreviated: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
  wide: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
};
var fr_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'mat.',
    afternoon: 'ap.m.',
    evening: 'soir',
    night: 'mat.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'matin',
    afternoon: 'apr√®s-midi',
    evening: 'soir',
    night: 'matin'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'du matin',
    afternoon: 'de l‚Äôapr√®s-midi',
    evening: 'du soir',
    night: 'du matin'
  }
};
var fr_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (number === 0) return '0';
  var feminineUnits = ['year', 'week', 'hour', 'minute', 'second'];
  var suffix;
  if (number === 1) {
    suffix = unit && feminineUnits.includes(unit) ? '√®re' : 'er';
  } else {
    suffix = '√®me';
  }
  return number + suffix;
};
var fr_lib_localize_localize = {
  ordinalNumber: fr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const fr_lib_localize = (fr_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/match/index.js


var fr_lib_match_matchOrdinalNumberPattern = /^(\d+)(i√®me|√®re|√®me|er|e)?/i;
var fr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fr_lib_match_matchEraPatterns = {
  narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
  abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(avant J√©sus-Christ|apr√®s J√©sus-Christ)/i
};
var fr_lib_match_parseEraPatterns = {
  any: [/^av/i, /^ap/i]
};
var fr_lib_match_matchQuarterPatterns = {
  narrow: /^T?[1234]/i,
  abbreviated: /^[1234](er|√®me|e)? trim\.?/i,
  wide: /^[1234](er|√®me|e)? trimestre/i
};
var fr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fr_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|f√©vr|mars|avr|mai|juin|juill|juil|ao√ªt|sept|oct|nov|d√©c)\.?/i,
  wide: /^(janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)/i
};
var fr_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var fr_lib_match_matchDayPatterns = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|lu|ma|me|je|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
  wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
};
var fr_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
};
var fr_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
  any: /^([ap]\.?\s?m\.?|du matin|de l'apr√®s[-\s]midi|du soir|de la nuit)/i
};
var fr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /soir/i,
    night: /nuit/i
  }
};
var fr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fr_lib_match_matchOrdinalNumberPattern,
    parsePattern: fr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fr_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fr_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fr_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fr_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: fr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const fr_lib_match = (fr_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary French locale.
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author Fran√ßois B [@fbonzon]{@link https://github.com/fbonzon}
 */
var fr_locale = {
  code: 'fr',
  formatDistance: fr_lib_formatDistance,
  formatLong: fr_lib_formatLong,
  formatRelative: fr_lib_formatRelative,
  localize: fr_lib_localize,
  match: fr_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fr = (fr_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CA/_lib/formatLong/index.js

var fr_CA_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'yy-MM-dd'
};
var fr_CA_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var fr_CA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '√†' {{time}}",
  long: "{{date}} '√†' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var fr_CA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CA_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CA_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CA_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const fr_CA_lib_formatLong = (fr_CA_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CA/index.js
// Same as fr




// Unique for fr-CA

/**
 * @type {Locale}
 * @category Locales
 * @summary French locale (Canada).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author Fran√ßois B [@fbonzon]{@link https://github.com/fbonzon}
 * @author Gabriele Petrioli [@gpetrioli]{@link https://github.com/gpetrioli}
 */
var fr_CA_locale = {
  code: 'fr-CA',
  formatDistance: fr_lib_formatDistance,
  formatLong: fr_CA_lib_formatLong,
  formatRelative: fr_lib_formatRelative,
  localize: fr_lib_localize,
  match: fr_lib_match,
  // Unique for fr-CA
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const fr_CA = (fr_CA_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CH/_lib/formatLong/index.js

var fr_CH_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.y'
};
var fr_CH_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var fr_CH_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '√†' {{time}}",
  long: "{{date}} '√†' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var fr_CH_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CH_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CH_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CH_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const fr_CH_lib_formatLong = (fr_CH_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CH/_lib/formatRelative/index.js
var fr_CH_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'la semaine derni√®re √†' p",
  yesterday: "'hier √†' p",
  today: "'aujourd‚Äôhui √†' p",
  tomorrow: "'demain √†' p'",
  nextWeek: "eeee 'la semaine prochaine √†' p",
  other: 'P'
};
var fr_CH_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return fr_CH_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fr_CH_lib_formatRelative = (fr_CH_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CH/index.js
// Same as fr



// Unique for fr-CH


/**
 * @type {Locale}
 * @category Locales
 * @summary French locale (Switzerland).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author Fran√ßois B [@fbonzon]{@link https://github.com/fbonzon}
 * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
 * @author Alex Hoeing [@dcbn]{@link https://github.com/dcbn}
 */
var fr_CH_locale = {
  code: 'fr-CH',
  formatDistance: fr_lib_formatDistance,
  formatLong: fr_CH_lib_formatLong,
  formatRelative: fr_CH_lib_formatRelative,
  localize: fr_lib_localize,
  match: fr_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fr_CH = (fr_CH_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/formatDistance/index.js
var fy_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'minder as 1 sekonde',
    other: 'minder as {{count}} sekonden'
  },
  xSeconds: {
    one: '1 sekonde',
    other: '{{count}} sekonden'
  },
  halfAMinute: 'oardel min√∫t',
  lessThanXMinutes: {
    one: 'minder as 1 min√∫t',
    other: 'minder as {{count}} minuten'
  },
  xMinutes: {
    one: '1 min√∫t',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'sawat 1 oere',
    other: 'sawat {{count}} oere'
  },
  xHours: {
    one: '1 oere',
    other: '{{count}} oere'
  },
  xDays: {
    one: '1 dei',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'sawat 1 wike',
    other: 'sawat {{count}} wiken'
  },
  xWeeks: {
    one: '1 wike',
    other: '{{count}} wiken'
  },
  aboutXMonths: {
    one: 'sawat 1 moanne',
    other: 'sawat {{count}} moannen'
  },
  xMonths: {
    one: '1 moanne',
    other: '{{count}} moannen'
  },
  aboutXYears: {
    one: 'sawat 1 jier',
    other: 'sawat {{count}} jier'
  },
  xYears: {
    one: '1 jier',
    other: '{{count}} jier'
  },
  overXYears: {
    one: 'mear as 1 jier',
    other: 'mear as {{count}}s jier'
  },
  almostXYears: {
    one: 'hast 1 jier',
    other: 'hast {{count}} jier'
  }
};
var fy_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = fy_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'oer ' + result;
    } else {
      return result + ' lyn';
    }
  }
  return result;
};
/* harmony default export */ const fy_lib_formatDistance = (fy_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/formatLong/index.js

var fy_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd-MM-y'
};
var fy_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var fy_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var fy_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fy_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fy_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fy_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const fy_lib_formatLong = (fy_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/formatRelative/index.js
var fy_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'√¥fr√ªne' eeee 'om' p",
  yesterday: "'juster om' p",
  today: "'hjoed om' p",
  tomorrow: "'moarn om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var fy_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return fy_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fy_lib_formatRelative = (fy_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/localize/index.js

var fy_lib_localize_eraValues = {
  narrow: ['f.K.', 'n.K.'],
  abbreviated: ['f.Kr.', 'n.Kr.'],
  wide: ['foar Kristus', 'nei Kristus']
};
var fy_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e fearnsjier', '2e fearnsjier', '3e fearnsjier', '4e fearnsjier']
};
var fy_lib_localize_monthValues = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mai.', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['jannewaris', 'febrewaris', 'maart', 'april', 'maaie', 'juny', 'july', 'augustus', 'septimber', 'oktober', 'novimber', 'desimber']
};
var fy_lib_localize_dayValues = {
  narrow: ['s', 'm', 't', 'w', 't', 'f', 's'],
  short: ['si', 'mo', 'ti', 'wo', 'to', 'fr', 'so'],
  abbreviated: ['snein', 'moa', 'tii', 'woa', 'ton', 'fre', 'sneon'],
  wide: ['snein', 'moandei', 'tiisdei', 'woansdei', 'tongersdei', 'freed', 'sneon']
};
var fy_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'middei',
    morning: 'moarns',
    afternoon: 'middeis',
    evening: 'j√ªns',
    night: 'nachts'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'middei',
    morning: 'moarns',
    afternoon: 'middeis',
    evening: 'j√ªns',
    night: 'nachts'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'middei',
    morning: 'moarns',
    afternoon: 'middeis',
    evening: 'j√ªns',
    night: 'nachts'
  }
};
var fy_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'e';
};
var fy_lib_localize_localize = {
  ordinalNumber: fy_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const fy_lib_localize = (fy_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/match/index.js


var fy_lib_match_matchOrdinalNumberPattern = /^(\d+)e?/i;
var fy_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fy_lib_match_matchEraPatterns = {
  narrow: /^([fn]\.? ?K\.?)/,
  abbreviated: /^([fn]\. ?Kr\.?)/,
  wide: /^((foar|nei) Kristus)/
};
var fy_lib_match_parseEraPatterns = {
  any: [/^f/, /^n/]
};
var fy_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e fearnsjier/i
};
var fy_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fy_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mai.|jun.|jul.|aug.|sep.|okt.|nov.|des.)/i,
  wide: /^(jannewaris|febrewaris|maart|april|maaie|juny|july|augustus|septimber|oktober|novimber|desimber)/i
};
var fy_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^des/i]
};
var fy_lib_match_matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(si|mo|ti|wo|to|fr|so)/i,
  abbreviated: /^(snein|moa|tii|woa|ton|fre|sneon)/i,
  wide: /^(snein|moandei|tiisdei|woansdei|tongersdei|freed|sneon)/i
};
var fy_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^sn/i, /^mo/i, /^ti/i, /^wo/i, /^to/i, /^fr/i, /^sn/i]
};
var fy_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|middernacht|middeis|moarns|middei|j√ªns|nachts)/i
};
var fy_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^middei/i,
    morning: /moarns/i,
    afternoon: /^middeis/i,
    evening: /j√ªns/i,
    night: /nachts/i
  }
};
var fy_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fy_lib_match_matchOrdinalNumberPattern,
    parsePattern: fy_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fy_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fy_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fy_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: fy_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: fy_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const fy_lib_match = (fy_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Western Frisian locale (Netherlands).
 * @language West Frisian
 * @iso-639-2 fry
 * @author Damon Asberg [@damon02]{@link https://github.com/damon02}
 */
var fy_locale = {
  code: 'fy',
  formatDistance: fy_lib_formatDistance,
  formatLong: fy_lib_formatLong,
  formatRelative: fy_lib_formatRelative,
  localize: fy_lib_localize,
  match: fy_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fy = (fy_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/formatDistance/index.js
var gd_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'nas lugha na diog',
    other: 'nas lugha na {{count}} diogan'
  },
  xSeconds: {
    one: '1 diog',
    two: '2 dhiog',
    twenty: '20 diog',
    other: '{{count}} diogan'
  },
  halfAMinute: 'leth mhionaid',
  lessThanXMinutes: {
    one: 'nas lugha na mionaid',
    other: 'nas lugha na {{count}} mionaidean'
  },
  xMinutes: {
    one: '1 mionaid',
    two: '2 mhionaid',
    twenty: '20 mionaid',
    other: '{{count}} mionaidean'
  },
  aboutXHours: {
    one: 'mu uair de th√¨de',
    other: 'mu {{count}} uairean de th√¨de'
  },
  xHours: {
    one: '1 uair de th√¨de',
    two: '2 uair de th√¨de',
    twenty: '20 uair de th√¨de',
    other: '{{count}} uairean de th√¨de'
  },
  xDays: {
    one: '1 l√†',
    other: '{{count}} l√†'
  },
  aboutXWeeks: {
    one: 'mu 1 seachdain',
    other: 'mu {{count}} seachdainean'
  },
  xWeeks: {
    one: '1 seachdain',
    other: '{{count}} seachdainean'
  },
  aboutXMonths: {
    one: 'mu mh√¨os',
    other: 'mu {{count}} m√¨osan'
  },
  xMonths: {
    one: '1 m√¨os',
    other: '{{count}} m√¨osan'
  },
  aboutXYears: {
    one: 'mu bhliadhna',
    other: 'mu {{count}} bliadhnaichean'
  },
  xYears: {
    one: '1 bhliadhna',
    other: '{{count}} bliadhna'
  },
  overXYears: {
    one: 'c√≤rr is bliadhna',
    other: 'c√≤rr is {{count}} bliadhnaichean'
  },
  almostXYears: {
    one: 'cha mh√≤r bliadhna',
    other: 'cha mh√≤r {{count}} bliadhnaichean'
  }
};
var gd_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = gd_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else if (count === 20 && !!tokenValue.twenty) {
    result = tokenValue.twenty;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'ann an ' + result;
    } else {
      return 'o chionn ' + result;
    }
  }
  return result;
};
/* harmony default export */ const gd_lib_formatDistance = (gd_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/formatLong/index.js

var gd_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var gd_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var gd_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'aig' {{time}}",
  long: "{{date}} 'aig' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var gd_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: gd_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: gd_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: gd_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const gd_lib_formatLong = (gd_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/formatRelative/index.js
var gd_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'mu dheireadh' eeee 'aig' p",
  //FIX
  yesterday: "'an-d√® aig' p",
  today: "'an-diugh aig' p",
  tomorrow: "'a-m√†ireach aig' p",
  nextWeek: "eeee 'aig' p",
  other: 'P'
};
var gd_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return gd_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const gd_lib_formatRelative = (gd_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/localize/index.js

var gd_lib_localize_eraValues = {
  narrow: ['R', 'A'],
  abbreviated: ['RC', 'AD'],
  wide: ['ro Chr√¨osta', 'anno domini']
};
var gd_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['C1', 'C2', 'C3', 'C4'],
  wide: ["a' chiad chairteal", 'an d√†rna cairteal', 'an treas cairteal', 'an ceathramh cairteal']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var gd_lib_localize_monthValues = {
  narrow: ['F', 'G', 'M', 'G', 'C', '√í', 'I', 'L', 'S', 'D', 'S', 'D'],
  abbreviated: ['Faoi', 'Gear', 'M√†rt', 'Gibl', 'C√®it', '√ígmh', 'Iuch', 'L√πn', 'Sult', 'D√†mh', 'Samh', 'D√πbh'],
  wide: ['Am Faoilleach', 'An Gearran', 'Am M√†rt', 'An Giblean', 'An C√®itean', 'An t-√ígmhios', 'An t-Iuchar', 'An L√πnastal', 'An t-Sultain', 'An D√†mhair', 'An t-Samhain', 'An D√πbhlachd']
};
var gd_lib_localize_dayValues = {
  narrow: ['D', 'L', 'M', 'C', 'A', 'H', 'S'],
  short: ['D√≤', 'Lu', 'M√†', 'Ci', 'Ar', 'Ha', 'Sa'],
  abbreviated: ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
  wide: ['Did√≤mhnaich', 'Diluain', 'Dim√†irt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne']
};
var gd_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'm',
    pm: 'f',
    midnight: 'm.o.',
    noon: 'm.l.',
    morning: 'madainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'oidhche'
  },
  abbreviated: {
    am: 'M.',
    pm: 'F.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan l√†',
    morning: 'madainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'oidhche'
  },
  wide: {
    am: 'm.',
    pm: 'f.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan l√†',
    morning: 'madainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'oidhche'
  }
};
var gd_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'm',
    pm: 'f',
    midnight: 'm.o.',
    noon: 'm.l.',
    morning: 'sa mhadainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'air an oidhche'
  },
  abbreviated: {
    am: 'M.',
    pm: 'F.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan l√†',
    morning: 'sa mhadainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'air an oidhche'
  },
  wide: {
    am: 'm.',
    pm: 'f.',
    midnight: 'meadhan oidhche',
    noon: 'meadhan l√†',
    morning: 'sa mhadainn',
    afternoon: 'feasgar',
    evening: 'feasgar',
    night: 'air an oidhche'
  }
};
var gd_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'd';
      case 2:
        return number + 'na';
    }
  }
  if (rem100 === 12) {
    return number + 'na';
  }
  return number + 'mh';
};
var gd_lib_localize_localize = {
  ordinalNumber: gd_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: gd_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const gd_lib_localize = (gd_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/match/index.js


var gd_lib_match_matchOrdinalNumberPattern = /^(\d+)(d|na|tr|mh)?/i;
var gd_lib_match_parseOrdinalNumberPattern = /\d+/i;
var gd_lib_match_matchEraPatterns = {
  narrow: /^(r|a)/i,
  abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
  wide: /^(ro Chr√¨osta|ron aois choitchinn|anno domini|aois choitcheann)/i
};
var gd_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var gd_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^c[1234]/i,
  wide: /^[1234](cd|na|tr|mh)? cairteal/i
};
var gd_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var gd_lib_match_matchMonthPatterns = {
  narrow: /^[fgmc√≤ilsd]/i,
  abbreviated: /^(faoi|gear|m√†rt|gibl|c√®it|√≤gmh|iuch|l√πn|sult|d√†mh|samh|d√πbh)/i,
  wide: /^(am faoilleach|an gearran|am m√†rt|an giblean|an c√®itean|an t-√ígmhios|an t-Iuchar|an l√πnastal|an t-Sultain|an d√†mhair|an t-Samhain|an d√πbhlachd)/i
};
var gd_lib_match_parseMonthPatterns = {
  narrow: [/^f/i, /^g/i, /^m/i, /^g/i, /^c/i, /^√≤/i, /^i/i, /^l/i, /^s/i, /^d/i, /^s/i, /^d/i],
  any: [/^fa/i, /^ge/i, /^m√†/i, /^gi/i, /^c/i, /^√≤/i, /^i/i, /^l/i, /^su/i, /^d/i, /^sa/i, /^d/i]
};
var gd_lib_match_matchDayPatterns = {
  narrow: /^[dlmcahs]/i,
  short: /^(d√≤|lu|m√†|ci|ar|ha|sa)/i,
  abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
  wide: /^(did√≤mhnaich|diluain|dim√†irt|diciadain|diardaoin|dihaoine|disathairne)/i
};
var gd_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
  any: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i]
};
var gd_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
  any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan l√†|(san|aig) (madainn|feasgar|feasgar|oidhche))/i
};
var gd_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^m/i,
    pm: /^f/i,
    midnight: /^meadhan oidhche/i,
    noon: /^meadhan l√†/i,
    morning: /sa mhadainn/i,
    afternoon: /feasgar/i,
    evening: /feasgar/i,
    night: /air an oidhche/i
  }
};
var gd_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: gd_lib_match_matchOrdinalNumberPattern,
    parsePattern: gd_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gd_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gd_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gd_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gd_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: gd_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const gd_lib_match = (gd_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Scottish Gaelic.
 * @language Scottish Gaelic
 * @iso-639-2 gla
 * @author Lee Driscoll [@leedriscoll]{@link https://github.com/leedriscoll}
 */
var gd_locale = {
  code: 'gd',
  formatDistance: gd_lib_formatDistance,
  formatLong: gd_lib_formatLong,
  formatRelative: gd_lib_formatRelative,
  localize: gd_lib_localize,
  match: gd_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const gd = (gd_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/formatDistance/index.js
var gl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'menos dun segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'medio minuto',
  lessThanXMinutes: {
    one: 'menos dun minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'arredor dunha hora',
    other: 'arredor de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 d√≠a',
    other: '{{count}} d√≠as'
  },
  aboutXWeeks: {
    one: 'arredor dunha semana',
    other: 'arredor de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'arredor de 1 mes',
    other: 'arredor de {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'arredor dun ano',
    other: 'arredor de {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'm√°is dun ano',
    other: 'm√°is de {{count}} anos'
  },
  almostXYears: {
    one: 'case un ano',
    other: 'case {{count}} anos'
  }
};
var gl_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = gl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'hai ' + result;
    }
  }
  return result;
};
/* harmony default export */ const gl_lib_formatDistance = (gl_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/formatLong/index.js

var gl_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var gl_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var gl_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '√°s' {{time}}",
  long: "{{date}} '√°s' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var gl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: gl_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: gl_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: gl_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const gl_lib_formatLong = (gl_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/formatRelative/index.js
var gl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'o' eeee 'pasado √°' LT",
  yesterday: "'onte √°' p",
  today: "'hoxe √°' p",
  tomorrow: "'ma√±√° √°' p",
  nextWeek: "eeee '√°' p",
  other: 'P'
};
var gl_lib_formatRelative_formatRelativeLocalePlural = {
  lastWeek: "'o' eeee 'pasado √°s' p",
  yesterday: "'onte √°s' p",
  today: "'hoxe √°s' p",
  tomorrow: "'ma√±√° √°s' p",
  nextWeek: "eeee '√°s' p",
  other: 'P'
};
var gl_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return gl_lib_formatRelative_formatRelativeLocalePlural[token];
  }
  return gl_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const gl_lib_formatRelative = (gl_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/localize/index.js

var gl_lib_localize_eraValues = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'despois de cristo']
};
var gl_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1¬∫ trimestre', '2¬∫ trimestre', '3¬∫ trimestre', '4¬∫ trimestre']
};
var gl_lib_localize_monthValues = {
  narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['xan', 'feb', 'mar', 'abr', 'mai', 'xun', 'xul', 'ago', 'set', 'out', 'nov', 'dec'],
  wide: ['xaneiro', 'febreiro', 'marzo', 'abril', 'maio', 'xu√±o', 'xullo', 'agosto', 'setembro', 'outubro', 'novembro', 'decembro']
};
var gl_lib_localize_dayValues = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['do', 'lu', 'ma', 'me', 'xo', 've', 'sa'],
  abbreviated: ['dom', 'lun', 'mar', 'mer', 'xov', 'ven', 'sab'],
  wide: ['domingo', 'luns', 'martes', 'm√©rcores', 'xoves', 'venres', 's√°bado']
};
var gl_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'ma√±√°',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoite',
    noon: 'mediod√≠a',
    morning: 'ma√±√°',
    afternoon: 'tarde',
    evening: 'tardi√±a',
    night: 'noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoite',
    noon: 'mediod√≠a',
    morning: 'ma√±√°',
    afternoon: 'tarde',
    evening: 'tardi√±a',
    night: 'noite'
  }
};
var gl_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'da ma√±√°',
    afternoon: 'da tarde',
    evening: 'da tardi√±a',
    night: 'da noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoite',
    noon: 'mediod√≠a',
    morning: 'da ma√±√°',
    afternoon: 'da tarde',
    evening: 'da tardi√±a',
    night: 'da noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoite',
    noon: 'mediod√≠a',
    morning: 'da ma√±√°',
    afternoon: 'da tarde',
    evening: 'da tardi√±a',
    night: 'da noite'
  }
};
var gl_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '¬∫';
};
var gl_lib_localize_localize = {
  ordinalNumber: gl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: gl_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const gl_lib_localize = (gl_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/match/index.js


var gl_lib_match_matchOrdinalNumberPattern = /^(\d+)(¬∫)?/i;
var gl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var gl_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era com[u√∫]n|despois de cristo|era com[u√∫]n)/i
};
var gl_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era com[u√∫]n)/i, /^(despois de cristo|era com[u√∫]n)/i]
};
var gl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](¬∫)? trimestre/i
};
var gl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var gl_lib_match_matchMonthPatterns = {
  narrow: /^[xfmasond]/i,
  abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
  wide: /^(xaneiro|febreiro|marzo|abril|maio|xu√±o|xullo|agosto|setembro|outubro|novembro|decembro)/i
};
var gl_lib_match_parseMonthPatterns = {
  narrow: [/^x/i, /^f/i, /^m/i, /^a/i, /^m/i, /^x/i, /^x/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xun/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i]
};
var gl_lib_match_matchDayPatterns = {
  narrow: /^[dlmxvs]/i,
  short: /^(do|lu|ma|me|xo|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
  wide: /^(domingo|luns|martes|m[e√©]rcores|xoves|venres|s[√°a]bado)/i
};
var gl_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i]
};
var gl_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(da|[a√°]s) (ma√±[a√°]|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|medianoite|mediod[i√≠]a|(da|[a√°]s) (ma√±[a√°]|tarde|noite))/i
};
var gl_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /ma√±[a√°]/i,
    afternoon: /tarde/i,
    evening: /tardi√±a/i,
    night: /noite/i
  }
};
var gl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: gl_lib_match_matchOrdinalNumberPattern,
    parsePattern: gl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gl_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gl_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gl_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gl_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: gl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const gl_lib_match = (gl_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Galician locale.
 * @language Galician
 * @iso-639-2 glg
 * @author Alberto Doval - Cocodin Technology[@cocodinTech]{@link https://github.com/cocodinTech}
 * @author Fidel Pita [@fidelpita]{@link https://github.com/fidelpita}
 */
var gl_locale = {
  code: 'gl',
  formatDistance: gl_lib_formatDistance,
  formatLong: gl_lib_formatLong,
  formatRelative: gl_lib_formatRelative,
  localize: gl_lib_localize,
  match: gl_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const gl = (gl_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/formatDistance/index.js
// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
var gu_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '‡™π‡™Æ‡™£‡™æ‡™Ç',
    // CLDR #1461
    other: '‚Äã‡™Ü‡™∂‡™∞‡´á {{count}} ‡™∏‡´á‡™ï‡™Ç‡™°'
  },
  xSeconds: {
    one: '1 ‡™∏‡´á‡™ï‡™Ç‡™°',
    other: '{{count}} ‡™∏‡´á‡™ï‡™Ç‡™°'
  },
  halfAMinute: '‡™Ö‡™°‡™ß‡´Ä ‡™Æ‡™ø‡™®‡™ø‡™ü',
  lessThanXMinutes: {
    one: '‡™Ü ‡™Æ‡™ø‡™®‡™ø‡™ü',
    // CLDR #1448
    other: '‚Äã‡™Ü‡™∂‡™∞‡´á {{count}} ‡™Æ‡™ø‡™®‡™ø‡™ü'
  },
  xMinutes: {
    one: '1 ‡™Æ‡™ø‡™®‡™ø‡™ü',
    other: '{{count}} ‡™Æ‡™ø‡™®‡™ø‡™ü'
  },
  aboutXHours: {
    one: '‚Äã‡™Ü‡™∂‡™∞‡´á 1 ‡™ï‡™≤‡™æ‡™ï',
    other: '‚Äã‡™Ü‡™∂‡™∞‡´á {{count}} ‡™ï‡™≤‡™æ‡™ï'
  },
  xHours: {
    one: '1 ‡™ï‡™≤‡™æ‡™ï',
    other: '{{count}} ‡™ï‡™≤‡™æ‡™ï'
  },
  xDays: {
    one: '1 ‡™¶‡™ø‡™µ‡™∏',
    other: '{{count}} ‡™¶‡™ø‡™µ‡™∏'
  },
  aboutXWeeks: {
    one: '‡™Ü‡™∂‡™∞‡´á 1 ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡´Å‡™Ç',
    other: '‡™Ü‡™∂‡™∞‡´á {{count}} ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡™æ'
  },
  xWeeks: {
    one: '1 ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡´Å‡™Ç',
    other: '{{count}} ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡™æ'
  },
  aboutXMonths: {
    one: '‡™Ü‡™∂‡™∞‡´á 1 ‡™Æ‡™π‡™ø‡™®‡´ã',
    other: '‡™Ü‡™∂‡™∞‡´á {{count}} ‡™Æ‡™π‡™ø‡™®‡™æ'
  },
  xMonths: {
    one: '1 ‡™Æ‡™π‡™ø‡™®‡´ã',
    other: '{{count}} ‡™Æ‡™π‡™ø‡™®‡™æ'
  },
  aboutXYears: {
    one: '‡™Ü‡™∂‡™∞‡´á 1 ‡™µ‡™∞‡´ç‡™∑',
    other: '‡™Ü‡™∂‡™∞‡´á {{count}} ‡™µ‡™∞‡´ç‡™∑'
  },
  xYears: {
    one: '1 ‡™µ‡™∞‡´ç‡™∑',
    other: '{{count}} ‡™µ‡™∞‡´ç‡™∑'
  },
  overXYears: {
    one: '1 ‡™µ‡™∞‡´ç‡™∑‡™•‡´Ä ‡™µ‡™ß‡´Å',
    other: '{{count}} ‡™µ‡™∞‡´ç‡™∑‡™•‡´Ä ‡™µ‡™ß‡´Å'
  },
  almostXYears: {
    one: '‡™≤‡™ó‡™≠‡™ó 1 ‡™µ‡™∞‡´ç‡™∑',
    other: '‡™≤‡™ó‡™≠‡™ó {{count}} ‡™µ‡™∞‡´ç‡™∑'
  }
};
var gu_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = gu_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '‡™Æ‡™æ‡™Ç';
    } else {
      return result + ' ‡™™‡™π‡´á‡™≤‡™æ‡™Ç';
    }
  }
  return result;
};
/* harmony default export */ const gu_lib_formatDistance = (gu_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/formatLong/index.js
 //Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
var gu_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM, y',
  // CLDR #1825
  long: 'd MMMM, y',
  // CLDR #1826
  medium: 'd MMM, y',
  // CLDR #1827
  short: 'd/M/yy' // CLDR #1828
};

var gu_lib_formatLong_timeFormats = {
  full: 'hh:mm:ss a zzzz',
  // CLDR #1829
  long: 'hh:mm:ss a z',
  // CLDR #1830
  medium: 'hh:mm:ss a',
  // CLDR #1831
  short: 'hh:mm a' // CLDR #1832
};

var gu_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  // CLDR #1833
  long: '{{date}} {{time}}',
  // CLDR #1834
  medium: '{{date}} {{time}}',
  // CLDR #1835
  short: '{{date}} {{time}}' // CLDR #1836
};

var gu_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: gu_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: gu_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: gu_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const gu_lib_formatLong = (gu_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/formatRelative/index.js
// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html

var gu_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‡™™‡™æ‡™õ‡™≤‡™æ' eeee p",
  // CLDR #1384
  yesterday: "'‡™ó‡™à‡™ï‡™æ‡™≤‡´á' p",
  // CLDR #1409
  today: "'‡™Ü‡™ú‡´á' p",
  // CLDR #1410
  tomorrow: "'‡™Ü‡™µ‡™§‡´Ä‡™ï‡™æ‡™≤‡´á' p",
  // CLDR #1411
  nextWeek: 'eeee p',
  // CLDR #1386
  other: 'P'
};
var gu_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return gu_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const gu_lib_formatRelative = (gu_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/localize/index.js
 // https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1621 - #1630
var gu_lib_localize_eraValues = {
  narrow: ['‡™à‡™∏‡™™‡´Ç', '‡™à‡™∏'],
  abbreviated: ['‡™à.‡™∏.‡™™‡´Ç‡™∞‡´ç‡™µ‡´á', '‡™à.‡™∏.'],
  wide: ['‡™à‡™∏‡™µ‡´Ä‡™∏‡™® ‡™™‡´Ç‡™∞‡´ç‡™µ‡´á', '‡™à‡™∏‡™µ‡´Ä‡™∏‡™®']
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1631 - #1654
var gu_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1‡™≤‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏', '2‡™ú‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏', '3‡™ú‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏', '4‡™•‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1655 - #1726
var gu_lib_localize_monthValues = {
  narrow: ['‡™ú‡™æ', '‡™´‡´á', '‡™Æ‡™æ', '‡™è', '‡™Æ‡´á', '‡™ú‡´Ç', '‡™ú‡´Å', '‡™ì', '‡™∏', '‡™ì', '‡™®', '‡™°‡™ø'],
  abbreviated: ['‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å', '‡™´‡´á‡™¨‡´ç‡™∞‡´Å', '‡™Æ‡™æ‡™∞‡´ç‡™ö', '‡™è‡™™‡´ç‡™∞‡™ø‡™≤', '‡™Æ‡´á', '‡™ú‡´Ç‡™®', '‡™ú‡´Å‡™≤‡™æ‡™à', '‡™ë‡™ó‡™∏‡´ç‡™ü', '‡™∏‡™™‡´ç‡™ü‡´á', '‡™ì‡™ï‡´ç‡™ü‡´ã', '‡™®‡™µ‡´á', '‡™°‡™ø‡™∏‡´á'],
  wide: ['‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å‡™Ü‡™∞‡´Ä', '‡™´‡´á‡™¨‡´ç‡™∞‡´Å‡™Ü‡™∞‡´Ä', '‡™Æ‡™æ‡™∞‡´ç‡™ö', '‡™è‡™™‡´ç‡™∞‡™ø‡™≤', '‡™Æ‡´á', '‡™ú‡´Ç‡™®', '‡™ú‡´Å‡™≤‡™æ‡™á', '‡™ì‡™ó‡™∏‡´ç‡™ü', '‡™∏‡™™‡´ç‡™ü‡´á‡™Æ‡´ç‡™¨‡™∞', '‡™ì‡™ï‡´ç‡™ü‡´ã‡™¨‡™∞', '‡™®‡™µ‡´á‡™Æ‡´ç‡™¨‡™∞', '‡™°‡™ø‡™∏‡´á‡™Æ‡´ç‡™¨‡™∞']
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1727 - #1768
var gu_lib_localize_dayValues = {
  narrow: ['‡™∞', '‡™∏‡´ã', '‡™Æ‡™Ç', '‡™¨‡´Å', '‡™ó‡´Å', '‡™∂‡´Å', '‡™∂'],
  short: ['‡™∞', '‡™∏‡´ã', '‡™Æ‡™Ç', '‡™¨‡´Å', '‡™ó‡´Å', '‡™∂‡´Å', '‡™∂'],
  abbreviated: ['‡™∞‡™µ‡™ø', '‡™∏‡´ã‡™Æ', '‡™Æ‡™Ç‡™ó‡™≥', '‡™¨‡´Å‡™ß', '‡™ó‡´Å‡™∞‡´Å', '‡™∂‡´Å‡™ï‡´ç‡™∞', '‡™∂‡™®‡™ø'],
  wide: ['‡™∞‡™µ‡™ø‡™µ‡™æ‡™∞' /* Sunday */, '‡™∏‡´ã‡™Æ‡™µ‡™æ‡™∞' /* Monday */, '‡™Æ‡™Ç‡™ó‡™≥‡™µ‡™æ‡™∞' /* Tuesday */, '‡™¨‡´Å‡™ß‡™µ‡™æ‡™∞' /* Wednesday */, '‡™ó‡´Å‡™∞‡´Å‡™µ‡™æ‡™∞' /* Thursday */, '‡™∂‡´Å‡™ï‡´ç‡™∞‡™µ‡™æ‡™∞' /* Friday */, '‡™∂‡™®‡™ø‡™µ‡™æ‡™∞' /* Saturday */]
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1783 - #1824
var gu_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: '‡™Æ.‡™∞‡™æ‡™§‡´ç‡™∞‡™ø',
    noon: '‡™¨.',
    morning: '‡™∏‡™µ‡™æ‡™∞‡´á',
    afternoon: '‡™¨‡™™‡´ã‡™∞‡´á',
    evening: '‡™∏‡™æ‡™Ç‡™ú‡´á',
    night: '‡™∞‡™æ‡™§‡´ç‡™∞‡´á'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '‚Äã‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø',
    noon: '‡™¨‡™™‡´ã‡™∞‡´á',
    morning: '‡™∏‡™µ‡™æ‡™∞‡´á',
    afternoon: '‡™¨‡™™‡´ã‡™∞‡´á',
    evening: '‡™∏‡™æ‡™Ç‡™ú‡´á',
    night: '‡™∞‡™æ‡™§‡´ç‡™∞‡´á'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: '‚Äã‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø',
    noon: '‡™¨‡™™‡´ã‡™∞‡´á',
    morning: '‡™∏‡™µ‡™æ‡™∞‡´á',
    afternoon: '‡™¨‡™™‡´ã‡™∞‡´á',
    evening: '‡™∏‡™æ‡™Ç‡™ú‡´á',
    night: '‡™∞‡™æ‡™§‡´ç‡™∞‡´á'
  }
};
var gu_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: '‡™Æ.‡™∞‡™æ‡™§‡´ç‡™∞‡™ø',
    noon: '‡™¨‡™™‡´ã‡™∞‡´á',
    morning: '‡™∏‡™µ‡™æ‡™∞‡´á',
    afternoon: '‡™¨‡™™‡´ã‡™∞‡´á',
    evening: '‡™∏‡™æ‡™Ç‡™ú‡´á',
    night: '‡™∞‡™æ‡™§‡´ç‡™∞‡´á'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø',
    noon: '‡™¨‡™™‡´ã‡™∞‡´á',
    morning: '‡™∏‡™µ‡™æ‡™∞‡´á',
    afternoon: '‡™¨‡™™‡´ã‡™∞‡´á',
    evening: '‡™∏‡™æ‡™Ç‡™ú‡´á',
    night: '‡™∞‡™æ‡™§‡´ç‡™∞‡´á'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: '‚Äã‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø',
    noon: '‡™¨‡™™‡´ã‡™∞‡´á',
    morning: '‡™∏‡™µ‡™æ‡™∞‡´á',
    afternoon: '‡™¨‡™™‡´ã‡™∞‡´á',
    evening: '‡™∏‡™æ‡™Ç‡™ú‡´á',
    night: '‡™∞‡™æ‡™§‡´ç‡™∞‡´á'
  }
};
var gu_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var gu_lib_localize_localize = {
  ordinalNumber: gu_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: gu_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const gu_lib_localize = (gu_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/match/index.js


var gu_lib_match_matchOrdinalNumberPattern = /^(\d+)(‡™≤|‡™ú|‡™•|‡™†‡´ç‡™†|‡™Æ)?/i;
var gu_lib_match_parseOrdinalNumberPattern = /\d+/i;
var gu_lib_match_matchEraPatterns = {
  narrow: /^(‡™à‡™∏‡™™‡´Ç|‡™à‡™∏)/i,
  abbreviated: /^(‡™à\.‡™∏\.‡™™‡´Ç‡™∞‡´ç‡™µ‡´á|‡™à\.‡™∏\.)/i,
  wide: /^(‡™à‡™∏‡™µ‡´Ä‡™∏‡™®\s‡™™‡´Ç‡™∞‡´ç‡™µ‡´á|‡™à‡™∏‡™µ‡´Ä‡™∏‡™®)/i
};
var gu_lib_match_parseEraPatterns = {
  any: [/^‡™à‡™∏‡™™‡´Ç/i, /^‡™à‡™∏/i]
};
var gu_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](‡™≤‡´ã|‡™ú‡´ã|‡™•‡´ã)? ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏/i
};
var gu_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var gu_lib_match_matchMonthPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[‡™ú‡™æ‡™´‡´á‡™Æ‡™æ‡™è‡™Æ‡´á‡™ú‡´Ç‡™ú‡´Å‡™ì‡™∏‡™ì‡™®‡™°‡™ø]/i,
  abbreviated: /^(‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å|‡™´‡´á‡™¨‡´ç‡™∞‡´Å|‡™Æ‡™æ‡™∞‡´ç‡™ö|‡™è‡™™‡´ç‡™∞‡™ø‡™≤|‡™Æ‡´á|‡™ú‡´Ç‡™®|‡™ú‡´Å‡™≤‡™æ‡™à|‡™ë‡™ó‡™∏‡´ç‡™ü|‡™∏‡™™‡´ç‡™ü‡´á|‡™ì‡™ï‡´ç‡™ü‡´ã|‡™®‡™µ‡´á|‡™°‡™ø‡™∏‡´á)/i,
  wide: /^(‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å‡™Ü‡™∞‡´Ä|‡™´‡´á‡™¨‡´ç‡™∞‡´Å‡™Ü‡™∞‡´Ä|‡™Æ‡™æ‡™∞‡´ç‡™ö|‡™è‡™™‡´ç‡™∞‡™ø‡™≤|‡™Æ‡´á|‡™ú‡´Ç‡™®|‡™ú‡´Å‡™≤‡™æ‡™á|‡™ì‡™ó‡™∏‡´ç‡™ü|‡™∏‡™™‡´ç‡™ü‡´á‡™Æ‡´ç‡™¨‡™∞|‡™ì‡™ï‡´ç‡™ü‡´ã‡™¨‡™∞|‡™®‡™µ‡´á‡™Æ‡´ç‡™¨‡™∞|‡™°‡™ø‡™∏‡´á‡™Æ‡´ç‡™¨‡™∞)/i
};
var gu_lib_match_parseMonthPatterns = {
  narrow: [/^‡™ú‡™æ/i, /^‡™´‡´á/i, /^‡™Æ‡™æ/i, /^‡™è/i, /^‡™Æ‡´á/i, /^‡™ú‡´Ç/i, /^‡™ú‡´Å/i, /^‡™ë‡™ó/i, /^‡™∏/i, /^‡™ì‡™ï‡´ç‡™ü‡´ã/i, /^‡™®/i, /^‡™°‡™ø/i],
  any: [/^‡™ú‡™æ/i, /^‡™´‡´á/i, /^‡™Æ‡™æ/i, /^‡™è/i, /^‡™Æ‡´á/i, /^‡™ú‡´Ç/i, /^‡™ú‡´Å/i, /^‡™ë‡™ó/i, /^‡™∏/i, /^‡™ì‡™ï‡´ç‡™ü‡´ã/i, /^‡™®/i, /^‡™°‡™ø/i]
};
var gu_lib_match_matchDayPatterns = {
  narrow: /^(‡™∞|‡™∏‡´ã|‡™Æ‡™Ç|‡™¨‡´Å|‡™ó‡´Å|‡™∂‡´Å|‡™∂)/i,
  short: /^(‡™∞|‡™∏‡´ã|‡™Æ‡™Ç|‡™¨‡´Å|‡™ó‡´Å|‡™∂‡´Å|‡™∂)/i,
  abbreviated: /^(‡™∞‡™µ‡™ø|‡™∏‡´ã‡™Æ|‡™Æ‡™Ç‡™ó‡™≥|‡™¨‡´Å‡™ß|‡™ó‡´Å‡™∞‡´Å|‡™∂‡´Å‡™ï‡´ç‡™∞|‡™∂‡™®‡™ø)/i,
  wide: /^(‡™∞‡™µ‡™ø‡™µ‡™æ‡™∞|‡™∏‡´ã‡™Æ‡™µ‡™æ‡™∞|‡™Æ‡™Ç‡™ó‡™≥‡™µ‡™æ‡™∞|‡™¨‡´Å‡™ß‡™µ‡™æ‡™∞|‡™ó‡´Å‡™∞‡´Å‡™µ‡™æ‡™∞|‡™∂‡´Å‡™ï‡´ç‡™∞‡™µ‡™æ‡™∞|‡™∂‡™®‡™ø‡™µ‡™æ‡™∞)/i
};
var gu_lib_match_parseDayPatterns = {
  narrow: [/^‡™∞/i, /^‡™∏‡´ã/i, /^‡™Æ‡™Ç/i, /^‡™¨‡´Å/i, /^‡™ó‡´Å/i, /^‡™∂‡´Å/i, /^‡™∂/i],
  any: [/^‡™∞/i, /^‡™∏‡´ã/i, /^‡™Æ‡™Ç/i, /^‡™¨‡´Å/i, /^‡™ó‡´Å/i, /^‡™∂‡´Å/i, /^‡™∂/i]
};
var gu_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|‡™Æ\.?|‡™∏|‡™¨|‡™∏‡™æ‡™Ç|‡™∞‡™æ)/i,
  any: /^(a|p|‡™Æ\.?|‡™∏|‡™¨|‡™∏‡™æ‡™Ç|‡™∞‡™æ)/i
};
var gu_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^‡™Æ\.?/i,
    noon: /^‡™¨/i,
    morning: /‡™∏/i,
    afternoon: /‡™¨/i,
    evening: /‡™∏‡™æ‡™Ç/i,
    night: /‡™∞‡™æ/i
  }
};
var gu_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: gu_lib_match_matchOrdinalNumberPattern,
    parsePattern: gu_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gu_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gu_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gu_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: gu_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: gu_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const gu_lib_match = (gu_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Gujarati locale (India).
 * @language Gujarati
 * @iso-639-2 guj
 * @author Manaday Mavani [@ManadayM]{@link https://github.com/manadaym}
 */
var gu_locale = {
  code: 'gu',
  formatDistance: gu_lib_formatDistance,
  formatLong: gu_lib_formatLong,
  formatRelative: gu_lib_formatRelative,
  localize: gu_lib_localize,
  match: gu_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const gu = (gu_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/formatDistance/index.js
var he_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '◊§◊ó◊ï◊™ ◊û◊©◊†◊ô◊ô◊î',
    two: '◊§◊ó◊ï◊™ ◊û◊©◊™◊ô ◊©◊†◊ô◊ï◊™',
    other: '◊§◊ó◊ï◊™ ◊û÷æ{{count}} ◊©◊†◊ô◊ï◊™'
  },
  xSeconds: {
    one: '◊©◊†◊ô◊ô◊î',
    two: '◊©◊™◊ô ◊©◊†◊ô◊ï◊™',
    other: '{{count}} ◊©◊†◊ô◊ï◊™'
  },
  halfAMinute: '◊ó◊¶◊ô ◊ì◊ß◊î',
  lessThanXMinutes: {
    one: '◊§◊ó◊ï◊™ ◊û◊ì◊ß◊î',
    two: '◊§◊ó◊ï◊™ ◊û◊©◊™◊ô ◊ì◊ß◊ï◊™',
    other: '◊§◊ó◊ï◊™ ◊û÷æ{{count}} ◊ì◊ß◊ï◊™'
  },
  xMinutes: {
    one: '◊ì◊ß◊î',
    two: '◊©◊™◊ô ◊ì◊ß◊ï◊™',
    other: '{{count}} ◊ì◊ß◊ï◊™'
  },
  aboutXHours: {
    one: '◊õ◊©◊¢◊î',
    two: '◊õ◊©◊¢◊™◊ô◊ô◊ù',
    other: '◊õ÷æ{{count}} ◊©◊¢◊ï◊™'
  },
  xHours: {
    one: '◊©◊¢◊î',
    two: '◊©◊¢◊™◊ô◊ô◊ù',
    other: '{{count}} ◊©◊¢◊ï◊™'
  },
  xDays: {
    one: '◊ô◊ï◊ù',
    two: '◊ô◊ï◊û◊ô◊ô◊ù',
    other: '{{count}} ◊ô◊û◊ô◊ù'
  },
  aboutXWeeks: {
    one: '◊õ◊©◊ë◊ï◊¢',
    two: '◊õ◊©◊ë◊ï◊¢◊ô◊ô◊ù',
    other: '◊õ÷æ{{count}} ◊©◊ë◊ï◊¢◊ï◊™'
  },
  xWeeks: {
    one: '◊©◊ë◊ï◊¢',
    two: '◊©◊ë◊ï◊¢◊ô◊ô◊ù',
    other: '{{count}} ◊©◊ë◊ï◊¢◊ï◊™'
  },
  aboutXMonths: {
    one: '◊õ◊ó◊ï◊ì◊©',
    two: '◊õ◊ó◊ï◊ì◊©◊ô◊ô◊ù',
    other: '◊õ÷æ{{count}} ◊ó◊ï◊ì◊©◊ô◊ù'
  },
  xMonths: {
    one: '◊ó◊ï◊ì◊©',
    two: '◊ó◊ï◊ì◊©◊ô◊ô◊ù',
    other: '{{count}} ◊ó◊ï◊ì◊©◊ô◊ù'
  },
  aboutXYears: {
    one: '◊õ◊©◊†◊î',
    two: '◊õ◊©◊†◊™◊ô◊ô◊ù',
    other: '◊õ÷æ{{count}} ◊©◊†◊ô◊ù'
  },
  xYears: {
    one: '◊©◊†◊î',
    two: '◊©◊†◊™◊ô◊ô◊ù',
    other: '{{count}} ◊©◊†◊ô◊ù'
  },
  overXYears: {
    one: '◊ô◊ï◊™◊® ◊û◊©◊†◊î',
    two: '◊ô◊ï◊™◊® ◊û◊©◊†◊™◊ô◊ô◊ù',
    other: '◊ô◊ï◊™◊® ◊û÷æ{{count}} ◊©◊†◊ô◊ù'
  },
  almostXYears: {
    one: '◊õ◊û◊¢◊ò ◊©◊†◊î',
    two: '◊õ◊û◊¢◊ò ◊©◊†◊™◊ô◊ô◊ù',
    other: '◊õ◊û◊¢◊ò {{count}} ◊©◊†◊ô◊ù'
  }
};
var he_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  // Return word instead of `in one day` or `one day ago`
  if (token === 'xDays' && options !== null && options !== void 0 && options.addSuffix && count <= 2) {
    if (options.comparison && options.comparison > 0) {
      return count === 1 ? '◊û◊ó◊®' : '◊û◊ó◊®◊™◊ô◊ô◊ù';
    }
    return count === 1 ? '◊ê◊™◊û◊ï◊ú' : '◊©◊ú◊©◊ï◊ù';
  }
  var result;
  var tokenValue = he_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '◊ë◊¢◊ï◊ì ' + result;
    } else {
      return '◊ú◊§◊†◊ô ' + result;
    }
  }
  return result;
};
/* harmony default export */ const he_lib_formatDistance = (he_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/formatLong/index.js

var he_lib_formatLong_dateFormats = {
  full: 'EEEE, d ◊ëMMMM y',
  long: 'd ◊ëMMMM y',
  medium: 'd ◊ëMMM y',
  short: 'd.M.y'
};
var he_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var he_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '◊ë◊©◊¢◊î' {{time}}",
  long: "{{date}} '◊ë◊©◊¢◊î' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var he_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: he_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: he_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: he_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const he_lib_formatLong = (he_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/formatRelative/index.js
var he_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '◊©◊¢◊ë◊® ◊ë◊©◊¢◊î' p",
  yesterday: "'◊ê◊™◊û◊ï◊ú ◊ë◊©◊¢◊î' p",
  today: "'◊î◊ô◊ï◊ù ◊ë◊©◊¢◊î' p",
  tomorrow: "'◊û◊ó◊® ◊ë◊©◊¢◊î' p",
  nextWeek: "eeee '◊ë◊©◊¢◊î' p",
  other: 'P'
};
var he_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return he_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const he_lib_formatRelative = (he_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/localize/index.js

var he_lib_localize_eraValues = {
  narrow: ['◊ú◊§◊†◊î◊¥◊°', '◊ú◊°◊§◊ô◊®◊î'],
  abbreviated: ['◊ú◊§◊†◊î◊¥◊°', '◊ú◊°◊§◊ô◊®◊î'],
  wide: ['◊ú◊§◊†◊ô ◊î◊°◊§◊ô◊®◊î', '◊ú◊°◊§◊ô◊®◊î']
};
var he_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['◊®◊ë◊¢◊ï◊ü 1', '◊®◊ë◊¢◊ï◊ü 2', '◊®◊ë◊¢◊ï◊ü 3', '◊®◊ë◊¢◊ï◊ü 4']
};
var he_lib_localize_monthValues = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['◊ô◊†◊ï◊≥', '◊§◊ë◊®◊≥', '◊û◊®◊•', '◊ê◊§◊®◊≥', '◊û◊ê◊ô', '◊ô◊ï◊†◊ô', '◊ô◊ï◊ú◊ô', '◊ê◊ï◊í◊≥', '◊°◊§◊ò◊≥', '◊ê◊ï◊ß◊≥', '◊†◊ï◊ë◊≥', '◊ì◊¶◊û◊≥'],
  wide: ['◊ô◊†◊ï◊ê◊®', '◊§◊ë◊®◊ï◊ê◊®', '◊û◊®◊•', '◊ê◊§◊®◊ô◊ú', '◊û◊ê◊ô', '◊ô◊ï◊†◊ô', '◊ô◊ï◊ú◊ô', '◊ê◊ï◊í◊ï◊°◊ò', '◊°◊§◊ò◊û◊ë◊®', '◊ê◊ï◊ß◊ò◊ï◊ë◊®', '◊†◊ï◊ë◊û◊ë◊®', '◊ì◊¶◊û◊ë◊®']
};
var he_lib_localize_dayValues = {
  narrow: ['◊ê◊≥', '◊ë◊≥', '◊í◊≥', '◊ì◊≥', '◊î◊≥', '◊ï◊≥', '◊©◊≥'],
  short: ['◊ê◊≥', '◊ë◊≥', '◊í◊≥', '◊ì◊≥', '◊î◊≥', '◊ï◊≥', '◊©◊≥'],
  abbreviated: ['◊ô◊ï◊ù ◊ê◊≥', '◊ô◊ï◊ù ◊ë◊≥', '◊ô◊ï◊ù ◊í◊≥', '◊ô◊ï◊ù ◊ì◊≥', '◊ô◊ï◊ù ◊î◊≥', '◊ô◊ï◊ù ◊ï◊≥', '◊©◊ë◊™'],
  wide: ['◊ô◊ï◊ù ◊®◊ê◊©◊ï◊ü', '◊ô◊ï◊ù ◊©◊†◊ô', '◊ô◊ï◊ù ◊©◊ú◊ô◊©◊ô', '◊ô◊ï◊ù ◊®◊ë◊ô◊¢◊ô', '◊ô◊ï◊ù ◊ó◊û◊ô◊©◊ô', '◊ô◊ï◊ù ◊©◊ô◊©◊ô', '◊ô◊ï◊ù ◊©◊ë◊™']
};
var he_lib_localize_dayPeriodValues = {
  narrow: {
    am: '◊ú◊§◊†◊î◊¥◊¶',
    pm: '◊ê◊ó◊î◊¥◊¶',
    midnight: '◊ó◊¶◊ï◊™',
    noon: '◊¶◊î◊®◊ô◊ô◊ù',
    morning: '◊ë◊ï◊ß◊®',
    afternoon: '◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù',
    evening: '◊¢◊®◊ë',
    night: '◊ú◊ô◊ú◊î'
  },
  abbreviated: {
    am: '◊ú◊§◊†◊î◊¥◊¶',
    pm: '◊ê◊ó◊î◊¥◊¶',
    midnight: '◊ó◊¶◊ï◊™',
    noon: '◊¶◊î◊®◊ô◊ô◊ù',
    morning: '◊ë◊ï◊ß◊®',
    afternoon: '◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù',
    evening: '◊¢◊®◊ë',
    night: '◊ú◊ô◊ú◊î'
  },
  wide: {
    am: '◊ú◊§◊†◊î◊¥◊¶',
    pm: '◊ê◊ó◊î◊¥◊¶',
    midnight: '◊ó◊¶◊ï◊™',
    noon: '◊¶◊î◊®◊ô◊ô◊ù',
    morning: '◊ë◊ï◊ß◊®',
    afternoon: '◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù',
    evening: '◊¢◊®◊ë',
    night: '◊ú◊ô◊ú◊î'
  }
};
var he_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '◊ú◊§◊†◊î◊¥◊¶',
    pm: '◊ê◊ó◊î◊¥◊¶',
    midnight: '◊ó◊¶◊ï◊™',
    noon: '◊¶◊î◊®◊ô◊ô◊ù',
    morning: '◊ë◊ë◊ï◊ß◊®',
    afternoon: '◊ë◊¶◊î◊®◊ô◊ô◊ù',
    evening: '◊ë◊¢◊®◊ë',
    night: '◊ë◊ú◊ô◊ú◊î'
  },
  abbreviated: {
    am: '◊ú◊§◊†◊î◊¥◊¶',
    pm: '◊ê◊ó◊î◊¥◊¶',
    midnight: '◊ó◊¶◊ï◊™',
    noon: '◊¶◊î◊®◊ô◊ô◊ù',
    morning: '◊ë◊ë◊ï◊ß◊®',
    afternoon: '◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù',
    evening: '◊ë◊¢◊®◊ë',
    night: '◊ë◊ú◊ô◊ú◊î'
  },
  wide: {
    am: '◊ú◊§◊†◊î◊¥◊¶',
    pm: '◊ê◊ó◊î◊¥◊¶',
    midnight: '◊ó◊¶◊ï◊™',
    noon: '◊¶◊î◊®◊ô◊ô◊ù',
    morning: '◊ë◊ë◊ï◊ß◊®',
    afternoon: '◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù',
    evening: '◊ë◊¢◊®◊ë',
    night: '◊ë◊ú◊ô◊ú◊î'
  }
};
var he_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);

  // We only show words till 10
  if (number <= 0 || number > 10) return String(number);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var isFemale = ['year', 'hour', 'minute', 'second'].indexOf(unit) >= 0;
  var male = ['◊®◊ê◊©◊ï◊ü', '◊©◊†◊ô', '◊©◊ú◊ô◊©◊ô', '◊®◊ë◊ô◊¢◊ô', '◊ó◊û◊ô◊©◊ô', '◊©◊ô◊©◊ô', '◊©◊ë◊ô◊¢◊ô', '◊©◊û◊ô◊†◊ô', '◊™◊©◊ô◊¢◊ô', '◊¢◊©◊ô◊®◊ô'];
  var female = ['◊®◊ê◊©◊ï◊†◊î', '◊©◊†◊ô◊ô◊î', '◊©◊ú◊ô◊©◊ô◊™', '◊®◊ë◊ô◊¢◊ô◊™', '◊ó◊û◊ô◊©◊ô◊™', '◊©◊ô◊©◊ô◊™', '◊©◊ë◊ô◊¢◊ô◊™', '◊©◊û◊ô◊†◊ô◊™', '◊™◊©◊ô◊¢◊ô◊™', '◊¢◊©◊ô◊®◊ô◊™'];
  var index = number - 1;
  return isFemale ? female[index] : male[index];
};
var he_lib_localize_localize = {
  ordinalNumber: he_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: he_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const he_lib_localize = (he_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/match/index.js


var he_lib_match_matchOrdinalNumberPattern = /^(\d+|(◊®◊ê◊©◊ï◊ü|◊©◊†◊ô|◊©◊ú◊ô◊©◊ô|◊®◊ë◊ô◊¢◊ô|◊ó◊û◊ô◊©◊ô|◊©◊ô◊©◊ô|◊©◊ë◊ô◊¢◊ô|◊©◊û◊ô◊†◊ô|◊™◊©◊ô◊¢◊ô|◊¢◊©◊ô◊®◊ô|◊®◊ê◊©◊ï◊†◊î|◊©◊†◊ô◊ô◊î|◊©◊ú◊ô◊©◊ô◊™|◊®◊ë◊ô◊¢◊ô◊™|◊ó◊û◊ô◊©◊ô◊™|◊©◊ô◊©◊ô◊™|◊©◊ë◊ô◊¢◊ô◊™|◊©◊û◊ô◊†◊ô◊™|◊™◊©◊ô◊¢◊ô◊™|◊¢◊©◊ô◊®◊ô◊™))/i;
var he_lib_match_parseOrdinalNumberPattern = /^(\d+|◊®◊ê|◊©◊†|◊©◊ú|◊®◊ë|◊ó|◊©◊ô|◊©◊ë|◊©◊û|◊™|◊¢)/i;
var he_lib_match_matchEraPatterns = {
  narrow: /^◊ú(◊°◊§◊ô◊®◊î|◊§◊†◊î◊¥◊°)/i,
  abbreviated: /^◊ú(◊°◊§◊ô◊®◊î|◊§◊†◊î◊¥◊°)/i,
  wide: /^◊ú(◊§◊†◊ô ◊î)?◊°◊§◊ô◊®◊î/i
};
var he_lib_match_parseEraPatterns = {
  any: [/^◊ú◊§/i, /^◊ú◊°/i]
};
var he_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^◊®◊ë◊¢◊ï◊ü [1234]/i
};
var he_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var he_lib_match_matchMonthPatterns = {
  narrow: /^\d+/i,
  abbreviated: /^(◊ô◊†◊ï|◊§◊ë◊®|◊û◊®◊•|◊ê◊§◊®|◊û◊ê◊ô|◊ô◊ï◊†◊ô|◊ô◊ï◊ú◊ô|◊ê◊ï◊í|◊°◊§◊ò|◊ê◊ï◊ß|◊†◊ï◊ë|◊ì◊¶◊û)◊≥?/i,
  wide: /^(◊ô◊†◊ï◊ê◊®|◊§◊ë◊®◊ï◊ê◊®|◊û◊®◊•|◊ê◊§◊®◊ô◊ú|◊û◊ê◊ô|◊ô◊ï◊†◊ô|◊ô◊ï◊ú◊ô|◊ê◊ï◊í◊ï◊°◊ò|◊°◊§◊ò◊û◊ë◊®|◊ê◊ï◊ß◊ò◊ï◊ë◊®|◊†◊ï◊ë◊û◊ë◊®|◊ì◊¶◊û◊ë◊®)/i
};
var he_lib_match_parseMonthPatterns = {
  narrow: [/^1$/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^◊ô◊†/i, /^◊§/i, /^◊û◊®/i, /^◊ê◊§/i, /^◊û◊ê/i, /^◊ô◊ï◊†/i, /^◊ô◊ï◊ú/i, /^◊ê◊ï◊í/i, /^◊°/i, /^◊ê◊ï◊ß/i, /^◊†/i, /^◊ì/i]
};
var he_lib_match_matchDayPatterns = {
  narrow: /^[◊ê◊ë◊í◊ì◊î◊ï◊©]◊≥/i,
  short: /^[◊ê◊ë◊í◊ì◊î◊ï◊©]◊≥/i,
  abbreviated: /^(◊©◊ë◊™|◊ô◊ï◊ù (◊ê|◊ë|◊í|◊ì|◊î|◊ï)◊≥)/i,
  wide: /^◊ô◊ï◊ù (◊®◊ê◊©◊ï◊ü|◊©◊†◊ô|◊©◊ú◊ô◊©◊ô|◊®◊ë◊ô◊¢◊ô|◊ó◊û◊ô◊©◊ô|◊©◊ô◊©◊ô|◊©◊ë◊™)/i
};
var he_lib_match_parseDayPatterns = {
  abbreviated: [/◊ê◊≥$/i, /◊ë◊≥$/i, /◊í◊≥$/i, /◊ì◊≥$/i, /◊î◊≥$/i, /◊ï◊≥$/i, /^◊©/i],
  wide: [/◊ü$/i, /◊†◊ô$/i, /◊ú◊ô◊©◊ô$/i, /◊¢◊ô$/i, /◊û◊ô◊©◊ô$/i, /◊©◊ô◊©◊ô$/i, /◊™$/i],
  any: [/^◊ê/i, /^◊ë/i, /^◊í/i, /^◊ì/i, /^◊î/i, /^◊ï/i, /^◊©/i]
};
var he_lib_match_matchDayPeriodPatterns = {
  any: /^(◊ê◊ó◊® ◊î|◊ë)?(◊ó◊¶◊ï◊™|◊¶◊î◊®◊ô◊ô◊ù|◊ë◊ï◊ß◊®|◊¢◊®◊ë|◊ú◊ô◊ú◊î|◊ê◊ó◊î◊¥◊¶|◊ú◊§◊†◊î◊¥◊¶)/i
};
var he_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^◊ú◊§/i,
    pm: /^◊ê◊ó◊î/i,
    midnight: /^◊ó/i,
    noon: /^◊¶/i,
    morning: /◊ë◊ï◊ß◊®/i,
    afternoon: /◊ë◊¶|◊ê◊ó◊®/i,
    evening: /◊¢◊®◊ë/i,
    night: /◊ú◊ô◊ú◊î/i
  }
};
var ordinalName = ['◊®◊ê', '◊©◊†', '◊©◊ú', '◊®◊ë', '◊ó', '◊©◊ô', '◊©◊ë', '◊©◊û', '◊™', '◊¢'];
var he_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: he_lib_match_matchOrdinalNumberPattern,
    parsePattern: he_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      var number = parseInt(value, 10);
      return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: he_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: he_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: he_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: he_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: he_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const he_lib_match = (he_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Hebrew locale.
 * @language Hebrew
 * @iso-639-2 heb
 * @author Nir Lahad [@nirlah]{@link https://github.com/nirlah}
 */
var he_locale = {
  code: 'he',
  formatDistance: he_lib_formatDistance,
  formatLong: he_lib_formatLong,
  formatRelative: he_lib_formatRelative,
  localize: he_lib_localize,
  match: he_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const he = (he_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/localize/index.js

var localize_numberValues = {
  locale: {
    '1': '‡•ß',
    '2': '‡•®',
    '3': '‡•©',
    '4': '‡•™',
    '5': '‡•´',
    '6': '‡•¨',
    '7': '‡•≠',
    '8': '‡•Æ',
    '9': '‡•Ø',
    '0': '‡•¶'
  },
  number: {
    '‡•ß': '1',
    '‡•®': '2',
    '‡•©': '3',
    '‡•™': '4',
    '‡•´': '5',
    '‡•¨': '6',
    '‡•≠': '7',
    '‡•Æ': '8',
    '‡•Ø': '9',
    '‡•¶': '0'
  }
};

// CLDR #1585 - #1592
var hi_lib_localize_eraValues = {
  narrow: ['‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ', '‡§à‡§∏‡•ç‡§µ‡•Ä'],
  abbreviated: ['‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ', '‡§à‡§∏‡•ç‡§µ‡•Ä'],
  wide: ['‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ', '‡§à‡§∏‡§µ‡•Ä ‡§∏‡§®']
};

// CLDR #1593 - #1616
var hi_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['‡§§‡§ø1', '‡§§‡§ø2', '‡§§‡§ø3', '‡§§‡§ø4'],
  wide: ['‡§™‡§π‡§≤‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä', '‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä', '‡§§‡•Ä‡§∏‡§∞‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä', '‡§ö‡•å‡§•‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
// https://www.unicode.org/cldr/charts/32/summary/hi.html
// CLDR #1617 - #1688
var hi_lib_localize_monthValues = {
  narrow: ['‡§ú', '‡§´‡§º', '‡§Æ‡§æ', '‡§Ö', '‡§Æ‡§à', '‡§ú‡•Ç', '‡§ú‡•Å', '‡§Ö‡§ó', '‡§∏‡§ø', '‡§Ö‡§ï‡•ç‡§ü‡•Ç', '‡§®', '‡§¶‡§ø'],
  abbreviated: ['‡§ú‡§®', '‡§´‡§º‡§∞', '‡§Æ‡§æ‡§∞‡•ç‡§ö', '‡§Ö‡§™‡•ç‡§∞‡•à‡§≤', '‡§Æ‡§à', '‡§ú‡•Ç‡§®', '‡§ú‡•Å‡§≤', '‡§Ö‡§ó', '‡§∏‡§ø‡§§', '‡§Ö‡§ï‡•ç‡§ü‡•Ç', '‡§®‡§µ', '‡§¶‡§ø‡§∏'],
  wide: ['‡§ú‡§®‡§µ‡§∞‡•Ä', '‡§´‡§º‡§∞‡§µ‡§∞‡•Ä', '‡§Æ‡§æ‡§∞‡•ç‡§ö', '‡§Ö‡§™‡•ç‡§∞‡•à‡§≤', '‡§Æ‡§à', '‡§ú‡•Ç‡§®', '‡§ú‡•Å‡§≤‡§æ‡§à', '‡§Ö‡§ó‡§∏‡•ç‡§§', '‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞', '‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞', '‡§®‡§µ‡§Ç‡§¨‡§∞', '‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞']
};

// CLDR #1689 - #1744
var hi_lib_localize_dayValues = {
  narrow: ['‡§∞', '‡§∏‡•ã', '‡§Æ‡§Ç', '‡§¨‡•Å', '‡§ó‡•Å', '‡§∂‡•Å', '‡§∂'],
  short: ['‡§∞', '‡§∏‡•ã', '‡§Æ‡§Ç', '‡§¨‡•Å', '‡§ó‡•Å', '‡§∂‡•Å', '‡§∂'],
  abbreviated: ['‡§∞‡§µ‡§ø', '‡§∏‡•ã‡§Æ', '‡§Æ‡§Ç‡§ó‡§≤', '‡§¨‡•Å‡§ß', '‡§ó‡•Å‡§∞‡•Å', '‡§∂‡•Å‡§ï‡•ç‡§∞', '‡§∂‡§®‡§ø'],
  wide: ['‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞', '‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞', '‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞', '‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞', '‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞', '‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞', '‡§∂‡§®‡§ø‡§µ‡§æ‡§∞']
};
var hi_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®',
    pm: '‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®',
    midnight: '‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
    noon: '‡§¶‡•ã‡§™‡§π‡§∞',
    morning: '‡§∏‡•Å‡§¨‡§π',
    afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
    evening: '‡§∂‡§æ‡§Æ',
    night: '‡§∞‡§æ‡§§'
  },
  abbreviated: {
    am: '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®',
    pm: '‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®',
    midnight: '‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
    noon: '‡§¶‡•ã‡§™‡§π‡§∞',
    morning: '‡§∏‡•Å‡§¨‡§π',
    afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
    evening: '‡§∂‡§æ‡§Æ',
    night: '‡§∞‡§æ‡§§'
  },
  wide: {
    am: '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®',
    pm: '‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®',
    midnight: '‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
    noon: '‡§¶‡•ã‡§™‡§π‡§∞',
    morning: '‡§∏‡•Å‡§¨‡§π',
    afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
    evening: '‡§∂‡§æ‡§Æ',
    night: '‡§∞‡§æ‡§§'
  }
};
var hi_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®',
    pm: '‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®',
    midnight: '‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
    noon: '‡§¶‡•ã‡§™‡§π‡§∞',
    morning: '‡§∏‡•Å‡§¨‡§π',
    afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
    evening: '‡§∂‡§æ‡§Æ',
    night: '‡§∞‡§æ‡§§'
  },
  abbreviated: {
    am: '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®',
    pm: '‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®',
    midnight: '‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
    noon: '‡§¶‡•ã‡§™‡§π‡§∞',
    morning: '‡§∏‡•Å‡§¨‡§π',
    afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
    evening: '‡§∂‡§æ‡§Æ',
    night: '‡§∞‡§æ‡§§'
  },
  wide: {
    am: '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®',
    pm: '‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®',
    midnight: '‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø',
    noon: '‡§¶‡•ã‡§™‡§π‡§∞',
    morning: '‡§∏‡•Å‡§¨‡§π',
    afternoon: '‡§¶‡•ã‡§™‡§π‡§∞',
    evening: '‡§∂‡§æ‡§Æ',
    night: '‡§∞‡§æ‡§§'
  }
};
var hi_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return localize_numberToLocale(number);
};
function localeToNumber(locale) {
  var enNumber = locale.toString().replace(/[‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø‡•¶]/g, function (match) {
    return localize_numberValues.number[match];
  });
  return Number(enNumber);
}
function localize_numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function (match) {
    return localize_numberValues.locale[match];
  });
}
var hi_lib_localize_localize = {
  ordinalNumber: hi_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: hi_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const hi_lib_localize = (hi_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/formatDistance/index.js
 // Source: https://www.unicode.org/cldr/charts/32/summary/hi.html
var hi_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '‡•ß ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∏‡•á ‡§ï‡§Æ',
    // CLDR #1310
    other: '{{count}} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∏‡•á ‡§ï‡§Æ'
  },
  xSeconds: {
    one: '‡•ß ‡§∏‡•á‡§ï‡§Ç‡§°',
    other: '{{count}} ‡§∏‡•á‡§ï‡§Ç‡§°'
  },
  halfAMinute: '‡§Ü‡§ß‡§æ ‡§Æ‡§ø‡§®‡§ü',
  lessThanXMinutes: {
    one: '‡•ß ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ',
    other: '{{count}} ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ'
  },
  xMinutes: {
    one: '‡•ß ‡§Æ‡§ø‡§®‡§ü',
    // CLDR #1307
    other: '{{count}} ‡§Æ‡§ø‡§®‡§ü'
  },
  aboutXHours: {
    one: '‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§ò‡§Ç‡§ü‡§æ',
    other: '‡§≤‡§ó‡§≠‡§ó {{count}} ‡§ò‡§Ç‡§ü‡•á'
  },
  xHours: {
    one: '‡•ß ‡§ò‡§Ç‡§ü‡§æ',
    // CLDR #1304
    other: '{{count}} ‡§ò‡§Ç‡§ü‡•á' // CLDR #4467
  },

  xDays: {
    one: '‡•ß ‡§¶‡§ø‡§®',
    // CLDR #1286
    other: '{{count}} ‡§¶‡§ø‡§®'
  },
  aboutXWeeks: {
    one: '‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
    other: '‡§≤‡§ó‡§≠‡§ó {{count}} ‡§∏‡§™‡•ç‡§§‡§æ‡§π'
  },
  xWeeks: {
    one: '‡•ß ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
    other: '{{count}} ‡§∏‡§™‡•ç‡§§‡§æ‡§π'
  },
  aboutXMonths: {
    one: '‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§Æ‡§π‡•Ä‡§®‡§æ',
    other: '‡§≤‡§ó‡§≠‡§ó {{count}} ‡§Æ‡§π‡•Ä‡§®‡•á'
  },
  xMonths: {
    one: '‡•ß ‡§Æ‡§π‡•Ä‡§®‡§æ',
    other: '{{count}} ‡§Æ‡§π‡•Ä‡§®‡•á'
  },
  aboutXYears: {
    one: '‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§µ‡§∞‡•ç‡§∑',
    other: '‡§≤‡§ó‡§≠‡§ó {{count}} ‡§µ‡§∞‡•ç‡§∑' // CLDR #4823
  },

  xYears: {
    one: '‡•ß ‡§µ‡§∞‡•ç‡§∑',
    other: '{{count}} ‡§µ‡§∞‡•ç‡§∑'
  },
  overXYears: {
    one: '‡•ß ‡§µ‡§∞‡•ç‡§∑ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï',
    other: '{{count}} ‡§µ‡§∞‡•ç‡§∑ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï'
  },
  almostXYears: {
    one: '‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§µ‡§∞‡•ç‡§∑',
    other: '‡§≤‡§ó‡§≠‡§ó {{count}} ‡§µ‡§∞‡•ç‡§∑'
  }
};
var hi_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = hi_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', localize_numberToLocale(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '‡§Æ‡•á ';
    } else {
      return result + ' ‡§™‡§π‡§≤‡•á';
    }
  }
  return result;
};
/* harmony default export */ const hi_lib_formatDistance = (hi_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/formatLong/index.js

var hi_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM, y',
  // CLDR #1787
  long: 'do MMMM, y',
  // CLDR #1788
  medium: 'd MMM, y',
  // CLDR #1789
  short: 'dd/MM/yyyy' // CLDR #1790
};

var hi_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  // CLDR #1791
  long: 'h:mm:ss a z',
  // CLDR #1792
  medium: 'h:mm:ss a',
  // CLDR #1793
  short: 'h:mm a' // CLDR #1794
};

var hi_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '‡§ï‡•ã' {{time}}",
  // CLDR #1795
  long: "{{date}} '‡§ï‡•ã' {{time}}",
  // CLDR #1796
  medium: '{{date}}, {{time}}',
  // CLDR #1797
  short: '{{date}}, {{time}}' // CLDR #1798
};

var hi_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hi_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hi_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hi_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const hi_lib_formatLong = (hi_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/formatRelative/index.js
var hi_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‡§™‡§ø‡§õ‡§≤‡•á' eeee p",
  yesterday: "'‡§ï‡§≤' p",
  today: "'‡§Ü‡§ú' p",
  tomorrow: "'‡§ï‡§≤' p",
  nextWeek: "eeee '‡§ï‡•ã' p",
  other: 'P'
};
var hi_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return hi_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const hi_lib_formatRelative = (hi_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/match/index.js



var hi_lib_match_matchOrdinalNumberPattern = /^[‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø]+/i;
var hi_lib_match_parseOrdinalNumberPattern = /^[‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø]+/i;
var hi_lib_match_matchEraPatterns = {
  narrow: /^(‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ|‡§à‡§∏‡•ç‡§µ‡•Ä)/i,
  abbreviated: /^(‡§à‡§∏‡§æ\.?\s?‡§™‡•Ç‡§∞‡•ç‡§µ\.?|‡§à‡§∏‡§æ\.?)/i,
  wide: /^(‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ|‡§à‡§∏‡§µ‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§µ|‡§à‡§∏‡§µ‡•Ä ‡§∏‡§®|‡§à‡§∏‡§µ‡•Ä)/i
};
var hi_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var hi_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^‡§§‡§ø[1234]/i,
  wide: /^[1234](‡§™‡§π‡§≤‡•Ä|‡§¶‡•Ç‡§∏‡§∞‡•Ä|‡§§‡•Ä‡§∏‡§∞‡•Ä|‡§ö‡•å‡§•‡•Ä)? ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä/i
};
var hi_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var hi_lib_match_matchMonthPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[‡§ú‡§´‡§º‡§Æ‡§æ‡§Ö‡§™‡•ç‡§Æ‡§à‡§ú‡•Ç‡§®‡§ú‡•Å‡§Ö‡§ó‡§∏‡§ø‡§Ö‡§ï‡•ç‡§§‡§®‡§¶‡§ø]/i,
  abbreviated: /^(‡§ú‡§®|‡§´‡§º‡§∞|‡§Æ‡§æ‡§∞‡•ç‡§ö|‡§Ö‡§™‡•ç|‡§Æ‡§à|‡§ú‡•Ç‡§®|‡§ú‡•Å‡§≤|‡§Ö‡§ó|‡§∏‡§ø‡§§|‡§Ö‡§ï‡•ç‡§§‡•Ç|‡§®‡§µ|‡§¶‡§ø‡§∏)/i,
  wide: /^(‡§ú‡§®‡§µ‡§∞‡•Ä|‡§´‡§º‡§∞‡§µ‡§∞‡•Ä|‡§Æ‡§æ‡§∞‡•ç‡§ö|‡§Ö‡§™‡•ç‡§∞‡•à‡§≤|‡§Æ‡§à|‡§ú‡•Ç‡§®|‡§ú‡•Å‡§≤‡§æ‡§à|‡§Ö‡§ó‡§∏‡•ç‡§§|‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞|‡§Ö‡§ï‡•ç‡§§‡•Ç‡§¨‡§∞|‡§®‡§µ‡§Ç‡§¨‡§∞|‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞)/i
};
var hi_lib_match_parseMonthPatterns = {
  narrow: [/^‡§ú/i, /^‡§´‡§º/i, /^‡§Æ‡§æ/i, /^‡§Ö‡§™‡•ç/i, /^‡§Æ‡§à/i, /^‡§ú‡•Ç/i, /^‡§ú‡•Å/i, /^‡§Ö‡§ó/i, /^‡§∏‡§ø/i, /^‡§Ö‡§ï‡•ç‡§§‡•Ç/i, /^‡§®/i, /^‡§¶‡§ø/i],
  any: [/^‡§ú‡§®/i, /^‡§´‡§º/i, /^‡§Æ‡§æ/i, /^‡§Ö‡§™‡•ç/i, /^‡§Æ‡§à/i, /^‡§ú‡•Ç/i, /^‡§ú‡•Å/i, /^‡§Ö‡§ó/i, /^‡§∏‡§ø/i, /^‡§Ö‡§ï‡•ç‡§§‡•Ç/i, /^‡§®‡§µ/i, /^‡§¶‡§ø‡§∏/i]
};
var hi_lib_match_matchDayPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[‡§∞‡§µ‡§ø‡§∏‡•ã‡§Æ‡§Æ‡§Ç‡§ó‡§≤‡§¨‡•Å‡§ß‡§ó‡•Å‡§∞‡•Å‡§∂‡•Å‡§ï‡•ç‡§∞‡§∂‡§®‡§ø]/i,
  short: /^(‡§∞‡§µ‡§ø|‡§∏‡•ã‡§Æ|‡§Æ‡§Ç‡§ó‡§≤|‡§¨‡•Å‡§ß|‡§ó‡•Å‡§∞‡•Å|‡§∂‡•Å‡§ï‡•ç‡§∞|‡§∂‡§®‡§ø)/i,
  abbreviated: /^(‡§∞‡§µ‡§ø|‡§∏‡•ã‡§Æ|‡§Æ‡§Ç‡§ó‡§≤|‡§¨‡•Å‡§ß|‡§ó‡•Å‡§∞‡•Å|‡§∂‡•Å‡§ï‡•ç‡§∞|‡§∂‡§®‡§ø)/i,
  wide: /^(‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞|‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞|‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞|‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞|‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞|‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞|‡§∂‡§®‡§ø‡§µ‡§æ‡§∞)/i
};
var hi_lib_match_parseDayPatterns = {
  narrow: [/^‡§∞‡§µ‡§ø/i, /^‡§∏‡•ã‡§Æ/i, /^‡§Æ‡§Ç‡§ó‡§≤/i, /^‡§¨‡•Å‡§ß/i, /^‡§ó‡•Å‡§∞‡•Å/i, /^‡§∂‡•Å‡§ï‡•ç‡§∞/i, /^‡§∂‡§®‡§ø/i],
  any: [/^‡§∞‡§µ‡§ø/i, /^‡§∏‡•ã‡§Æ/i, /^‡§Æ‡§Ç‡§ó‡§≤/i, /^‡§¨‡•Å‡§ß/i, /^‡§ó‡•Å‡§∞‡•Å/i, /^‡§∂‡•Å‡§ï‡•ç‡§∞/i, /^‡§∂‡§®‡§ø/i]
};
var hi_lib_match_matchDayPeriodPatterns = {
  narrow: /^(‡§™‡•Ç|‡§Ö|‡§Æ|‡§¶.\?|‡§∏‡•Å|‡§¶‡•ã|‡§∂‡§æ|‡§∞‡§æ)/i,
  any: /^(‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®|‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®|‡§Æ|‡§¶.\?|‡§∏‡•Å|‡§¶‡•ã|‡§∂‡§æ|‡§∞‡§æ)/i
};
var hi_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®/i,
    pm: /^‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®/i,
    midnight: /^‡§Æ‡§ß‡•ç‡§Ø/i,
    noon: /^‡§¶‡•ã/i,
    morning: /‡§∏‡•Å/i,
    afternoon: /‡§¶‡•ã/i,
    evening: /‡§∂‡§æ/i,
    night: /‡§∞‡§æ/i
  }
};
var hi_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hi_lib_match_matchOrdinalNumberPattern,
    parsePattern: hi_lib_match_parseOrdinalNumberPattern,
    valueCallback: localeToNumber
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hi_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hi_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hi_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hi_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: hi_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const hi_lib_match = (hi_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Hindi locale (India).
 * @language Hindi
 * @iso-639-2 hin
 * @author Mukesh Mandiwal [@mukeshmandiwal]{@link https://github.com/mukeshmandiwal}
 */
var hi_locale = {
  code: 'hi',
  formatDistance: hi_lib_formatDistance,
  formatLong: hi_lib_formatLong,
  formatRelative: hi_lib_formatRelative,
  localize: hi_lib_localize,
  match: hi_lib_match,
  options: {
    weekStartsOn: 0 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const hi = (hi_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/formatDistance/index.js
var hr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: 'manje od 1 sekunde',
      withPrepositionAgo: 'manje od 1 sekunde',
      withPrepositionIn: 'manje od 1 sekundu'
    },
    dual: 'manje od {{count}} sekunde',
    other: 'manje od {{count}} sekundi'
  },
  xSeconds: {
    one: {
      standalone: '1 sekunda',
      withPrepositionAgo: '1 sekunde',
      withPrepositionIn: '1 sekundu'
    },
    dual: '{{count}} sekunde',
    other: '{{count}} sekundi'
  },
  halfAMinute: 'pola minute',
  lessThanXMinutes: {
    one: {
      standalone: 'manje od 1 minute',
      withPrepositionAgo: 'manje od 1 minute',
      withPrepositionIn: 'manje od 1 minutu'
    },
    dual: 'manje od {{count}} minute',
    other: 'manje od {{count}} minuta'
  },
  xMinutes: {
    one: {
      standalone: '1 minuta',
      withPrepositionAgo: '1 minute',
      withPrepositionIn: '1 minutu'
    },
    dual: '{{count}} minute',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: {
      standalone: 'oko 1 sat',
      withPrepositionAgo: 'oko 1 sat',
      withPrepositionIn: 'oko 1 sat'
    },
    dual: 'oko {{count}} sata',
    other: 'oko {{count}} sati'
  },
  xHours: {
    one: {
      standalone: '1 sat',
      withPrepositionAgo: '1 sat',
      withPrepositionIn: '1 sat'
    },
    dual: '{{count}} sata',
    other: '{{count}} sati'
  },
  xDays: {
    one: {
      standalone: '1 dan',
      withPrepositionAgo: '1 dan',
      withPrepositionIn: '1 dan'
    },
    dual: '{{count}} dana',
    other: '{{count}} dana'
  },
  aboutXWeeks: {
    one: {
      standalone: 'oko 1 tjedan',
      withPrepositionAgo: 'oko 1 tjedan',
      withPrepositionIn: 'oko 1 tjedan'
    },
    dual: 'oko {{count}} tjedna',
    other: 'oko {{count}} tjedana'
  },
  xWeeks: {
    one: {
      standalone: '1 tjedan',
      withPrepositionAgo: '1 tjedan',
      withPrepositionIn: '1 tjedan'
    },
    dual: '{{count}} tjedna',
    other: '{{count}} tjedana'
  },
  aboutXMonths: {
    one: {
      standalone: 'oko 1 mjesec',
      withPrepositionAgo: 'oko 1 mjesec',
      withPrepositionIn: 'oko 1 mjesec'
    },
    dual: 'oko {{count}} mjeseca',
    other: 'oko {{count}} mjeseci'
  },
  xMonths: {
    one: {
      standalone: '1 mjesec',
      withPrepositionAgo: '1 mjesec',
      withPrepositionIn: '1 mjesec'
    },
    dual: '{{count}} mjeseca',
    other: '{{count}} mjeseci'
  },
  aboutXYears: {
    one: {
      standalone: 'oko 1 godinu',
      withPrepositionAgo: 'oko 1 godinu',
      withPrepositionIn: 'oko 1 godinu'
    },
    dual: 'oko {{count}} godine',
    other: 'oko {{count}} godina'
  },
  xYears: {
    one: {
      standalone: '1 godina',
      withPrepositionAgo: '1 godine',
      withPrepositionIn: '1 godinu'
    },
    dual: '{{count}} godine',
    other: '{{count}} godina'
  },
  overXYears: {
    one: {
      standalone: 'preko 1 godinu',
      withPrepositionAgo: 'preko 1 godinu',
      withPrepositionIn: 'preko 1 godinu'
    },
    dual: 'preko {{count}} godine',
    other: 'preko {{count}} godina'
  },
  almostXYears: {
    one: {
      standalone: 'gotovo 1 godinu',
      withPrepositionAgo: 'gotovo 1 godinu',
      withPrepositionIn: 'gotovo 1 godinu'
    },
    dual: 'gotovo {{count}} godine',
    other: 'gotovo {{count}} godina'
  }
};
var hr_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = hr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'za ' + result;
    } else {
      return 'prije ' + result;
    }
  }
  return result;
};
/* harmony default export */ const hr_lib_formatDistance = (hr_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/formatLong/index.js

var hr_lib_formatLong_dateFormats = {
  full: 'EEEE, d. MMMM y.',
  long: 'd. MMMM y.',
  medium: 'd. MMM y.',
  short: 'dd. MM. y.'
};
var hr_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var hr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var hr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hr_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hr_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hr_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const hr_lib_formatLong = (hr_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/formatRelative/index.js
var hr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'pro≈°lu nedjelju u' p";
      case 3:
        return "'pro≈°lu srijedu u' p";
      case 6:
        return "'pro≈°lu subotu u' p";
      default:
        return "'pro≈°li' EEEE 'u' p";
    }
  },
  yesterday: "'juƒçer u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'iduƒáu nedjelju u' p";
      case 3:
        return "'iduƒáu srijedu u' p";
      case 6:
        return "'iduƒáu subotu u' p";
      default:
        return "'pro≈°li' EEEE 'u' p";
    }
  },
  other: 'P'
};
var hr_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = hr_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const hr_lib_formatRelative = (hr_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/localize/index.js

var hr_lib_localize_eraValues = {
  narrow: ['pr.n.e.', 'AD'],
  abbreviated: ['pr. Kr.', 'po. Kr.'],
  wide: ['Prije Krista', 'Poslije Krista']
};
var hr_lib_localize_quarterValues = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var hr_lib_localize_monthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['sij', 'velj', 'o≈æu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],
  wide: ['sijeƒçanj', 'veljaƒça', 'o≈æujak', 'travanj', 'svibanj', 'lipanj', 'srpanj', 'kolovoz', 'rujan', 'listopad', 'studeni', 'prosinac']
};
var hr_lib_localize_formattingMonthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['sij', 'velj', 'o≈æu', 'tra', 'svi', 'lip', 'srp', 'kol', 'ruj', 'lis', 'stu', 'pro'],
  wide: ['sijeƒçnja', 'veljaƒçe', 'o≈æujka', 'travnja', 'svibnja', 'lipnja', 'srpnja', 'kolovoza', 'rujna', 'listopada', 'studenog', 'prosinca']
};
var hr_lib_localize_dayValues = {
  narrow: ['N', 'P', 'U', 'S', 'ƒå', 'P', 'S'],
  short: ['ned', 'pon', 'uto', 'sri', 'ƒçet', 'pet', 'sub'],
  abbreviated: ['ned', 'pon', 'uto', 'sri', 'ƒçet', 'pet', 'sub'],
  wide: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'ƒçetvrtak', 'petak', 'subota']
};
var hr_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'naveƒçer',
    night: 'noƒáu'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'naveƒçer',
    night: 'noƒáu'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'poslije podne',
    evening: 'naveƒçer',
    night: 'noƒáu'
  }
};
var hr_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'naveƒçer',
    night: 'noƒáu'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'popodne',
    evening: 'naveƒçer',
    night: 'noƒáu'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutro',
    afternoon: 'poslije podne',
    evening: 'naveƒçer',
    night: 'noƒáu'
  }
};
var hr_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var hr_lib_localize_localize = {
  ordinalNumber: hr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: hr_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: hr_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const hr_lib_localize = (hr_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/match/index.js


var hr_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var hr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var hr_lib_match_matchEraPatterns = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
  wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
};
var hr_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|nova)/i]
};
var hr_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var hr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var hr_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(sij|velj|(o≈æu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
  wide: /^((sijeƒçanj|sijeƒçnja|sijecanj|sijecnja)|(veljaƒça|veljaƒçe|veljaca|veljace)|(o≈æujak|o≈æujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
};
var hr_lib_match_parseMonthPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i, /8/i, /9/i, /10/i, /11/i, /12/i],
  abbreviated: [/^sij/i, /^velj/i, /^(o≈æu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i],
  wide: [/^sij/i, /^velj/i, /^(o≈æu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i]
};
var hr_lib_match_matchDayPatterns = {
  narrow: /^[npusƒçc]/i,
  short: /^(ned|pon|uto|sri|(ƒçet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sri|(ƒçet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(ƒçetvrtak|cetvrtak)|petak|subota)/i
};
var hr_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var hr_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|ponoc|ponoƒá|(po)?podne|navecer|naveƒçer|noƒáu|poslije podne|ujutro)/i
};
var hr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(navece|naveƒçe)/i,
    night: /(nocu|noƒáu)/i
  }
};
var hr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hr_lib_match_matchOrdinalNumberPattern,
    parsePattern: hr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hr_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hr_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hr_lib_match_parseMonthPatterns,
    defaultParseWidth: 'wide'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hr_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: hr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const hr_lib_match = (hr_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Croatian locale.
 * @language Croatian
 * @iso-639-2 hrv
 * @author Matija Marohniƒá [@silvenon]{@link https://github.com/silvenon}
 * @author Manico [@manico]{@link https://github.com/manico}
 * @author Ivan Jer≈æabek [@jerzabek]{@link https://github.com/jerzabek}
 */
var hr_locale = {
  code: 'hr',
  formatDistance: hr_lib_formatDistance,
  formatLong: hr_lib_formatLong,
  formatRelative: hr_lib_formatRelative,
  localize: hr_lib_localize,
  match: hr_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const hr = (hr_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/formatDistance/index.js
var ht_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mwens pase yon segond',
    other: 'mwens pase {{count}} segond'
  },
  xSeconds: {
    one: '1 segond',
    other: '{{count}} segond'
  },
  halfAMinute: '30 segond',
  lessThanXMinutes: {
    one: 'mwens pase yon minit',
    other: 'mwens pase {{count}} minit'
  },
  xMinutes: {
    one: '1 minit',
    other: '{{count}} minit'
  },
  aboutXHours: {
    one: 'anviwon in√®',
    other: 'anviwon {{count}} √®'
  },
  xHours: {
    one: '1 l√®',
    other: '{{count}} l√®'
  },
  xDays: {
    one: '1 jou',
    other: '{{count}} jou'
  },
  aboutXWeeks: {
    one: 'anviwon 1 sem√®n',
    other: 'anviwon {{count}} sem√®n'
  },
  xWeeks: {
    one: '1 sem√®n',
    other: '{{count}} sem√®n'
  },
  aboutXMonths: {
    one: 'anviwon 1 mwa',
    other: 'anviwon {{count}} mwa'
  },
  xMonths: {
    one: '1 mwa',
    other: '{{count}} mwa'
  },
  aboutXYears: {
    one: 'anviwon 1 an',
    other: 'anviwon {{count}} an'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} an'
  },
  overXYears: {
    one: 'plis pase 1 an',
    other: 'plis pase {{count}} an'
  },
  almostXYears: {
    one: 'pr√®ske 1 an',
    other: 'pr√®ske {{count}} an'
  }
};
var ht_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ht_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'nan ' + result;
    } else {
      return 'sa f√® ' + result;
    }
  }
  return result;
};
/* harmony default export */ const ht_lib_formatDistance = (ht_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/formatLong/index.js

var ht_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var ht_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var ht_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'nan l√®' {{time}}",
  long: "{{date}} 'nan l√®' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ht_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ht_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ht_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ht_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ht_lib_formatLong = (ht_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/formatRelative/index.js
var ht_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'pase nan l√®' p",
  yesterday: "'y√® nan l√®' p",
  today: "'jodi a' p",
  tomorrow: "'demen nan l√®' p'",
  nextWeek: "eeee 'pwochen nan l√®' p",
  other: 'P'
};
var ht_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ht_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ht_lib_formatRelative = (ht_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/localize/index.js

var ht_lib_localize_eraValues = {
  narrow: ['av. J.-K', 'ap. J.-K'],
  abbreviated: ['av. J.-K', 'ap. J.-K'],
  wide: ['anvan Jezi Kris', 'apre Jezi Kris']
};
var ht_lib_localize_quarterValues = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1ye trim.', '2y√®m trim.', '3y√®m trim.', '4y√®m trim.'],
  wide: ['1ye trim√®s', '2y√®m trim√®s', '3y√®m trim√®s', '4y√®m trim√®s']
};
var ht_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'O', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'fevr.', 'mas', 'avr.', 'me', 'jen', 'jiy√®', 'out', 'sept.', 'okt.', 'nov.', 'des.'],
  wide: ['janvye', 'fevrye', 'mas', 'avril', 'me', 'jen', 'jiy√®', 'out', 'septanm', 'okt√≤b', 'novanm', 'desanm']
};
var ht_lib_localize_dayValues = {
  narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  short: ['di', 'le', 'ma', 'm√®', 'je', 'va', 'sa'],
  abbreviated: ['dim.', 'len.', 'mad.', 'm√®k.', 'jed.', 'van.', 'sam.'],
  wide: ['dimanch', 'lendi', 'madi', 'm√®kredi', 'jedi', 'vandredi', 'samdi']
};
var ht_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minwit',
    noon: 'midi',
    morning: 'mat.',
    afternoon: 'ap.m.',
    evening: 'swa',
    night: 'mat.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minwit',
    noon: 'midi',
    morning: 'maten',
    afternoon: 'apr√®midi',
    evening: 'swa',
    night: 'maten'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minwit',
    noon: 'midi',
    morning: 'nan maten',
    afternoon: 'nan apr√®midi',
    evening: 'nan asw√®',
    night: 'nan maten'
  }
};
var ht_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number === 0) return String(number);
  var suffix = number === 1 ? 'ye' : 'y√®m';
  return number + suffix;
};
var ht_lib_localize_localize = {
  ordinalNumber: ht_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const ht_lib_localize = (ht_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/match/index.js


var ht_lib_match_matchOrdinalNumberPattern = /^(\d+)(ye|y√®m)?/i;
var ht_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ht_lib_match_matchEraPatterns = {
  narrow: /^(av\.J\.K|ap\.J\.K|ap\.J\.-K)/i,
  abbreviated: /^(av\.J\.-K|av\.J-K|apr\.J\.-K|apr\.J-K|ap\.J-K)/i,
  wide: /^(avan Jezi Kris|apre Jezi Kris)/i
};
var ht_lib_match_parseEraPatterns = {
  any: [/^av/i, /^ap/i]
};
var ht_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](ye|y√®m)? trim√®s/i
};
var ht_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ht_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|fevr|mas|avr|me|jen|jiy√®|out|sept|okt|nov|des)\.?/i,
  wide: /^(janvye|fevrye|mas|avril|me|jen|jiy√®|out|septanm|okt√≤b|novanm|desanm)/i
};
var ht_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^av/i, /^me/i, /^je/i, /^ji/i, /^ou/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var ht_lib_match_matchDayPatterns = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|le|ma|me|je|va|sa)/i,
  abbreviated: /^(dim|len|mad|m√®k|jed|van|sam)\.?/i,
  wide: /^(dimanch|lendi|madi|m√®kredi|jedi|vandredi|samdi)/i
};
var ht_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^le/i, /^ma/i, /^m√®/i, /^je/i, /^va/i, /^sa/i]
};
var ht_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|minwit|midi|mat\.?|ap\.?m\.?|swa)/i,
  any: /^([ap]\.?\s?m\.?|nan maten|nan apr√®midi|nan asw√®)/i
};
var ht_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /sw/i,
    night: /nwit/i
  }
};
var ht_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ht_lib_match_matchOrdinalNumberPattern,
    parsePattern: ht_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ht_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ht_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ht_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ht_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ht_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ht_lib_match = (ht_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Haitian Creole locale.
 * @language Haitian Creole
 * @iso-639-2 hat
 * @author Rubens Mariuzzo [@rmariuzzo]{@link https://github.com/rmariuzzo}
 * @author Watson Marcelain [@watsongm24]{@link https://github.com/watsongm24}
 */
var ht_locale = {
  code: 'ht',
  formatDistance: ht_lib_formatDistance,
  formatLong: ht_lib_formatLong,
  formatRelative: ht_lib_formatRelative,
  localize: ht_lib_localize,
  match: ht_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const ht = (ht_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/formatDistance/index.js
var translations = {
  about: 'k√∂r√ºlbel√ºl',
  over: 't√∂bb mint',
  almost: 'majdnem',
  lessthan: 'kevesebb mint'
};
var withoutSuffixes = {
  xseconds: ' m√°sodperc',
  halfaminute: 'f√©l perc',
  xminutes: ' perc',
  xhours: ' √≥ra',
  xdays: ' nap',
  xweeks: ' h√©t',
  xmonths: ' h√≥nap',
  xyears: ' √©v'
};
var withSuffixes = {
  xseconds: {
    '-1': ' m√°sodperccel ezel≈ëtt',
    '1': ' m√°sodperc m√∫lva',
    '0': ' m√°sodperce'
  },
  halfaminute: {
    '-1': 'f√©l perccel ezel≈ëtt',
    '1': 'f√©l perc m√∫lva',
    '0': 'f√©l perce'
  },
  xminutes: {
    '-1': ' perccel ezel≈ëtt',
    '1': ' perc m√∫lva',
    '0': ' perce'
  },
  xhours: {
    '-1': ' √≥r√°val ezel≈ëtt',
    '1': ' √≥ra m√∫lva',
    '0': ' √≥r√°ja'
  },
  xdays: {
    '-1': ' nappal ezel≈ëtt',
    '1': ' nap m√∫lva',
    '0': ' napja'
  },
  xweeks: {
    '-1': ' h√©ttel ezel≈ëtt',
    '1': ' h√©t m√∫lva',
    '0': ' hete'
  },
  xmonths: {
    '-1': ' h√≥nappal ezel≈ëtt',
    '1': ' h√≥nap m√∫lva',
    '0': ' h√≥napja'
  },
  xyears: {
    '-1': ' √©vvel ezel≈ëtt',
    '1': ' √©v m√∫lva',
    '0': ' √©ve'
  }
};
var hu_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], '') : token;
  var addSuffix = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var key = unit.toLowerCase();
  var comparison = (options === null || options === void 0 ? void 0 : options.comparison) || 0;
  var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
  var result = key === 'halfaminute' ? translated : count + translated;
  if (adverb) {
    var adv = adverb[0].toLowerCase();
    result = translations[adv] + ' ' + result;
  }
  return result;
};
/* harmony default export */ const hu_lib_formatDistance = (hu_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/formatLong/index.js

var hu_lib_formatLong_dateFormats = {
  full: 'y. MMMM d., EEEE',
  long: 'y. MMMM d.',
  medium: 'y. MMM d.',
  short: 'y. MM. dd.'
};
var hu_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var hu_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var hu_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hu_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hu_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hu_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const hu_lib_formatLong = (hu_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/formatRelative/index.js
var hu_lib_formatRelative_accusativeWeekdays = ['vas√°rnap', 'h√©tf≈ën', 'kedden', 'szerd√°n', 'cs√ºt√∂rt√∂k√∂n', 'p√©nteken', 'szombaton'];
function week(isFuture) {
  return function (date) {
    var weekday = hu_lib_formatRelative_accusativeWeekdays[date.getUTCDay()];
    var prefix = isFuture ? '' : "'m√∫lt' ";
    return "".concat(prefix, "'").concat(weekday, "' p'-kor'");
  };
}
var hu_lib_formatRelative_formatRelativeLocale = {
  lastWeek: week(false),
  yesterday: "'tegnap' p'-kor'",
  today: "'ma' p'-kor'",
  tomorrow: "'holnap' p'-kor'",
  nextWeek: week(true),
  other: 'P'
};
var hu_lib_formatRelative_formatRelative = function formatRelative(token, date) {
  var format = hu_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const hu_lib_formatRelative = (hu_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/localize/index.js

var hu_lib_localize_eraValues = {
  narrow: ['ie.', 'isz.'],
  abbreviated: ['i. e.', 'i. sz.'],
  wide: ['Krisztus el≈ëtt', 'id≈ësz√°m√≠t√°sunk szerint']
};
var hu_lib_localize_quarterValues = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. n.√©v', '2. n.√©v', '3. n.√©v', '4. n.√©v'],
  wide: ['1. negyed√©v', '2. negyed√©v', '3. negyed√©v', '4. negyed√©v']
};
var formattingQuarterValues = {
  narrow: ['I.', 'II.', 'III.', 'IV.'],
  abbreviated: ['I. n.√©v', 'II. n.√©v', 'III. n.√©v', 'IV. n.√©v'],
  wide: ['I. negyed√©v', 'II. negyed√©v', 'III. negyed√©v', 'IV. negyed√©v']
};
var hu_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', '√Å', 'M', 'J', 'J', 'A', 'Sz', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'febr.', 'm√°rc.', '√°pr.', 'm√°j.', 'j√∫n.', 'j√∫l.', 'aug.', 'szept.', 'okt.', 'nov.', 'dec.'],
  wide: ['janu√°r', 'febru√°r', 'm√°rcius', '√°prilis', 'm√°jus', 'j√∫nius', 'j√∫lius', 'augusztus', 'szeptember', 'okt√≥ber', 'november', 'december']
};
var hu_lib_localize_dayValues = {
  narrow: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Sz'],
  short: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
  abbreviated: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
  wide: ['vas√°rnap', 'h√©tf≈ë', 'kedd', 'szerda', 'cs√ºt√∂rt√∂k', 'p√©ntek', 'szombat']
};
var hu_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'de.',
    pm: 'du.',
    midnight: '√©jf√©l',
    noon: 'd√©l',
    morning: 'reggel',
    afternoon: 'du.',
    evening: 'este',
    night: '√©jjel'
  },
  abbreviated: {
    am: 'de.',
    pm: 'du.',
    midnight: '√©jf√©l',
    noon: 'd√©l',
    morning: 'reggel',
    afternoon: 'du.',
    evening: 'este',
    night: '√©jjel'
  },
  wide: {
    am: 'de.',
    pm: 'du.',
    midnight: '√©jf√©l',
    noon: 'd√©l',
    morning: 'reggel',
    afternoon: 'd√©lut√°n',
    evening: 'este',
    night: '√©jjel'
  }
};
var hu_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var hu_lib_localize_localize = {
  ordinalNumber: hu_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    },
    formattingValues: formattingQuarterValues,
    defaultFormattingWidth: 'wide'
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const hu_lib_localize = (hu_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/match/index.js


var hu_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var hu_lib_match_parseOrdinalNumberPattern = /\d+/i;
var hu_lib_match_matchEraPatterns = {
  narrow: /^(ie\.|isz\.)/i,
  abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
  wide: /^(Krisztus el≈ëtt|id≈ësz√°m√≠t√°sunk el≈ëtt|id≈ësz√°m√≠t√°sunk szerint|i\. sz\.)/i
};
var hu_lib_match_parseEraPatterns = {
  narrow: [/ie/i, /isz/i],
  abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
  any: [/el≈ëtt/i, /(szerint|i. sz.)/i]
};
var hu_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^[1234]?\.?\s?n\.√©v/i,
  wide: /^([1234]|I|II|III|IV)?\.?\s?negyed√©v/i
};
var hu_lib_match_parseQuarterPatterns = {
  any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
};
var hu_lib_match_matchMonthPatterns = {
  narrow: /^[jfma√°sond]|sz/i,
  abbreviated: /^(jan\.?|febr\.?|m√°rc\.?|√°pr\.?|m√°j\.?|j√∫n\.?|j√∫l\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
  wide: /^(janu√°r|febru√°r|m√°rcius|√°prilis|m√°jus|j√∫nius|j√∫lius|augusztus|szeptember|okt√≥ber|november|december)/i
};
var hu_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a|√°/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s|sz/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^m√°r/i, /^√°p/i, /^m√°j/i, /^j√∫n/i, /^j√∫l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var hu_lib_match_matchDayPatterns = {
  narrow: /^([vhkpc]|sz|cs|sz)/i,
  short: /^([vhkp]|sze|cs|szo)/i,
  abbreviated: /^([vhkp]|sze|cs|szo)/i,
  wide: /^(vas√°rnap|h√©tf≈ë|kedd|szerda|cs√ºt√∂rt√∂k|p√©ntek|szombat)/i
};
var hu_lib_match_parseDayPatterns = {
  narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
  any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
};
var hu_lib_match_matchDayPeriodPatterns = {
  any: /^((de|du)\.?|√©jf√©l|d√©lut√°n|d√©l|reggel|este|√©jjel)/i
};
var hu_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^de\.?/i,
    pm: /^du\.?/i,
    midnight: /^√©jf/i,
    noon: /^d√©/i,
    morning: /reg/i,
    afternoon: /^d√©lu\.?/i,
    evening: /es/i,
    night: /√©jj/i
  }
};
var hu_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hu_lib_match_matchOrdinalNumberPattern,
    parsePattern: hu_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hu_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hu_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hu_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hu_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: hu_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const hu_lib_match = (hu_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Hungarian locale.
 * @language Hungarian
 * @iso-639-2 hun
 * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
 * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
 * @author Zoltan Szepesi [@twodcube]{@link https://github.com/twodcube}
 */
var hu_locale = {
  code: 'hu',
  formatDistance: hu_lib_formatDistance,
  formatLong: hu_lib_formatLong,
  formatRelative: hu_lib_formatRelative,
  localize: hu_lib_localize,
  match: hu_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const hu = (hu_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/formatDistance/index.js
var hy_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ 1 ’æ’°’µ÷Ä’Ø’µ’°’∂',
    other: '’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ {{count}} ’æ’°’µ÷Ä’Ø’µ’°’∂'
  },
  xSeconds: {
    one: '1 ’æ’°’µ÷Ä’Ø’µ’°’∂',
    other: '{{count}} ’æ’°’µ÷Ä’Ø’µ’°’∂'
  },
  halfAMinute: '’Ø’•’Ω ÷Ä’∏’∫’•',
  lessThanXMinutes: {
    one: '’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ 1 ÷Ä’∏’∫’•',
    other: '’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ {{count}} ÷Ä’∏’∫’•'
  },
  xMinutes: {
    one: '1 ÷Ä’∏’∫’•',
    other: '{{count}} ÷Ä’∏’∫’•'
  },
  aboutXHours: {
    one: '’¥’∏’ø 1 ’™’°’¥',
    other: '’¥’∏’ø {{count}} ’™’°’¥'
  },
  xHours: {
    one: '1 ’™’°’¥',
    other: '{{count}} ’™’°’¥'
  },
  xDays: {
    one: '1 ÷Ö÷Ä',
    other: '{{count}} ÷Ö÷Ä'
  },
  aboutXWeeks: {
    one: '’¥’∏’ø 1 ’∑’°’¢’°’©',
    other: '’¥’∏’ø {{count}} ’∑’°’¢’°’©'
  },
  xWeeks: {
    one: '1 ’∑’°’¢’°’©',
    other: '{{count}} ’∑’°’¢’°’©'
  },
  aboutXMonths: {
    one: '’¥’∏’ø 1 ’°’¥’´’Ω',
    other: '’¥’∏’ø {{count}} ’°’¥’´’Ω'
  },
  xMonths: {
    one: '1 ’°’¥’´’Ω',
    other: '{{count}} ’°’¥’´’Ω'
  },
  aboutXYears: {
    one: '’¥’∏’ø 1 ’ø’°÷Ä’´',
    other: '’¥’∏’ø {{count}} ’ø’°÷Ä’´'
  },
  xYears: {
    one: '1 ’ø’°÷Ä’´',
    other: '{{count}} ’ø’°÷Ä’´'
  },
  overXYears: {
    one: '’°’æ’•’¨’´ ÷Ñ’°’∂ 1 ’ø’°÷Ä’´',
    other: '’°’æ’•’¨’´ ÷Ñ’°’∂ {{count}} ’ø’°÷Ä’´'
  },
  almostXYears: {
    one: '’∞’°’¥’°÷Ä’µ’° 1 ’ø’°÷Ä’´',
    other: '’∞’°’¥’°÷Ä’µ’° {{count}} ’ø’°÷Ä’´'
  }
};
var hy_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = hy_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' ’∞’•’ø’∏';
    } else {
      return result + ' ’°’º’°’ª';
    }
  }
  return result;
};
/* harmony default export */ const hy_lib_formatDistance = (hy_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/formatLong/index.js

var hy_lib_formatLong_dateFormats = {
  full: 'd MMMM, y, EEEE',
  long: 'd MMMM, y',
  medium: 'd MMM, y',
  short: 'dd.MM.yyyy'
};
var hy_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var hy_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '’™‚Ä§'{{time}}",
  long: "{{date}} '’™‚Ä§'{{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var hy_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hy_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hy_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hy_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const hy_lib_formatLong = (hy_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/formatRelative/index.js
var hy_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'’∂’°’≠’∏÷Ä’§' eeee p'÷ä’´’∂'",
  yesterday: "'’•÷Ä’•’Ø' p'÷ä’´’∂'",
  today: "'’°’µ’Ω÷Ö÷Ä' p'÷ä’´’∂'",
  tomorrow: "'’æ’°’≤’®' p'÷ä’´’∂'",
  nextWeek: "'’∞’°’ª’∏÷Ä’§' eeee p'÷ä’´’∂'",
  other: 'P'
};
var hy_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return hy_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const hy_lib_formatRelative = (hy_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/localize/index.js

var hy_lib_localize_eraValues = {
  narrow: ['’î', '’Ñ'],
  abbreviated: ['’î‘±', '’Ñ‘π'],
  wide: ['’î÷Ä’´’Ω’ø’∏’Ω’´÷Å ’°’º’°’ª', '’Ñ’•÷Ä ’©’æ’°÷Ä’Ø’∏÷Ç’©’µ’°’∂']
};
var hy_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['’î1', '’î2', '’î3', '’î4'],
  wide: ['1÷ä’´’∂ ÷Ñ’°’º’∏÷Ä’§', '2÷ä÷Ä’§ ÷Ñ’°’º’∏÷Ä’§', '3÷ä÷Ä’§ ÷Ñ’°’º’∏÷Ä’§', '4÷ä÷Ä’§ ÷Ñ’°’º’∏÷Ä’§']
};
var hy_lib_localize_monthValues = {
  narrow: ['’Ä', '’ì', '’Ñ', '‘±', '’Ñ', '’Ä', '’Ä', '’ï', '’ç', '’Ä', '’Ü', '‘¥'],
  abbreviated: ['’∞’∏÷Ç’∂', '÷É’•’ø', '’¥’°÷Ä', '’°’∫÷Ä', '’¥’°’µ', '’∞’∏÷Ç’∂', '’∞’∏÷Ç’¨', '÷Ö’£’Ω', '’Ω’•’∫', '’∞’∏’Ø', '’∂’∏’µ', '’§’•’Ø'],
  wide: ['’∞’∏÷Ç’∂’æ’°÷Ä', '÷É’•’ø÷Ä’æ’°÷Ä', '’¥’°÷Ä’ø', '’°’∫÷Ä’´’¨', '’¥’°’µ’´’Ω', '’∞’∏÷Ç’∂’´’Ω', '’∞’∏÷Ç’¨’´’Ω', '÷Ö’£’∏’Ω’ø’∏’Ω', '’Ω’•’∫’ø’•’¥’¢’•÷Ä', '’∞’∏’Ø’ø’•’¥’¢’•÷Ä', '’∂’∏’µ’•’¥’¢’•÷Ä', '’§’•’Ø’ø’•’¥’¢’•÷Ä']
};
var hy_lib_localize_dayValues = {
  narrow: ['‘ø', '‘µ', '‘µ', '’â', '’Ä', '’à', '’á'],
  short: ['’Ø÷Ä', '’•÷Ä', '’•÷Ñ', '’π÷Ñ', '’∞’£', '’∏÷Ç÷Ä', '’∑’¢'],
  abbreviated: ['’Ø’´÷Ä', '’•÷Ä’Ø', '’•÷Ä÷Ñ', '’π’∏÷Ä', '’∞’∂’£', '’∏÷Ç÷Ä’¢', '’∑’°’¢'],
  wide: ['’Ø’´÷Ä’°’Ø’´', '’•÷Ä’Ø’∏÷Ç’∑’°’¢’©’´', '’•÷Ä’•÷Ñ’∑’°’¢’©’´', '’π’∏÷Ä’•÷Ñ’∑’°’¢’©’´', '’∞’´’∂’£’∑’°’¢’©’´', '’∏÷Ç÷Ä’¢’°’©', '’∑’°’¢’°’©']
};
var hy_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: '’Ø’•’Ω’£’∑',
    noon: '’Ø’•’Ω÷Ö÷Ä',
    morning: '’°’º’°’æ’∏’ø',
    afternoon: '÷Å’•÷Ä’•’Ø',
    evening: '’•÷Ä’•’Ø’∏',
    night: '’£’´’∑’•÷Ä'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '’Ø’•’Ω’£’´’∑’•÷Ä',
    noon: '’Ø’•’Ω÷Ö÷Ä',
    morning: '’°’º’°’æ’∏’ø',
    afternoon: '÷Å’•÷Ä’•’Ø',
    evening: '’•÷Ä’•’Ø’∏',
    night: '’£’´’∑’•÷Ä'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: '’Ø’•’Ω’£’´’∑’•÷Ä',
    noon: '’Ø’•’Ω÷Ö÷Ä',
    morning: '’°’º’°’æ’∏’ø',
    afternoon: '÷Å’•÷Ä’•’Ø',
    evening: '’•÷Ä’•’Ø’∏',
    night: '’£’´’∑’•÷Ä'
  }
};
var hy_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: '’Ø’•’Ω’£’∑',
    noon: '’Ø’•’Ω÷Ö÷Ä',
    morning: '’°’º’°’æ’∏’ø’®',
    afternoon: '÷Å’•÷Ä’•’Ø’®',
    evening: '’•÷Ä’•’Ø’∏’µ’°’∂',
    night: '’£’´’∑’•÷Ä’®'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '’Ø’•’Ω’£’´’∑’•÷Ä’´’∂',
    noon: '’Ø’•’Ω÷Ö÷Ä’´’∂',
    morning: '’°’º’°’æ’∏’ø’®',
    afternoon: '÷Å’•÷Ä’•’Ø’®',
    evening: '’•÷Ä’•’Ø’∏’µ’°’∂',
    night: '’£’´’∑’•÷Ä’®'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: '’Ø’•’Ω’£’´’∑’•÷Ä’´’∂',
    noon: '’Ø’•’Ω÷Ö÷Ä’´’∂',
    morning: '’°’º’°’æ’∏’ø’®',
    afternoon: '÷Å’•÷Ä’•’Ø’®',
    evening: '’•÷Ä’•’Ø’∏’µ’°’∂',
    night: '’£’´’∑’•÷Ä’®'
  }
};
var hy_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;
  if (rem100 < 10) {
    if (rem100 % 10 === 1) {
      return number + '÷ä’´’∂';
    }
  }
  return number + '÷ä÷Ä’§';
};
var hy_lib_localize_localize = {
  ordinalNumber: hy_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: hy_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const hy_lib_localize = (hy_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/match/index.js


var hy_lib_match_matchOrdinalNumberPattern = /^(\d+)((-|÷ä)?(’´’∂|÷Ä’§))?/i;
var hy_lib_match_parseOrdinalNumberPattern = /\d+/i;
var hy_lib_match_matchEraPatterns = {
  narrow: /^(’î|’Ñ)/i,
  abbreviated: /^(’î\.?\s?‘±\.?|’Ñ\.?\s?‘π\.?\s?‘±\.?|’Ñ\.?\s?‘π\.?|’î\.?\s?’Ä\.?)/i,
  wide: /^(÷Ñ÷Ä’´’Ω’ø’∏’Ω’´÷Å ’°’º’°’ª|’¥’•÷Ä ’©’æ’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’´÷Å ’°’º’°’ª|’¥’•÷Ä ’©’æ’°÷Ä’Ø’∏÷Ç’©’µ’°’∂|÷Ñ÷Ä’´’Ω’ø’∏’Ω’´÷Å ’∞’•’ø’∏)/i
};
var hy_lib_match_parseEraPatterns = {
  any: [/^÷Ñ/i, /^’¥/i]
};
var hy_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^÷Ñ[1234]/i,
  wide: /^[1234]((-|÷ä)?(’´’∂|÷Ä’§)) ÷Ñ’°’º’∏÷Ä’§/i
};
var hy_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var hy_lib_match_matchMonthPatterns = {
  narrow: /^[’∞÷É’¥’°÷Ö’Ω’∂’§]/i,
  abbreviated: /^(’∞’∏÷Ç’∂|÷É’•’ø|’¥’°÷Ä|’°’∫÷Ä|’¥’°’µ|’∞’∏÷Ç’∂|’∞’∏÷Ç’¨|÷Ö’£’Ω|’Ω’•’∫|’∞’∏’Ø|’∂’∏’µ|’§’•’Ø)/i,
  wide: /^(’∞’∏÷Ç’∂’æ’°÷Ä|÷É’•’ø÷Ä’æ’°÷Ä|’¥’°÷Ä’ø|’°’∫÷Ä’´’¨|’¥’°’µ’´’Ω|’∞’∏÷Ç’∂’´’Ω|’∞’∏÷Ç’¨’´’Ω|÷Ö’£’∏’Ω’ø’∏’Ω|’Ω’•’∫’ø’•’¥’¢’•÷Ä|’∞’∏’Ø’ø’•’¥’¢’•÷Ä|’∂’∏’µ’•’¥’¢’•÷Ä|’§’•’Ø’ø’•’¥’¢’•÷Ä)/i
};
var hy_lib_match_parseMonthPatterns = {
  narrow: [/^’∞/i, /^÷É/i, /^’¥/i, /^’°/i, /^’¥/i, /^’∞/i, /^’∞/i, /^÷Ö/i, /^’Ω/i, /^’∞/i, /^’∂/i, /^’§/i],
  any: [/^’∞’∏÷Ç/i, /^÷É/i, /^’¥’°÷Ä/i, /^’°/i, /^’¥’°’µ/i, /^’∞’∏÷Ç’∂/i, /^’∞’∏÷Ç’¨/i, /^÷Ö/i, /^’Ω/i, /^’∞’∏’Ø/i, /^’∂/i, /^’§/i]
};
var hy_lib_match_matchDayPatterns = {
  narrow: /^[’•’π’∞’∏’∑’Ø]/i,
  short: /^(’Ø÷Ä|’•÷Ä|’•÷Ñ|’π÷Ñ|’∞’£|’∏÷Ç÷Ä|’∑’¢)/i,
  abbreviated: /^(’Ø’´÷Ä|’•÷Ä’Ø|’•÷Ä÷Ñ|’π’∏÷Ä|’∞’∂’£|’∏÷Ç÷Ä’¢|’∑’°’¢)/i,
  wide: /^(’Ø’´÷Ä’°’Ø’´|’•÷Ä’Ø’∏÷Ç’∑’°’¢’©’´|’•÷Ä’•÷Ñ’∑’°’¢’©’´|’π’∏÷Ä’•÷Ñ’∑’°’¢’©’´|’∞’´’∂’£’∑’°’¢’©’´|’∏÷Ç÷Ä’¢’°’©|’∑’°’¢’°’©)/i
};
var hy_lib_match_parseDayPatterns = {
  narrow: [/^’Ø/i, /^’•/i, /^’•/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i],
  short: [/^’Ø/i, /^’•÷Ä/i, /^’•÷Ñ/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i],
  abbreviated: [/^’Ø/i, /^’•÷Ä’Ø/i, /^’•÷Ä÷Ñ/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i],
  wide: [/^’Ø/i, /^’•÷Ä’Ø/i, /^’•÷Ä’•/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i]
};
var hy_lib_match_matchDayPeriodPatterns = {
  narrow: /^([ap]|’Ø’•’Ω’£’∑|’Ø’•’Ω÷Ö÷Ä|(’°’º’°’æ’∏’ø’®?|÷Å’•÷Ä’•’Ø’®?|’•÷Ä’•’Ø’∏(’µ’°’∂)?|’£’´’∑’•÷Ä’®?))/i,
  any: /^([ap]\.?\s?m\.?|’Ø’•’Ω’£’´’∑’•÷Ä(’´’∂)?|’Ø’•’Ω÷Ö÷Ä(’´’∂)?|(’°’º’°’æ’∏’ø’®?|÷Å’•÷Ä’•’Ø’®?|’•÷Ä’•’Ø’∏(’µ’°’∂)?|’£’´’∑’•÷Ä’®?))/i
};
var hy_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /’Ø’•’Ω’£’´’∑’•÷Ä/i,
    noon: /’Ø’•’Ω÷Ö÷Ä/i,
    morning: /’°’º’°’æ’∏’ø/i,
    afternoon: /÷Å’•÷Ä’•’Ø/i,
    evening: /’•÷Ä’•’Ø’∏/i,
    night: /’£’´’∑’•÷Ä/i
  }
};
var hy_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hy_lib_match_matchOrdinalNumberPattern,
    parsePattern: hy_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hy_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hy_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hy_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: hy_lib_match_parseDayPatterns,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: hy_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const hy_lib_match = (hy_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Armenian locale
 * @language Armenian
 * @iso-639-2 arm
 * @author Alex Igityan [@alexigityan]{@link https://github.com/alexigityan}
 */
var hy_locale = {
  code: 'hy',
  formatDistance: hy_lib_formatDistance,
  formatLong: hy_lib_formatLong,
  formatRelative: hy_lib_formatRelative,
  localize: hy_lib_localize,
  match: hy_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const hy = (hy_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/formatDistance/index.js
var id_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'kurang dari 1 detik',
    other: 'kurang dari {{count}} detik'
  },
  xSeconds: {
    one: '1 detik',
    other: '{{count}} detik'
  },
  halfAMinute: 'setengah menit',
  lessThanXMinutes: {
    one: 'kurang dari 1 menit',
    other: 'kurang dari {{count}} menit'
  },
  xMinutes: {
    one: '1 menit',
    other: '{{count}} menit'
  },
  aboutXHours: {
    one: 'sekitar 1 jam',
    other: 'sekitar {{count}} jam'
  },
  xHours: {
    one: '1 jam',
    other: '{{count}} jam'
  },
  xDays: {
    one: '1 hari',
    other: '{{count}} hari'
  },
  aboutXWeeks: {
    one: 'sekitar 1 minggu',
    other: 'sekitar {{count}} minggu'
  },
  xWeeks: {
    one: '1 minggu',
    other: '{{count}} minggu'
  },
  aboutXMonths: {
    one: 'sekitar 1 bulan',
    other: 'sekitar {{count}} bulan'
  },
  xMonths: {
    one: '1 bulan',
    other: '{{count}} bulan'
  },
  aboutXYears: {
    one: 'sekitar 1 tahun',
    other: 'sekitar {{count}} tahun'
  },
  xYears: {
    one: '1 tahun',
    other: '{{count}} tahun'
  },
  overXYears: {
    one: 'lebih dari 1 tahun',
    other: 'lebih dari {{count}} tahun'
  },
  almostXYears: {
    one: 'hampir 1 tahun',
    other: 'hampir {{count}} tahun'
  }
};
var id_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = id_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'dalam waktu ' + result;
    } else {
      return result + ' yang lalu';
    }
  }
  return result;
};
/* harmony default export */ const id_lib_formatDistance = (id_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/formatLong/index.js

var id_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'd/M/yyyy'
};
var id_lib_formatLong_timeFormats = {
  full: 'HH.mm.ss',
  long: 'HH.mm.ss',
  medium: 'HH.mm',
  short: 'HH.mm'
};
var id_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var id_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: id_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: id_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: id_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const id_lib_formatLong = (id_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/formatRelative/index.js
var id_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'lalu pukul' p",
  yesterday: "'Kemarin pukul' p",
  today: "'Hari ini pukul' p",
  tomorrow: "'Besok pukul' p",
  nextWeek: "eeee 'pukul' p",
  other: 'P'
};
var id_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return id_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const id_lib_formatRelative = (id_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/localize/index.js
 // All data for localization are taken from this page
// https://www.unicode.org/cldr/charts/32/summary/id.html
var id_lib_localize_eraValues = {
  narrow: ['SM', 'M'],
  abbreviated: ['SM', 'M'],
  wide: ['Sebelum Masehi', 'Masehi']
};
var id_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['Kuartal ke-1', 'Kuartal ke-2', 'Kuartal ke-3', 'Kuartal ke-4']
};

// Note: in Indonesian, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var id_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agt', 'Sep', 'Okt', 'Nov', 'Des'],
  wide: ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
};
var id_lib_localize_dayValues = {
  narrow: ['M', 'S', 'S', 'R', 'K', 'J', 'S'],
  short: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
  abbreviated: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
  wide: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu']
};
var id_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  }
};
var id_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  }
};
var id_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  // Can't use "pertama", "kedua" because can't be parsed

  return 'ke-' + number;
};
var id_lib_localize_localize = {
  ordinalNumber: id_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: id_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const id_lib_localize = (id_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/match/index.js


var id_lib_match_matchOrdinalNumberPattern = /^ke-(\d+)?/i;
var id_lib_match_parseOrdinalNumberPattern = /\d+/i;
var id_lib_match_matchEraPatterns = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
  wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
};
var id_lib_match_parseEraPatterns = {
  any: [/^s/i, /^(m|e)/i]
};
var id_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K-?\s[1234]/i,
  wide: /^Kuartal ke-?\s?[1234]/i
};
var id_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var id_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
  wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
};
var id_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var id_lib_match_matchDayPatterns = {
  narrow: /^[srkjm]/i,
  short: /^(min|sen|sel|rab|kam|jum|sab)/i,
  abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
  wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
};
var id_lib_match_parseDayPatterns = {
  narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var id_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
};
var id_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pagi/i,
    afternoon: /siang/i,
    evening: /sore/i,
    night: /malam/i
  }
};
var id_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: id_lib_match_matchOrdinalNumberPattern,
    parsePattern: id_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: id_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: id_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: id_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: id_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: id_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const id_lib_match = (id_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Indonesian locale.
 * @language Indonesian
 * @iso-639-2 ind
 * @author Rahmat Budiharso [@rbudiharso]{@link https://github.com/rbudiharso}
 * @author Benget Nata [@bentinata]{@link https://github.com/bentinata}
 * @author Budi Irawan [@deerawan]{@link https://github.com/deerawan}
 * @author Try Ajitiono [@imballinst]{@link https://github.com/imballinst}
 */
var id_locale = {
  code: 'id',
  formatDistance: id_lib_formatDistance,
  formatLong: id_lib_formatLong,
  formatRelative: id_lib_formatRelative,
  localize: id_lib_localize,
  match: id_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const id = (id_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/formatDistance/index.js
var is_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'minna en 1 sek√∫nda',
    other: 'minna en {{count}} sek√∫ndur'
  },
  xSeconds: {
    one: '1 sek√∫nda',
    other: '{{count}} sek√∫ndur'
  },
  halfAMinute: 'h√°lf m√≠n√∫ta',
  lessThanXMinutes: {
    one: 'minna en 1 m√≠n√∫ta',
    other: 'minna en {{count}} m√≠n√∫tur'
  },
  xMinutes: {
    one: '1 m√≠n√∫ta',
    other: '{{count}} m√≠n√∫tur'
  },
  aboutXHours: {
    one: 'u.√æ.b. 1 klukkustund',
    other: 'u.√æ.b. {{count}} klukkustundir'
  },
  xHours: {
    one: '1 klukkustund',
    other: '{{count}} klukkustundir'
  },
  xDays: {
    one: '1 dagur',
    other: '{{count}} dagar'
  },
  aboutXWeeks: {
    one: 'um viku',
    other: 'um {{count}} vikur'
  },
  xWeeks: {
    one: '1 viku',
    other: '{{count}} vikur'
  },
  aboutXMonths: {
    one: 'u.√æ.b. 1 m√°nu√∞ur',
    other: 'u.√æ.b. {{count}} m√°nu√∞ir'
  },
  xMonths: {
    one: '1 m√°nu√∞ur',
    other: '{{count}} m√°nu√∞ir'
  },
  aboutXYears: {
    one: 'u.√æ.b. 1 √°r',
    other: 'u.√æ.b. {{count}} √°r'
  },
  xYears: {
    one: '1 √°r',
    other: '{{count}} √°r'
  },
  overXYears: {
    one: 'meira en 1 √°r',
    other: 'meira en {{count}} √°r'
  },
  almostXYears: {
    one: 'n√¶stum 1 √°r',
    other: 'n√¶stum {{count}} √°r'
  }
};
var is_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = is_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '√≠ ' + result;
    } else {
      return result + ' s√≠√∞an';
    }
  }
  return result;
};
/* harmony default export */ const is_lib_formatDistance = (is_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/formatLong/index.js

var is_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM y',
  long: 'do MMMM y',
  medium: 'do MMM y',
  short: 'd.MM.y'
};
var is_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var is_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var is_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: is_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: is_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: is_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const is_lib_formatLong = (is_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/formatRelative/index.js
var is_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'s√≠√∞asta' dddd 'kl.' p",
  yesterday: "'√≠ g√¶r kl.' p",
  today: "'√≠ dag kl.' p",
  tomorrow: "'√° morgun kl.' p",
  nextWeek: "dddd 'kl.' p",
  other: 'P'
};
var is_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return is_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const is_lib_formatRelative = (is_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/localize/index.js

var is_lib_localize_eraValues = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['fyrir Krist', 'eftir Krist']
};
var is_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1F', '2F', '3F', '4F'],
  wide: ['1. fj√≥r√∞ungur', '2. fj√≥r√∞ungur', '3. fj√≥r√∞ungur', '4. fj√≥r√∞ungur']
};
var is_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', '√Å', 'S', '√ì', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr√≠l', 'ma√≠', 'j√∫n√≠', 'j√∫l√≠', '√°g√∫st', 'sept.', 'okt.', 'n√≥v.', 'des.'],
  wide: ['jan√∫ar', 'febr√∫ar', 'mars', 'apr√≠l', 'ma√≠', 'j√∫n√≠', 'j√∫l√≠', '√°g√∫st', 'september', 'okt√≥ber', 'n√≥vember', 'desember']
};
var is_lib_localize_dayValues = {
  narrow: ['S', 'M', '√û', 'M', 'F', 'F', 'L'],
  short: ['Su', 'M√°', '√ûr', 'Mi', 'Fi', 'F√∂', 'La'],
  abbreviated: ['sun.', 'm√°n.', '√æri.', 'mi√∞.', 'fim.', 'f√∂s.', 'lau.'],
  wide: ['sunnudagur', 'm√°nudagur', '√æri√∞judagur', 'mi√∞vikudagur', 'fimmtudagur', 'f√∂studagur', 'laugardagur']
};
var is_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'f',
    pm: 'e',
    midnight: 'mi√∞n√¶tti',
    noon: 'h√°degi',
    morning: 'morgunn',
    afternoon: 's√≠√∞degi',
    evening: 'kv√∂ld',
    night: 'n√≥tt'
  },
  abbreviated: {
    am: 'f.h.',
    pm: 'e.h.',
    midnight: 'mi√∞n√¶tti',
    noon: 'h√°degi',
    morning: 'morgunn',
    afternoon: 's√≠√∞degi',
    evening: 'kv√∂ld',
    night: 'n√≥tt'
  },
  wide: {
    am: 'fyrir h√°degi',
    pm: 'eftir h√°degi',
    midnight: 'mi√∞n√¶tti',
    noon: 'h√°degi',
    morning: 'morgunn',
    afternoon: 's√≠√∞degi',
    evening: 'kv√∂ld',
    night: 'n√≥tt'
  }
};
var is_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'f',
    pm: 'e',
    midnight: '√° mi√∞n√¶tti',
    noon: '√° h√°degi',
    morning: 'a√∞ morgni',
    afternoon: 's√≠√∞degis',
    evening: 'um kv√∂ld',
    night: 'um n√≥tt'
  },
  abbreviated: {
    am: 'f.h.',
    pm: 'e.h.',
    midnight: '√° mi√∞n√¶tti',
    noon: '√° h√°degi',
    morning: 'a√∞ morgni',
    afternoon: 's√≠√∞degis',
    evening: 'um kv√∂ld',
    night: 'um n√≥tt'
  },
  wide: {
    am: 'fyrir h√°degi',
    pm: 'eftir h√°degi',
    midnight: '√° mi√∞n√¶tti',
    noon: '√° h√°degi',
    morning: 'a√∞ morgni',
    afternoon: 's√≠√∞degis',
    evening: 'um kv√∂ld',
    night: 'um n√≥tt'
  }
};
var is_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var is_lib_localize_localize = {
  ordinalNumber: is_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: is_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const is_lib_localize = (is_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/match/index.js


var is_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var is_lib_match_parseOrdinalNumberPattern = /\d+(\.)?/i;
var is_lib_match_matchEraPatterns = {
  narrow: /^(f\.Kr\.|e\.Kr\.)/i,
  abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
  wide: /^(fyrir Krist|eftir Krist)/i
};
var is_lib_match_parseEraPatterns = {
  any: [/^(f\.Kr\.)/i, /^(e\.Kr\.)/i]
};
var is_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^q[1234]\.?/i,
  wide: /^[1234]\.? fj√≥r√∞ungur/i
};
var is_lib_match_parseQuarterPatterns = {
  any: [/1\.?/i, /2\.?/i, /3\.?/i, /4\.?/i]
};
var is_lib_match_matchMonthPatterns = {
  narrow: /^[jfm√°s√≥nd]/i,
  abbreviated: /^(jan\.|feb\.|mars\.|apr√≠l\.|ma√≠|j√∫n√≠|j√∫l√≠|√°gust|sep\.|oct\.|nov\.|dec\.)/i,
  wide: /^(januar|febr√∫ar|mars|apr√≠l|ma√≠|j√∫n√≠|j√∫l√≠|√°gust|september|okt√≥ber|n√≥vember|desember)/i
};
var is_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^√°/i, /^s/i, /^√≥/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^ma√≠/i, /^j√∫n/i, /^j√∫l/i, /^√°u/i, /^s/i, /^√≥/i, /^n/i, /^d/i]
};
var is_lib_match_matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|m√°|√ær|mi|fi|f√∂|la)/i,
  abbreviated: /^(sun|m√°n|√æri|mi√∞|fim|f√∂s|lau)\.?/i,
  wide: /^(sunnudagur|m√°nudagur|√æri√∞judagur|mi√∞vikudagur|fimmtudagur|f√∂studagur|laugardagur)/i
};
var is_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^√æ/i, /^m/i, /^f/i, /^f/i, /^l/i],
  any: [/^su/i, /^m√°/i, /^√ær/i, /^mi/i, /^fi/i, /^f√∂/i, /^la/i]
};
var is_lib_match_matchDayPeriodPatterns = {
  narrow: /^(f|e|s√≠√∞degis|(√°|a√∞|um) (morgni|kv√∂ld|n√≥tt|mi√∞n√¶tti))/i,
  any: /^(fyrir h√°degi|eftir h√°degi|[ef]\.?h\.?|s√≠√∞degis|morgunn|(√°|a√∞|um) (morgni|kv√∂ld|n√≥tt|mi√∞n√¶tti))/i
};
var is_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^mi/i,
    noon: /^h√°/i,
    morning: /morgunn/i,
    afternoon: /s√≠√∞degi/i,
    evening: /kv√∂ld/i,
    night: /n√≥tt/i
  }
};
var is_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: is_lib_match_matchOrdinalNumberPattern,
    parsePattern: is_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: is_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: is_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: is_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: is_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: is_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const is_lib_match = (is_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Icelandic locale.
 * @language Icelandic
 * @iso-639-2 isl
 * @author Derek Blank [@derekblank]{@link https://github.com/derekblank}
 * @author Arn√≥r √ùmir [@lamayg]{@link https://github.com/lamayg}
 */
var is_locale = {
  code: 'is',
  formatDistance: is_lib_formatDistance,
  formatLong: is_lib_formatLong,
  formatRelative: is_lib_formatRelative,
  localize: is_lib_localize,
  match: is_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const is = (is_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/formatDistance/index.js
var it_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'meno di un secondo',
    other: 'meno di {{count}} secondi'
  },
  xSeconds: {
    one: 'un secondo',
    other: '{{count}} secondi'
  },
  halfAMinute: 'alcuni secondi',
  lessThanXMinutes: {
    one: 'meno di un minuto',
    other: 'meno di {{count}} minuti'
  },
  xMinutes: {
    one: 'un minuto',
    other: '{{count}} minuti'
  },
  aboutXHours: {
    one: "circa un'ora",
    other: 'circa {{count}} ore'
  },
  xHours: {
    one: "un'ora",
    other: '{{count}} ore'
  },
  xDays: {
    one: 'un giorno',
    other: '{{count}} giorni'
  },
  aboutXWeeks: {
    one: 'circa una settimana',
    other: 'circa {{count}} settimane'
  },
  xWeeks: {
    one: 'una settimana',
    other: '{{count}} settimane'
  },
  aboutXMonths: {
    one: 'circa un mese',
    other: 'circa {{count}} mesi'
  },
  xMonths: {
    one: 'un mese',
    other: '{{count}} mesi'
  },
  aboutXYears: {
    one: 'circa un anno',
    other: 'circa {{count}} anni'
  },
  xYears: {
    one: 'un anno',
    other: '{{count}} anni'
  },
  overXYears: {
    one: 'pi√π di un anno',
    other: 'pi√π di {{count}} anni'
  },
  almostXYears: {
    one: 'quasi un anno',
    other: 'quasi {{count}} anni'
  }
};
var it_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = it_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'tra ' + result;
    } else {
      return result + ' fa';
    }
  }
  return result;
};
/* harmony default export */ const it_lib_formatDistance = (it_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/formatLong/index.js

var it_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var it_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var it_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var it_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: it_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: it_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: it_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const it_lib_formatLong = (it_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/formatRelative/index.js

var formatRelative_weekdays = ['domenica', 'luned√¨', 'marted√¨', 'mercoled√¨', 'gioved√¨', 'venerd√¨', 'sabato'];
function _lastWeek(day) {
  switch (day) {
    case 0:
      return "'domenica scorsa alle' p";
    default:
      return "'" + formatRelative_weekdays[day] + " scorso alle' p";
  }
}
function it_lib_formatRelative_thisWeek(day) {
  return "'" + formatRelative_weekdays[day] + " alle' p";
}
function _nextWeek(day) {
  switch (day) {
    case 0:
      return "'domenica prossima alle' p";
    default:
      return "'" + formatRelative_weekdays[day] + " prossimo alle' p";
  }
}
var it_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return it_lib_formatRelative_thisWeek(day);
    } else {
      return _lastWeek(day);
    }
  },
  yesterday: "'ieri alle' p",
  today: "'oggi alle' p",
  tomorrow: "'domani alle' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return it_lib_formatRelative_thisWeek(day);
    } else {
      return _nextWeek(day);
    }
  },
  other: 'P'
};
var it_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = it_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const it_lib_formatRelative = (it_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/localize/index.js

var it_lib_localize_eraValues = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a.C.', 'd.C.'],
  wide: ['avanti Cristo', 'dopo Cristo']
};
var it_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1¬∫ trimestre', '2¬∫ trimestre', '3¬∫ trimestre', '4¬∫ trimestre']
};
var it_lib_localize_monthValues = {
  narrow: ['G', 'F', 'M', 'A', 'M', 'G', 'L', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic'],
  wide: ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre']
};
var it_lib_localize_dayValues = {
  narrow: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
  short: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
  abbreviated: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
  wide: ['domenica', 'luned√¨', 'marted√¨', 'mercoled√¨', 'gioved√¨', 'venerd√¨', 'sabato']
};
var it_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'm.',
    pm: 'p.',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  }
};
var it_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'm.',
    pm: 'p.',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  }
};
var it_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return String(number);
};
var it_lib_localize_localize = {
  ordinalNumber: it_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: it_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const it_lib_localize = (it_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/match/index.js


var it_lib_match_matchOrdinalNumberPattern = /^(\d+)(¬∫)?/i;
var it_lib_match_parseOrdinalNumberPattern = /\d+/i;
var it_lib_match_matchEraPatterns = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
  wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
};
var it_lib_match_parseEraPatterns = {
  any: [/^a/i, /^(d|e)/i]
};
var it_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](¬∫)? trimestre/i
};
var it_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var it_lib_match_matchMonthPatterns = {
  narrow: /^[gfmalsond]/i,
  abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
  wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
};
var it_lib_match_parseMonthPatterns = {
  narrow: [/^g/i, /^f/i, /^m/i, /^a/i, /^m/i, /^g/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ge/i, /^f/i, /^mar/i, /^ap/i, /^mag/i, /^gi/i, /^l/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var it_lib_match_matchDayPatterns = {
  narrow: /^[dlmgvs]/i,
  short: /^(do|lu|ma|me|gi|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
  wide: /^(domenica|luned[i|√¨]|marted[i|√¨]|mercoled[i|√¨]|gioved[i|√¨]|venerd[i|√¨]|sabato)/i
};
var it_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
};
var it_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
  any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
};
var it_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mezza/i,
    noon: /^mezzo/i,
    morning: /mattina/i,
    afternoon: /pomeriggio/i,
    evening: /sera/i,
    night: /notte/i
  }
};
var it_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: it_lib_match_matchOrdinalNumberPattern,
    parsePattern: it_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: it_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: it_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: it_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: it_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: it_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const it_lib_match = (it_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Italian locale.
 * @language Italian
 * @iso-639-2 ita
 * @author Alberto Restifo [@albertorestifo]{@link https://github.com/albertorestifo}
 * @author Giovanni Polimeni [@giofilo]{@link https://github.com/giofilo}
 * @author Vincenzo Carrese [@vin-car]{@link https://github.com/vin-car}
 */
var it_locale = {
  code: 'it',
  formatDistance: it_lib_formatDistance,
  formatLong: it_lib_formatLong,
  formatRelative: it_lib_formatRelative,
  localize: it_lib_localize,
  match: it_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const it = (it_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it-CH/_lib/formatLong/index.js

var it_CH_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.y'
};
var it_CH_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var it_CH_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var it_CH_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: it_CH_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: it_CH_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: it_CH_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const it_CH_lib_formatLong = (it_CH_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it-CH/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Italian locale (Switzerland).
 * @language Italian
 * @iso-639-2 ita
 * @author Mike Peyer [@maic66]{@link https://github.com/maic66}
 */
var it_CH_locale = {
  code: 'it-CH',
  formatDistance: it_lib_formatDistance,
  formatLong: it_CH_lib_formatLong,
  formatRelative: it_lib_formatRelative,
  localize: it_lib_localize,
  match: it_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const it_CH = (it_CH_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/formatDistance/index.js
var ja_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '1ÁßíÊú™Ê∫Ä',
    other: '{{count}}ÁßíÊú™Ê∫Ä',
    oneWithSuffix: 'Á¥Ñ1Áßí',
    otherWithSuffix: 'Á¥Ñ{{count}}Áßí'
  },
  xSeconds: {
    one: '1Áßí',
    other: '{{count}}Áßí'
  },
  halfAMinute: '30Áßí',
  lessThanXMinutes: {
    one: '1ÂàÜÊú™Ê∫Ä',
    other: '{{count}}ÂàÜÊú™Ê∫Ä',
    oneWithSuffix: 'Á¥Ñ1ÂàÜ',
    otherWithSuffix: 'Á¥Ñ{{count}}ÂàÜ'
  },
  xMinutes: {
    one: '1ÂàÜ',
    other: '{{count}}ÂàÜ'
  },
  aboutXHours: {
    one: 'Á¥Ñ1ÊôÇÈñì',
    other: 'Á¥Ñ{{count}}ÊôÇÈñì'
  },
  xHours: {
    one: '1ÊôÇÈñì',
    other: '{{count}}ÊôÇÈñì'
  },
  xDays: {
    one: '1Êó•',
    other: '{{count}}Êó•'
  },
  aboutXWeeks: {
    one: 'Á¥Ñ1ÈÄ±Èñì',
    other: 'Á¥Ñ{{count}}ÈÄ±Èñì'
  },
  xWeeks: {
    one: '1ÈÄ±Èñì',
    other: '{{count}}ÈÄ±Èñì'
  },
  aboutXMonths: {
    one: 'Á¥Ñ1„ÅãÊúà',
    other: 'Á¥Ñ{{count}}„ÅãÊúà'
  },
  xMonths: {
    one: '1„ÅãÊúà',
    other: '{{count}}„ÅãÊúà'
  },
  aboutXYears: {
    one: 'Á¥Ñ1Âπ¥',
    other: 'Á¥Ñ{{count}}Âπ¥'
  },
  xYears: {
    one: '1Âπ¥',
    other: '{{count}}Âπ¥'
  },
  overXYears: {
    one: '1Âπ¥‰ª•‰∏ä',
    other: '{{count}}Âπ¥‰ª•‰∏ä'
  },
  almostXYears: {
    one: '1Âπ¥Ëøë„Åè',
    other: '{{count}}Âπ¥Ëøë„Åè'
  }
};
var ja_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  var result;
  var tokenValue = ja_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', String(count));
    }
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'Âæå';
    } else {
      return result + 'Ââç';
    }
  }
  return result;
};
/* harmony default export */ const ja_lib_formatDistance = (ja_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/formatLong/index.js

var ja_lib_formatLong_dateFormats = {
  full: 'yÂπ¥MÊúàdÊó•EEEE',
  long: 'yÂπ¥MÊúàdÊó•',
  medium: 'y/MM/dd',
  short: 'y/MM/dd'
};
var ja_lib_formatLong_timeFormats = {
  full: 'HÊôÇmmÂàÜssÁßí zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var ja_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var ja_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ja_lib_formatLong = (ja_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/formatRelative/index.js
var ja_lib_formatRelative_formatRelativeLocale = {
  lastWeek: 'ÂÖàÈÄ±„ÅÆeeee„ÅÆp',
  yesterday: 'Êò®Êó•„ÅÆp',
  today: '‰ªäÊó•„ÅÆp',
  tomorrow: 'ÊòéÊó•„ÅÆp',
  nextWeek: 'ÁøåÈÄ±„ÅÆeeee„ÅÆp',
  other: 'P'
};
var ja_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ja_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ja_lib_formatRelative = (ja_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/localize/index.js

var ja_lib_localize_eraValues = {
  narrow: ['BC', 'AC'],
  abbreviated: ['Á¥ÄÂÖÉÂâç', 'Ë•øÊö¶'],
  wide: ['Á¥ÄÂÖÉÂâç', 'Ë•øÊö¶']
};
var ja_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['Á¨¨1ÂõõÂçäÊúü', 'Á¨¨2ÂõõÂçäÊúü', 'Á¨¨3ÂõõÂçäÊúü', 'Á¨¨4ÂõõÂçäÊúü']
};
var ja_lib_localize_monthValues = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà'],
  wide: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà']
};
var ja_lib_localize_dayValues = {
  narrow: ['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü'],
  short: ['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü'],
  abbreviated: ['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü'],
  wide: ['Êó•ÊõúÊó•', 'ÊúàÊõúÊó•', 'ÁÅ´ÊõúÊó•', 'Ê∞¥ÊõúÊó•', 'Êú®ÊõúÊó•', 'ÈáëÊõúÊó•', 'ÂúüÊõúÊó•']
};
var ja_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÂçàÂâç',
    pm: 'ÂçàÂæå',
    midnight: 'Ê∑±Â§ú',
    noon: 'Ê≠£Âçà',
    morning: 'Êúù',
    afternoon: 'ÂçàÂæå',
    evening: 'Â§ú',
    night: 'Ê∑±Â§ú'
  },
  abbreviated: {
    am: 'ÂçàÂâç',
    pm: 'ÂçàÂæå',
    midnight: 'Ê∑±Â§ú',
    noon: 'Ê≠£Âçà',
    morning: 'Êúù',
    afternoon: 'ÂçàÂæå',
    evening: 'Â§ú',
    night: 'Ê∑±Â§ú'
  },
  wide: {
    am: 'ÂçàÂâç',
    pm: 'ÂçàÂæå',
    midnight: 'Ê∑±Â§ú',
    noon: 'Ê≠£Âçà',
    morning: 'Êúù',
    afternoon: 'ÂçàÂæå',
    evening: 'Â§ú',
    night: 'Ê∑±Â§ú'
  }
};
var ja_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÂçàÂâç',
    pm: 'ÂçàÂæå',
    midnight: 'Ê∑±Â§ú',
    noon: 'Ê≠£Âçà',
    morning: 'Êúù',
    afternoon: 'ÂçàÂæå',
    evening: 'Â§ú',
    night: 'Ê∑±Â§ú'
  },
  abbreviated: {
    am: 'ÂçàÂâç',
    pm: 'ÂçàÂæå',
    midnight: 'Ê∑±Â§ú',
    noon: 'Ê≠£Âçà',
    morning: 'Êúù',
    afternoon: 'ÂçàÂæå',
    evening: 'Â§ú',
    night: 'Ê∑±Â§ú'
  },
  wide: {
    am: 'ÂçàÂâç',
    pm: 'ÂçàÂæå',
    midnight: 'Ê∑±Â§ú',
    noon: 'Ê≠£Âçà',
    morning: 'Êúù',
    afternoon: 'ÂçàÂæå',
    evening: 'Â§ú',
    night: 'Ê∑±Â§ú'
  }
};
var ja_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case 'year':
      return "".concat(number, "\u5E74");
    case 'quarter':
      return "\u7B2C".concat(number, "\u56DB\u534A\u671F");
    case 'month':
      return "".concat(number, "\u6708");
    case 'week':
      return "\u7B2C".concat(number, "\u9031");
    case 'date':
      return "".concat(number, "\u65E5");
    case 'hour':
      return "".concat(number, "\u6642");
    case 'minute':
      return "".concat(number, "\u5206");
    case 'second':
      return "".concat(number, "\u79D2");
    default:
      return "".concat(number);
  }
};
var ja_lib_localize_localize = {
  ordinalNumber: ja_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ja_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ja_lib_localize = (ja_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/match/index.js


var ja_lib_match_matchOrdinalNumberPattern = /^Á¨¨?\d+(Âπ¥|ÂõõÂçäÊúü|Êúà|ÈÄ±|Êó•|ÊôÇ|ÂàÜ|Áßí)?/i;
var ja_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ja_lib_match_matchEraPatterns = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(Á¥ÄÂÖÉ[ÂâçÂæå]|Ë•øÊö¶)/i,
  wide: /^(Á¥ÄÂÖÉ[ÂâçÂæå]|Ë•øÊö¶)/i
};
var ja_lib_match_parseEraPatterns = {
  narrow: [/^B/i, /^A/i],
  any: [/^(Á¥ÄÂÖÉÂâç)/i, /^(Ë•øÊö¶|Á¥ÄÂÖÉÂæå)/i]
};
var ja_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^Á¨¨[1234‰∏Ä‰∫å‰∏âÂõõÔºëÔºíÔºìÔºî]ÂõõÂçäÊúü/i
};
var ja_lib_match_parseQuarterPatterns = {
  any: [/(1|‰∏Ä|Ôºë)/i, /(2|‰∫å|Ôºí)/i, /(3|‰∏â|Ôºì)/i, /(4|Âõõ|Ôºî)/i]
};
var ja_lib_match_matchMonthPatterns = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])Êúà/i,
  wide: /^([123456789]|1[012])Êúà/i
};
var ja_lib_match_parseMonthPatterns = {
  any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var ja_lib_match_matchDayPatterns = {
  narrow: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]/,
  short: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]/,
  abbreviated: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]/,
  wide: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]ÊõúÊó•/
};
var ja_lib_match_parseDayPatterns = {
  any: [/^Êó•/, /^Êúà/, /^ÁÅ´/, /^Ê∞¥/, /^Êú®/, /^Èáë/, /^Âúü/]
};
var ja_lib_match_matchDayPeriodPatterns = {
  any: /^(AM|PM|ÂçàÂâç|ÂçàÂæå|Ê≠£Âçà|Ê∑±Â§ú|ÁúüÂ§ú‰∏≠|Â§ú|Êúù)/i
};
var ja_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(A|ÂçàÂâç)/i,
    pm: /^(P|ÂçàÂæå)/i,
    midnight: /^Ê∑±Â§ú|ÁúüÂ§ú‰∏≠/i,
    noon: /^Ê≠£Âçà/i,
    morning: /^Êúù/i,
    afternoon: /^ÂçàÂæå/i,
    evening: /^Â§ú/i,
    night: /^Ê∑±Â§ú/i
  }
};
var ja_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ja_lib_match_matchOrdinalNumberPattern,
    parsePattern: ja_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ja_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ja_lib_match = (ja_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Japanese locale.
 * @language Japanese
 * @iso-639-2 jpn
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Yamagishi Kazutoshi [@ykzts]{@link https://github.com/ykzts}
 * @author Luca Ban [@mesqueeb]{@link https://github.com/mesqueeb}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
 */
var ja_locale = {
  code: 'ja',
  formatDistance: ja_lib_formatDistance,
  formatLong: ja_lib_formatLong,
  formatRelative: ja_lib_formatRelative,
  localize: ja_lib_localize,
  match: ja_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ja = (ja_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/formatDistance/index.js
var ja_Hira_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '1„Å≥„Çá„ÅÜ„Åø„Åæ„Çì',
    other: '{{count}}„Å≥„Çá„ÅÜ„Åø„Åæ„Çì',
    oneWithSuffix: '„ÇÑ„Åè1„Å≥„Çá„ÅÜ',
    otherWithSuffix: '„ÇÑ„Åè{{count}}„Å≥„Çá„ÅÜ'
  },
  xSeconds: {
    one: '1„Å≥„Çá„ÅÜ',
    other: '{{count}}„Å≥„Çá„ÅÜ'
  },
  halfAMinute: '30„Å≥„Çá„ÅÜ',
  lessThanXMinutes: {
    one: '1„Å∑„Çì„Åø„Åæ„Çì',
    other: '{{count}}„Åµ„Çì„Åø„Åæ„Çì',
    oneWithSuffix: '„ÇÑ„Åè1„Å∑„Çì',
    otherWithSuffix: '„ÇÑ„Åè{{count}}„Åµ„Çì'
  },
  xMinutes: {
    one: '1„Å∑„Çì',
    other: '{{count}}„Åµ„Çì'
  },
  aboutXHours: {
    one: '„ÇÑ„Åè1„Åò„Åã„Çì',
    other: '„ÇÑ„Åè{{count}}„Åò„Åã„Çì'
  },
  xHours: {
    one: '1„Åò„Åã„Çì',
    other: '{{count}}„Åò„Åã„Çì'
  },
  xDays: {
    one: '1„Å´„Å°',
    other: '{{count}}„Å´„Å°'
  },
  aboutXWeeks: {
    one: '„ÇÑ„Åè1„Åó„ÇÖ„ÅÜ„Åã„Çì',
    other: '„ÇÑ„Åè{{count}}„Åó„ÇÖ„ÅÜ„Åã„Çì'
  },
  xWeeks: {
    one: '1„Åó„ÇÖ„ÅÜ„Åã„Çì',
    other: '{{count}}„Åó„ÇÖ„ÅÜ„Åã„Çì'
  },
  aboutXMonths: {
    one: '„ÇÑ„Åè1„Åã„Åí„Å§',
    other: '„ÇÑ„Åè{{count}}„Åã„Åí„Å§'
  },
  xMonths: {
    one: '1„Åã„Åí„Å§',
    other: '{{count}}„Åã„Åí„Å§'
  },
  aboutXYears: {
    one: '„ÇÑ„Åè1„Å≠„Çì',
    other: '„ÇÑ„Åè{{count}}„Å≠„Çì'
  },
  xYears: {
    one: '1„Å≠„Çì',
    other: '{{count}}„Å≠„Çì'
  },
  overXYears: {
    one: '1„Å≠„Çì„ÅÑ„Åò„Çá„ÅÜ',
    other: '{{count}}„Å≠„Çì„ÅÑ„Åò„Çá„ÅÜ'
  },
  almostXYears: {
    one: '1„Å≠„Çì„Å°„Åã„Åè',
    other: '{{count}}„Å≠„Çì„Å°„Åã„Åè'
  }
};
var ja_Hira_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  var result;
  var tokenValue = ja_Hira_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', String(count));
    }
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '„ÅÇ„Å®';
    } else {
      return result + '„Åæ„Åà';
    }
  }
  return result;
};
/* harmony default export */ const ja_Hira_lib_formatDistance = (ja_Hira_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/formatLong/index.js

var ja_Hira_lib_formatLong_dateFormats = {
  full: 'y„Å≠„ÇìM„Åå„Å§d„Å´„Å°EEEE',
  long: 'y„Å≠„ÇìM„Åå„Å§d„Å´„Å°',
  medium: 'y/MM/dd',
  short: 'y/MM/dd'
};
var ja_Hira_lib_formatLong_timeFormats = {
  full: 'H„Åòmm„Åµ„Çìss„Å≥„Çá„ÅÜ zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var ja_Hira_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var ja_Hira_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_Hira_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_Hira_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_Hira_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ja_Hira_lib_formatLong = (ja_Hira_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/formatRelative/index.js
var ja_Hira_lib_formatRelative_formatRelativeLocale = {
  lastWeek: '„Åõ„Çì„Åó„ÇÖ„ÅÜ„ÅÆeeee„ÅÆp',
  yesterday: '„Åç„ÅÆ„ÅÜ„ÅÆp',
  today: '„Åç„Çá„ÅÜ„ÅÆp',
  tomorrow: '„ÅÇ„Åó„Åü„ÅÆp',
  nextWeek: '„Çà„Åè„Åó„ÇÖ„ÅÜ„ÅÆeeee„ÅÆp',
  other: 'P'
};
var ja_Hira_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ja_Hira_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ja_Hira_lib_formatRelative = (ja_Hira_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/localize/index.js

var ja_Hira_lib_localize_eraValues = {
  narrow: ['BC', 'AC'],
  abbreviated: ['„Åç„Åí„Çì„Åú„Çì', '„Åõ„ÅÑ„Çå„Åç'],
  wide: ['„Åç„Åí„Çì„Åú„Çì', '„Åõ„ÅÑ„Çå„Åç']
};
var ja_Hira_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['„Å†„ÅÑ1„Åó„ÅØ„Çì„Åç', '„Å†„ÅÑ2„Åó„ÅØ„Çì„Åç', '„Å†„ÅÑ3„Åó„ÅØ„Çì„Åç', '„Å†„ÅÑ4„Åó„ÅØ„Çì„Åç']
};
var ja_Hira_lib_localize_monthValues = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1„Åå„Å§', '2„Åå„Å§', '3„Åå„Å§', '4„Åå„Å§', '5„Åå„Å§', '6„Åå„Å§', '7„Åå„Å§', '8„Åå„Å§', '9„Åå„Å§', '10„Åå„Å§', '11„Åå„Å§', '12„Åå„Å§'],
  wide: ['1„Åå„Å§', '2„Åå„Å§', '3„Åå„Å§', '4„Åå„Å§', '5„Åå„Å§', '6„Åå„Å§', '7„Åå„Å§', '8„Åå„Å§', '9„Åå„Å§', '10„Åå„Å§', '11„Åå„Å§', '12„Åå„Å§']
};
var ja_Hira_lib_localize_dayValues = {
  narrow: ['„Å´„Å°', '„Åí„Å§', '„Åã', '„Åô„ÅÑ', '„ÇÇ„Åè', '„Åç„Çì', '„Å©'],
  short: ['„Å´„Å°', '„Åí„Å§', '„Åã', '„Åô„ÅÑ', '„ÇÇ„Åè', '„Åç„Çì', '„Å©'],
  abbreviated: ['„Å´„Å°', '„Åí„Å§', '„Åã', '„Åô„ÅÑ', '„ÇÇ„Åè', '„Åç„Çì', '„Å©'],
  wide: ['„Å´„Å°„Çà„ÅÜ„Å≥', '„Åí„Å§„Çà„ÅÜ„Å≥', '„Åã„Çà„ÅÜ„Å≥', '„Åô„ÅÑ„Çà„ÅÜ„Å≥', '„ÇÇ„Åè„Çà„ÅÜ„Å≥', '„Åç„Çì„Çà„ÅÜ„Å≥', '„Å©„Çà„ÅÜ„Å≥']
};
var ja_Hira_lib_localize_dayPeriodValues = {
  narrow: {
    am: '„Åî„Åú„Çì',
    pm: '„Åî„Åî',
    midnight: '„Åó„Çì„ÇÑ',
    noon: '„Åó„Çá„ÅÜ„Åî',
    morning: '„ÅÇ„Åï',
    afternoon: '„Åî„Åî',
    evening: '„Çà„Çã',
    night: '„Åó„Çì„ÇÑ'
  },
  abbreviated: {
    am: '„Åî„Åú„Çì',
    pm: '„Åî„Åî',
    midnight: '„Åó„Çì„ÇÑ',
    noon: '„Åó„Çá„ÅÜ„Åî',
    morning: '„ÅÇ„Åï',
    afternoon: '„Åî„Åî',
    evening: '„Çà„Çã',
    night: '„Åó„Çì„ÇÑ'
  },
  wide: {
    am: '„Åî„Åú„Çì',
    pm: '„Åî„Åî',
    midnight: '„Åó„Çì„ÇÑ',
    noon: '„Åó„Çá„ÅÜ„Åî',
    morning: '„ÅÇ„Åï',
    afternoon: '„Åî„Åî',
    evening: '„Çà„Çã',
    night: '„Åó„Çì„ÇÑ'
  }
};
var ja_Hira_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '„Åî„Åú„Çì',
    pm: '„Åî„Åî',
    midnight: '„Åó„Çì„ÇÑ',
    noon: '„Åó„Çá„ÅÜ„Åî',
    morning: '„ÅÇ„Åï',
    afternoon: '„Åî„Åî',
    evening: '„Çà„Çã',
    night: '„Åó„Çì„ÇÑ'
  },
  abbreviated: {
    am: '„Åî„Åú„Çì',
    pm: '„Åî„Åî',
    midnight: '„Åó„Çì„ÇÑ',
    noon: '„Åó„Çá„ÅÜ„Åî',
    morning: '„ÅÇ„Åï',
    afternoon: '„Åî„Åî',
    evening: '„Çà„Çã',
    night: '„Åó„Çì„ÇÑ'
  },
  wide: {
    am: '„Åî„Åú„Çì',
    pm: '„Åî„Åî',
    midnight: '„Åó„Çì„ÇÑ',
    noon: '„Åó„Çá„ÅÜ„Åî',
    morning: '„ÅÇ„Åï',
    afternoon: '„Åî„Åî',
    evening: '„Çà„Çã',
    night: '„Åó„Çì„ÇÑ'
  }
};
var ja_Hira_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case 'year':
      return "".concat(number, "\u306D\u3093");
    case 'quarter':
      return "\u3060\u3044".concat(number, "\u3057\u306F\u3093\u304D");
    case 'month':
      return "".concat(number, "\u304C\u3064");
    case 'week':
      return "\u3060\u3044".concat(number, "\u3057\u3085\u3046");
    case 'date':
      return "".concat(number, "\u306B\u3061");
    case 'hour':
      return "".concat(number, "\u3058");
    case 'minute':
      return "".concat(number, "\u3075\u3093");
    case 'second':
      return "".concat(number, "\u3073\u3087\u3046");
    default:
      return "".concat(number);
  }
};
var ja_Hira_lib_localize_localize = {
  ordinalNumber: ja_Hira_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ja_Hira_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ja_Hira_lib_localize = (ja_Hira_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/match/index.js


var ja_Hira_lib_match_matchOrdinalNumberPattern = /^„Å†?„ÅÑ?\d+(„Å≠„Çì|„Åó„ÅØ„Çì„Åç|„Åå„Å§|„Åó„ÇÖ„ÅÜ|„Å´„Å°|„Åò|„Åµ„Çì|„Å≥„Çá„ÅÜ)?/i;
var ja_Hira_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ja_Hira_lib_match_matchEraPatterns = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(„Åç„Åí„Çì[ÂâçÂæå]|„Åõ„ÅÑ„Çå„Åç)/i,
  wide: /^(„Åç„Åí„Çì[ÂâçÂæå]|„Åõ„ÅÑ„Çå„Åç)/i
};
var ja_Hira_lib_match_parseEraPatterns = {
  narrow: [/^B/i, /^A/i],
  any: [/^(„Åç„Åí„Çì„Åú„Çì)/i, /^(„Åõ„ÅÑ„Çå„Åç|„Åç„Åí„Çì„Åî)/i]
};
var ja_Hira_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^„Å†„ÅÑ[1234‰∏Ä‰∫å‰∏âÂõõÔºëÔºíÔºìÔºî]„Åó„ÅØ„Çì„Åç/i
};
var ja_Hira_lib_match_parseQuarterPatterns = {
  any: [/(1|‰∏Ä|Ôºë)/i, /(2|‰∫å|Ôºí)/i, /(3|‰∏â|Ôºì)/i, /(4|Âõõ|Ôºî)/i]
};
var ja_Hira_lib_match_matchMonthPatterns = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])„Åå„Å§/i,
  wide: /^([123456789]|1[012])„Åå„Å§/i
};
var ja_Hira_lib_match_parseMonthPatterns = {
  any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var ja_Hira_lib_match_matchDayPatterns = {
  narrow: /^(„Å´„Å°|„Åí„Å§|„Åã|„Åô„ÅÑ|„ÇÇ„Åè|„Åç„Çì|„Å©)/,
  short: /^(„Å´„Å°|„Åí„Å§|„Åã|„Åô„ÅÑ|„ÇÇ„Åè|„Åç„Çì|„Å©)/,
  abbreviated: /^(„Å´„Å°|„Åí„Å§|„Åã|„Åô„ÅÑ|„ÇÇ„Åè|„Åç„Çì|„Å©)/,
  wide: /^(„Å´„Å°|„Åí„Å§|„Åã|„Åô„ÅÑ|„ÇÇ„Åè|„Åç„Çì|„Å©)„Çà„ÅÜ„Å≥/
};
var ja_Hira_lib_match_parseDayPatterns = {
  any: [/^„Å´„Å°/, /^„Åí„Å§/, /^„Åã/, /^„Åô„ÅÑ/, /^„ÇÇ„Åè/, /^„Åç„Çì/, /^„Å©/]
};
var ja_Hira_lib_match_matchDayPeriodPatterns = {
  any: /^(AM|PM|„Åî„Åú„Çì|„Åî„Åî|„Åó„Çá„ÅÜ„Åî|„Åó„Çì„ÇÑ|„Åæ„Çà„Å™„Åã|„Çà„Çã|„ÅÇ„Åï)/i
};
var ja_Hira_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(A|„Åî„Åú„Çì)/i,
    pm: /^(P|„Åî„Åî)/i,
    midnight: /^„Åó„Çì„ÇÑ|„Åæ„Çà„Å™„Åã/i,
    noon: /^„Åó„Çá„ÅÜ„Åî/i,
    morning: /^„ÅÇ„Åï/i,
    afternoon: /^„Åî„Åî/i,
    evening: /^„Çà„Çã/i,
    night: /^„Åó„Çì„ÇÑ/i
  }
};
var ja_Hira_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ja_Hira_lib_match_matchOrdinalNumberPattern,
    parsePattern: ja_Hira_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_Hira_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_Hira_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_Hira_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ja_Hira_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ja_Hira_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ja_Hira_lib_match = (ja_Hira_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Japanese (Hiragana) locale.
 * @language Japanese (Hiragana)
 * @iso-639-2 jpn
 * @author Eri Hiramatsu [@Eritutteo]{@link https://github.com/Eritutteo}
 */
var ja_Hira_locale = {
  code: 'ja-Hira',
  formatDistance: ja_Hira_lib_formatDistance,
  formatLong: ja_Hira_lib_formatLong,
  formatRelative: ja_Hira_lib_formatRelative,
  localize: ja_Hira_lib_localize,
  match: ja_Hira_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ja_Hira = (ja_Hira_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/formatDistance/index.js
var ka_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    past: '{{count}} ·É¨·Éê·Éõ·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò ·ÉÆ·Éú·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É¨·Éê·Éõ·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò',
    future: '{{count}} ·É¨·Éê·Éõ·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·É®·Éò'
  },
  xSeconds: {
    past: '{{count}} ·É¨·Éê·Éõ·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É¨·Éê·Éõ·Éò',
    future: '{{count}} ·É¨·Éê·Éõ·É®·Éò'
  },
  halfAMinute: {
    past: '·Éú·Éê·ÉÆ·Éî·Éï·Éê·É†·Éò ·É¨·É£·Éó·Éò·É° ·É¨·Éò·Éú',
    present: '·Éú·Éê·ÉÆ·Éî·Éï·Éê·É†·Éò ·É¨·É£·Éó·Éò',
    future: '·Éú·Éê·ÉÆ·Éî·Éï·Éê·É†·Éò ·É¨·É£·Éó·É®·Éò'
  },
  lessThanXMinutes: {
    past: '{{count}} ·É¨·É£·Éó·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò ·ÉÆ·Éú·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É¨·É£·Éó·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò',
    future: '{{count}} ·É¨·É£·Éó·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·É®·Éò'
  },
  xMinutes: {
    past: '{{count}} ·É¨·É£·Éó·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É¨·É£·Éó·Éò',
    future: '{{count}} ·É¨·É£·Éó·É®·Éò'
  },
  aboutXHours: {
    past: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É°·Éê·Éê·Éó·Éò·É° ·É¨·Éò·Éú',
    present: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É°·Éê·Éê·Éó·Éò',
    future: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É°·Éê·Éê·Éó·É®·Éò'
  },
  xHours: {
    past: '{{count}} ·É°·Éê·Éê·Éó·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É°·Éê·Éê·Éó·Éò',
    future: '{{count}} ·É°·Éê·Éê·Éó·É®·Éò'
  },
  xDays: {
    past: '{{count}} ·Éì·É¶·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·Éì·É¶·Éî',
    future: '{{count}} ·Éì·É¶·Éî·É®·Éò'
  },
  aboutXWeeks: {
    past: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éô·Éï·Éò·É†·Éê·É° ·É¨·Éò·Éú',
    present: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éô·Éï·Éò·É†·Éê',
    future: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éô·Éï·Éò·É†·Éê·É®·Éò'
  },
  xWeeks: {
    past: '{{count}} ·Éô·Éï·Éò·É†·Éê·É° ·Éô·Éï·Éò·É†·Éê',
    present: '{{count}} ·Éô·Éï·Éò·É†·Éê',
    future: '{{count}} ·Éô·Éï·Éò·É†·Éê·É®·Éò'
  },
  aboutXMonths: {
    past: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éó·Éï·Éò·É° ·É¨·Éò·Éú',
    present: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éó·Éï·Éî',
    future: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éó·Éï·Éî·É®·Éò'
  },
  xMonths: {
    past: '{{count}} ·Éó·Éï·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·Éó·Éï·Éî',
    future: '{{count}} ·Éó·Éï·Éî·É®·Éò'
  },
  aboutXYears: {
    past: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É¨·Éö·Éò·É° ·É¨·Éò·Éú',
    present: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É¨·Éî·Éö·Éò',
    future: '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É¨·Éî·Éö·É®·Éò'
  },
  xYears: {
    past: '{{count}} ·É¨·Éö·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É¨·Éî·Éö·Éò',
    future: '{{count}} ·É¨·Éî·Éö·É®·Éò'
  },
  overXYears: {
    past: '{{count}} ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò ·ÉÆ·Éú·Éò·É° ·É¨·Éò·Éú',
    present: '{{count}} ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò',
    future: '{{count}} ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò ·ÉÆ·Éú·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí'
  },
  almostXYears: {
    past: '·Éó·Éò·Éó·É•·Éõ·Éò·É° {{count}} ·É¨·Éö·Éò·É° ·É¨·Éò·Éú',
    present: '·Éó·Éò·Éó·É•·Éõ·Éò·É° {{count}} ·É¨·Éî·Éö·Éò',
    future: '·Éó·Éò·Éó·É•·Éõ·Éò·É° {{count}} ·É¨·Éî·Éö·É®·Éò'
  }
};
var ka_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ka_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (options !== null && options !== void 0 && options.addSuffix && options.comparison && options.comparison > 0) {
    result = tokenValue.future.replace('{{count}}', String(count));
  } else if (options !== null && options !== void 0 && options.addSuffix) {
    result = tokenValue.past.replace('{{count}}', String(count));
  } else {
    result = tokenValue.present.replace('{{count}}', String(count));
  }
  return result;
};
/* harmony default export */ const ka_lib_formatDistance = (ka_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/formatLong/index.js

var ka_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM, y',
  long: 'do, MMMM, y',
  medium: 'd, MMM, y',
  short: 'dd/MM/yyyy'
};
var ka_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var ka_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}'-·Éñ·Éî'",
  long: "{{date}} {{time}}'-·Éñ·Éî'",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ka_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ka_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ka_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ka_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ka_lib_formatLong = (ka_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/formatRelative/index.js
var ka_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'·É¨·Éò·Éú·Éê' eeee p'-·Éñ·Éî'",
  yesterday: "'·Éí·É£·É®·Éò·Éú' p'-·Éñ·Éî'",
  today: "'·Éì·É¶·Éî·É°' p'-·Éñ·Éî'",
  tomorrow: "'·ÉÆ·Éï·Éê·Éö' p'-·Éñ·Éî'",
  nextWeek: "'·É®·Éî·Éõ·Éì·Éî·Éí·Éò' eeee p'-·Éñ·Éî'",
  other: 'P'
};
var ka_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ka_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ka_lib_formatRelative = (ka_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/localize/index.js

var ka_lib_localize_eraValues = {
  narrow: ['·É©.·É¨-·Éõ·Éì·Éî', '·É©.·É¨'],
  abbreviated: ['·É©·Éï.·É¨-·Éõ·Éì·Éî', '·É©·Éï.·É¨'],
  wide: ['·É©·Éï·Éî·Éú·É° ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éê·Éõ·Éì·Éî', '·É©·Éï·Éî·Éú·Éò ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éò·Éó']
};
var ka_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-·Éö·Éò ·Éô·Éï', '2-·Éî ·Éô·Éï', '3-·Éî ·Éô·Éï', '4-·Éî ·Éô·Éï'],
  wide: ['1-·Éö·Éò ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò', '2-·Éî ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò', '3-·Éî ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò', '4-·Éî ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var ka_lib_localize_monthValues = {
  narrow: ['·Éò·Éê', '·Éó·Éî', '·Éõ·Éê', '·Éê·Éû', '·Éõ·É°', '·Éï·Éú', '·Éï·Éö', '·Éê·Éí', '·É°·Éî', '·Éù·É•', '·Éú·Éù', '·Éì·Éî'],
  abbreviated: ['·Éò·Éê·Éú', '·Éó·Éî·Éë', '·Éõ·Éê·É†', '·Éê·Éû·É†', '·Éõ·Éê·Éò', '·Éò·Éï·Éú', '·Éò·Éï·Éö', '·Éê·Éí·Éï', '·É°·Éî·É•', '·Éù·É•·É¢', '·Éú·Éù·Éî', '·Éì·Éî·Éô'],
  wide: ['·Éò·Éê·Éú·Éï·Éê·É†·Éò', '·Éó·Éî·Éë·Éî·É†·Éï·Éê·Éö·Éò', '·Éõ·Éê·É†·É¢·Éò', '·Éê·Éû·É†·Éò·Éö·Éò', '·Éõ·Éê·Éò·É°·Éò', '·Éò·Éï·Éú·Éò·É°·Éò', '·Éò·Éï·Éö·Éò·É°·Éò', '·Éê·Éí·Éï·Éò·É°·É¢·Éù', '·É°·Éî·É•·É¢·Éî·Éõ·Éë·Éî·É†·Éò', '·Éù·É•·É¢·Éù·Éõ·Éë·Éî·É†·Éò', '·Éú·Éù·Éî·Éõ·Éë·Éî·É†·Éò', '·Éì·Éî·Éô·Éî·Éõ·Éë·Éî·É†·Éò']
};
var ka_lib_localize_dayValues = {
  narrow: ['·Éô·Éï', '·Éù·É†', '·É°·Éê', '·Éù·Éó', '·ÉÆ·É£', '·Éû·Éê', '·É®·Éê'],
  short: ['·Éô·Éï·Éò', '·Éù·É†·É®', '·É°·Éê·Éõ', '·Éù·Éó·ÉÆ', '·ÉÆ·É£·Éó', '·Éû·Éê·É†', '·É®·Éê·Éë'],
  abbreviated: ['·Éô·Éï·Éò', '·Éù·É†·É®', '·É°·Éê·Éõ', '·Éù·Éó·ÉÆ', '·ÉÆ·É£·Éó', '·Éû·Éê·É†', '·É®·Éê·Éë'],
  wide: ['·Éô·Éï·Éò·É†·Éê', '·Éù·É†·É®·Éê·Éë·Éê·Éó·Éò', '·É°·Éê·Éõ·É®·Éê·Éë·Éê·Éó·Éò', '·Éù·Éó·ÉÆ·É®·Éê·Éë·Éê·Éó·Éò', '·ÉÆ·É£·Éó·É®·Éê·Éë·Éê·Éó·Éò', '·Éû·Éê·É†·Éê·É°·Éô·Éî·Éï·Éò', '·É®·Éê·Éë·Éê·Éó·Éò']
};
var ka_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: '·É®·É£·Éê·É¶·Éê·Éõ·Éî',
    noon: '·É®·É£·Éê·Éì·É¶·Éî',
    morning: '·Éì·Éò·Éö·Éê',
    afternoon: '·É°·Éê·É¶·Éê·Éõ·Éù',
    evening: '·É°·Éê·É¶·Éê·Éõ·Éù',
    night: '·É¶·Éê·Éõ·Éî'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '·É®·É£·Éê·É¶·Éê·Éõ·Éî',
    noon: '·É®·É£·Éê·Éì·É¶·Éî',
    morning: '·Éì·Éò·Éö·Éê',
    afternoon: '·É°·Éê·É¶·Éê·Éõ·Éù',
    evening: '·É°·Éê·É¶·Éê·Éõ·Éù',
    night: '·É¶·Éê·Éõ·Éî'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: '·É®·É£·Éê·É¶·Éê·Éõ·Éî',
    noon: '·É®·É£·Éê·Éì·É¶·Éî',
    morning: '·Éì·Éò·Éö·Éê',
    afternoon: '·É°·Éê·É¶·Éê·Éõ·Éù',
    evening: '·É°·Éê·É¶·Éê·Éõ·Éù',
    night: '·É¶·Éê·Éõ·Éî'
  }
};
var ka_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: '·É®·É£·Éê·É¶·Éê·Éõ·Éò·Éó',
    noon: '·É®·É£·Éê·Éì·É¶·Éò·É°·Éê·É°',
    morning: '·Éì·Éò·Éö·Éò·Éó',
    afternoon: '·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°',
    evening: '·É°·Éê·É¶·Éê·Éõ·Éù·É°',
    night: '·É¶·Éê·Éõ·Éò·Éó'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '·É®·É£·Éê·É¶·Éê·Éõ·Éò·Éó',
    noon: '·É®·É£·Éê·Éì·É¶·Éò·É°·Éê·É°',
    morning: '·Éì·Éò·Éö·Éò·Éó',
    afternoon: '·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°',
    evening: '·É°·Éê·É¶·Éê·Éõ·Éù·É°',
    night: '·É¶·Éê·Éõ·Éò·Éó'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: '·É®·É£·Éê·É¶·Éê·Éõ·Éò·Éó',
    noon: '·É®·É£·Éê·Éì·É¶·Éò·É°·Éê·É°',
    morning: '·Éì·Éò·Éö·Éò·Éó',
    afternoon: '·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°',
    evening: '·É°·Éê·É¶·Éê·Éõ·Éù·É°',
    night: '·É¶·Éê·Éõ·Éò·Éó'
  }
};
var ka_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  if (number === 1) {
    return number + '-·Éö·Éò';
  }
  return number + '-·Éî';
};
var ka_lib_localize_localize = {
  ordinalNumber: ka_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ka_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ka_lib_localize = (ka_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/match/index.js


var ka_lib_match_matchOrdinalNumberPattern = /^(\d+)(-·Éö·Éò|-·Éî)?/i;
var ka_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ka_lib_match_matchEraPatterns = {
  narrow: /^(·É©·Éï?\.·É¨)/i,
  abbreviated: /^(·É©·Éï?\.·É¨)/i,
  wide: /^(·É©·Éï·Éî·Éú·É° ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éê·Éõ·Éì·Éî|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éê·Éõ·Éì·Éî|·É©·Éï·Éî·Éú·Éò ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éò·Éó|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éò·Éì·Éê·Éú)/i
};
var ka_lib_match_parseEraPatterns = {
  any: [/^(·É©·Éï·Éî·Éú·É° ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éê·Éõ·Éì·Éî|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éê·Éõ·Éì·Éî)/i, /^(·É©·Éï·Éî·Éú·Éò ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éò·Éó|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éò·Éì·Éê·Éú)/i]
};
var ka_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-(·Éö·Éò|·Éî)? ·Éô·Éï/i,
  wide: /^[1234]-(·Éö·Éò|·Éî)? ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò/i
};
var ka_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ka_lib_match_matchMonthPatterns = {
  any: /^(·Éò·Éê|·Éó·Éî|·Éõ·Éê|·Éê·Éû|·Éõ·É°|·Éï·Éú|·Éï·Éö|·Éê·Éí|·É°·Éî|·Éù·É•|·Éú·Éù|·Éì·Éî)/i
};
var ka_lib_match_parseMonthPatterns = {
  any: [/^·Éò·Éê/i, /^·Éó/i, /^·Éõ·Éê·É†/i, /^·Éê·Éû/i, /^·Éõ·Éê·Éò/i, /^·Éò?·Éï·Éú/i, /^·Éò?·Éï·Éö/i, /^·Éê·Éí/i, /^·É°/i, /^·Éù/i, /^·Éú/i, /^·Éì/i]
};
var ka_lib_match_matchDayPatterns = {
  narrow: /^(·Éô·Éï|·Éù·É†|·É°·Éê|·Éù·Éó|·ÉÆ·É£|·Éû·Éê|·É®·Éê)/i,
  short: /^(·Éô·Éï·Éò|·Éù·É†·É®|·É°·Éê·Éõ|·Éù·Éó·ÉÆ|·ÉÆ·É£·Éó|·Éû·Éê·É†|·É®·Éê·Éë)/i,
  wide: /^(·Éô·Éï·Éò·É†·Éê|·Éù·É†·É®·Éê·Éë·Éê·Éó·Éò|·É°·Éê·Éõ·É®·Éê·Éë·Éê·Éó·Éò|·Éù·Éó·ÉÆ·É®·Éê·Éë·Éê·Éó·Éò|·ÉÆ·É£·Éó·É®·Éê·Éë·Éê·Éó·Éò|·Éû·Éê·É†·Éê·É°·Éô·Éî·Éï·Éò|·É®·Éê·Éë·Éê·Éó·Éò)/i
};
var ka_lib_match_parseDayPatterns = {
  any: [/^·Éô·Éï/i, /^·Éù·É†/i, /^·É°·Éê/i, /^·Éù·Éó/i, /^·ÉÆ·É£/i, /^·Éû·Éê/i, /^·É®·Éê/i]
};
var ka_lib_match_matchDayPeriodPatterns = {
  any: /^([ap]\.?\s?m\.?|·É®·É£·Éê·É¶|·Éì·Éò·Éö)/i
};
var ka_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^·É®·É£·Éê·É¶/i,
    noon: /^·É®·É£·Éê·Éì·É¶/i,
    morning: /^·Éì·Éò·Éö/i,
    afternoon: /·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°/i,
    evening: /·É°·Éê·É¶·Éê·Éõ·Éù/i,
    night: /·É¶·Éê·Éõ/i
  }
};
var ka_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ka_lib_match_matchOrdinalNumberPattern,
    parsePattern: ka_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ka_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ka_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ka_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ka_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ka_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ka_lib_match = (ka_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Georgian locale.
 * @language Georgian
 * @iso-639-2 geo
 * @author Lado Lomidze [@Landish]{@link https://github.com/Landish}
 * @author Nick Shvelidze [@shvelo]{@link https://github.com/shvelo}
 */
var ka_locale = {
  code: 'ka',
  formatDistance: ka_lib_formatDistance,
  formatLong: ka_lib_formatLong,
  formatRelative: ka_lib_formatRelative,
  localize: ka_lib_localize,
  match: ka_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ka = (ka_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/formatDistance/index.js
var kk_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    regular: {
      one: '1 —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑',
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑'
    },
    future: {
      one: '–±—ñ—Ä —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  xSeconds: {
    regular: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥'
    },
    past: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥ –±“±—Ä—ã–Ω',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥ –±“±—Ä—ã–Ω',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥ –±“±—Ä—ã–Ω'
    },
    future: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  halfAMinute: function halfAMinute(options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return '–∂–∞—Ä—Ç—ã –º–∏–Ω—É—Ç —ñ—à—ñ–Ω–¥–µ';
      } else {
        return '–∂–∞—Ä—Ç—ã –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω';
      }
    }
    return '–∂–∞—Ä—Ç—ã –º–∏–Ω—É—Ç';
  },
  lessThanXMinutes: {
    regular: {
      one: '1 –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑',
      singularNominative: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑'
    },
    future: {
      one: '–º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º ',
      singularNominative: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º'
    }
  },
  xMinutes: {
    regular: {
      singularNominative: '{{count}} –º–∏–Ω—É—Ç',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç'
    },
    past: {
      singularNominative: '{{count}} –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω'
    },
    future: {
      singularNominative: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  aboutXHours: {
    regular: {
      singularNominative: '—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç',
      singularGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç',
      pluralGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç'
    },
    future: {
      singularNominative: '—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  xHours: {
    regular: {
      singularNominative: '{{count}} —Å–∞“ì–∞—Ç',
      singularGenitive: '{{count}} —Å–∞“ì–∞—Ç',
      pluralGenitive: '{{count}} —Å–∞“ì–∞—Ç'
    }
  },
  xDays: {
    regular: {
      singularNominative: '{{count}} –∫“Ø–Ω',
      singularGenitive: '{{count}} –∫“Ø–Ω',
      pluralGenitive: '{{count}} –∫“Ø–Ω'
    },
    future: {
      singularNominative: '{{count}} –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '{{count}} –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '{{count}} –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω'
    }
  },
  aboutXWeeks: {
    type: 'weeks',
    one: '—à–∞–º–∞–º–µ–Ω 1 –∞–ø—Ç–∞',
    other: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–ø—Ç–∞'
  },
  xWeeks: {
    type: 'weeks',
    one: '1 –∞–ø—Ç–∞',
    other: '{{count}} –∞–ø—Ç–∞'
  },
  aboutXMonths: {
    regular: {
      singularNominative: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–π',
      singularGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–π',
      pluralGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–π'
    },
    future: {
      singularNominative: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–π–¥–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–π–¥–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∞–π–¥–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  xMonths: {
    regular: {
      singularNominative: '{{count}} –∞–π',
      singularGenitive: '{{count}} –∞–π',
      pluralGenitive: '{{count}} –∞–π'
    }
  },
  aboutXYears: {
    regular: {
      singularNominative: '—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª',
      singularGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª',
      pluralGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª'
    },
    future: {
      singularNominative: '—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  xYears: {
    regular: {
      singularNominative: '{{count}} –∂—ã–ª',
      singularGenitive: '{{count}} –∂—ã–ª',
      pluralGenitive: '{{count}} –∂—ã–ª'
    },
    future: {
      singularNominative: '{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω'
    }
  },
  overXYears: {
    regular: {
      singularNominative: '{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º',
      singularGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º',
      pluralGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º'
    },
    future: {
      singularNominative: '{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º',
      singularGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º',
      pluralGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º'
    }
  },
  almostXYears: {
    regular: {
      singularNominative: '{{count}} –∂—ã–ª“ì–∞ –∂–∞“õ—ã–Ω',
      singularGenitive: '{{count}} –∂—ã–ª“ì–∞ –∂–∞“õ—ã–Ω',
      pluralGenitive: '{{count}} –∂—ã–ª“ì–∞ –∂–∞“õ—ã–Ω'
    },
    future: {
      singularNominative: '{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω',
      singularGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω',
      pluralGenitive: '{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω'
    }
  }
};
function _lib_formatDistance_declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one && count === 1) return scheme.one;
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
var kk_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var tokenValue = kk_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'function') return tokenValue(options);
  if (tokenValue.type === 'weeks') {
    return count === 1 ? tokenValue.one : tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (tokenValue.future) {
        return _lib_formatDistance_declension(tokenValue.future, count);
      } else {
        return _lib_formatDistance_declension(tokenValue.regular, count) + ' –∫–µ–π—ñ–Ω';
      }
    } else {
      if (tokenValue.past) {
        return _lib_formatDistance_declension(tokenValue.past, count);
      } else {
        return _lib_formatDistance_declension(tokenValue.regular, count) + ' –±“±—Ä—ã–Ω';
      }
    }
  } else {
    return _lib_formatDistance_declension(tokenValue.regular, count);
  }
};
/* harmony default export */ const kk_lib_formatDistance = (kk_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/formatLong/index.js

var kk_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y '–∂.'",
  long: "do MMMM y '–∂.'",
  medium: "d MMM y '–∂.'",
  short: 'dd.MM.yyyy'
};
var kk_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var kk_lib_formatLong_dateTimeFormats = {
  any: '{{date}}, {{time}}'
};
var kk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: kk_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: kk_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: kk_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const kk_lib_formatLong = (kk_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/formatRelative/index.js

var kk_lib_formatRelative_accusativeWeekdays = ['–∂–µ–∫—Å–µ–Ω–±—ñ–¥–µ', '–¥“Ø–π—Å–µ–Ω–±—ñ–¥–µ', '—Å–µ–π—Å–µ–Ω–±—ñ–¥–µ', '—Å”ô—Ä—Å–µ–Ω–±—ñ–¥–µ', '–±–µ–π—Å–µ–Ω–±—ñ–¥–µ', '–∂“±–º–∞–¥–∞', '—Å–µ–Ω–±—ñ–¥–µ'];
function kk_lib_formatRelative_lastWeek(day) {
  var weekday = kk_lib_formatRelative_accusativeWeekdays[day];
  return "'”©—Ç–∫–µ–Ω " + weekday + " —Å–∞“ì–∞—Ç' p'-–¥–µ'";
}
function kk_lib_formatRelative_thisWeek(day) {
  var weekday = kk_lib_formatRelative_accusativeWeekdays[day];
  return "'" + weekday + " —Å–∞“ì–∞—Ç' p'-–¥–µ'";
}
function kk_lib_formatRelative_nextWeek(day) {
  var weekday = kk_lib_formatRelative_accusativeWeekdays[day];
  return "'–∫–µ–ª–µ—Å—ñ " + weekday + " —Å–∞“ì–∞—Ç' p'-–¥–µ'";
}
var kk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return kk_lib_formatRelative_thisWeek(day);
    } else {
      return kk_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'–∫–µ—à–µ —Å–∞“ì–∞—Ç' p'-–¥–µ'",
  today: "'–±“Ø–≥—ñ–Ω —Å–∞“ì–∞—Ç' p'-–¥–µ'",
  tomorrow: "'–µ—Ä—Ç–µ“£ —Å–∞“ì–∞—Ç' p'-–¥–µ'",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return kk_lib_formatRelative_thisWeek(day);
    } else {
      return kk_lib_formatRelative_nextWeek(day);
    }
  },
  other: 'P'
};
var kk_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = kk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const kk_lib_formatRelative = (kk_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/localize/index.js

var kk_lib_localize_eraValues = {
  narrow: ['–±.–∑.–¥.', '–±.–∑.'],
  abbreviated: ['–±.–∑.–¥.', '–±.–∑.'],
  wide: ['–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω', '–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑']
};
var kk_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-—à—ñ —Ç–æ“õ.', '2-—à—ñ —Ç–æ“õ.', '3-—à—ñ —Ç–æ“õ.', '4-—à—ñ —Ç–æ“õ.'],
  wide: ['1-—à—ñ —Ç–æ“õ—Å–∞–Ω', '2-—à—ñ —Ç–æ“õ—Å–∞–Ω', '3-—à—ñ —Ç–æ“õ—Å–∞–Ω', '4-—à—ñ —Ç–æ“õ—Å–∞–Ω']
};
var kk_lib_localize_monthValues = {
  narrow: ['“ö', '–ê', '–ù', '–°', '–ú', '–ú', '–®', '–¢', '“ö', '“ö', '“ö', '–ñ'],
  abbreviated: ['“õ–∞“£', '–∞“õ–ø', '–Ω–∞—É', '—Å”ô—É', '–º–∞–º', '–º–∞—É', '—à—ñ–ª', '—Ç–∞–º', '“õ—ã—Ä', '“õ–∞–∑', '“õ–∞—Ä', '–∂–µ–ª'],
  wide: ['“õ–∞“£—Ç–∞—Ä', '–∞“õ–ø–∞–Ω', '–Ω–∞—É—Ä—ã–∑', '—Å”ô—É—ñ—Ä', '–º–∞–º—ã—Ä', '–º–∞—É—Å—ã–º', '—à—ñ–ª–¥–µ', '—Ç–∞–º—ã–∑', '“õ—ã—Ä–∫“Ø–π–µ–∫', '“õ–∞–∑–∞–Ω', '“õ–∞—Ä–∞—à–∞', '–∂–µ–ª—Ç–æ“õ—Å–∞–Ω']
};
var kk_lib_localize_formattingMonthValues = {
  narrow: ['“ö', '–ê', '–ù', '–°', '–ú', '–ú', '–®', '–¢', '“ö', '“ö', '“ö', '–ñ'],
  abbreviated: ['“õ–∞“£', '–∞“õ–ø', '–Ω–∞—É', '—Å”ô—É', '–º–∞–º', '–º–∞—É', '—à—ñ–ª', '—Ç–∞–º', '“õ—ã—Ä', '“õ–∞–∑', '“õ–∞—Ä', '–∂–µ–ª'],
  wide: ['“õ–∞“£—Ç–∞—Ä', '–∞“õ–ø–∞–Ω', '–Ω–∞—É—Ä—ã–∑', '—Å”ô—É—ñ—Ä', '–º–∞–º—ã—Ä', '–º–∞—É—Å—ã–º', '—à—ñ–ª–¥–µ', '—Ç–∞–º—ã–∑', '“õ—ã—Ä–∫“Ø–π–µ–∫', '“õ–∞–∑–∞–Ω', '“õ–∞—Ä–∞—à–∞', '–∂–µ–ª—Ç–æ“õ—Å–∞–Ω']
};
var kk_lib_localize_dayValues = {
  narrow: ['–ñ', '–î', '–°', '–°', '–ë', '–ñ', '–°'],
  short: ['–∂—Å', '–¥—Å', '—Å—Å', '—Å—Ä', '–±—Å', '–∂–º', '—Å–±'],
  abbreviated: ['–∂—Å', '–¥—Å', '—Å—Å', '—Å—Ä', '–±—Å', '–∂–º', '—Å–±'],
  wide: ['–∂–µ–∫—Å–µ–Ω–±—ñ', '–¥“Ø–π—Å–µ–Ω–±—ñ', '—Å–µ–π—Å–µ–Ω–±—ñ', '—Å”ô—Ä—Å–µ–Ω–±—ñ', '–±–µ–π—Å–µ–Ω–±—ñ', '–∂“±–º–∞', '—Å–µ–Ω–±—ñ']
};
var kk_lib_localize_dayPeriodValues = {
  narrow: {
    am: '–¢–î',
    pm: '–¢–ö',
    midnight: '—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã',
    noon: '—Ç“Ø—Å',
    morning: '—Ç–∞“£',
    afternoon: '–∫“Ø–Ω–¥—ñ–∑',
    evening: '–∫–µ—à',
    night: '—Ç“Ø–Ω'
  },
  wide: {
    am: '–¢–î',
    pm: '–¢–ö',
    midnight: '—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã',
    noon: '—Ç“Ø—Å',
    morning: '—Ç–∞“£',
    afternoon: '–∫“Ø–Ω–¥—ñ–∑',
    evening: '–∫–µ—à',
    night: '—Ç“Ø–Ω'
  }
};
var kk_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '–¢–î',
    pm: '–¢–ö',
    midnight: '—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞',
    noon: '—Ç“Ø—Å',
    morning: '—Ç–∞“£',
    afternoon: '–∫“Ø–Ω',
    evening: '–∫–µ—à',
    night: '—Ç“Ø–Ω'
  },
  wide: {
    am: '–¢–î',
    pm: '–¢–ö',
    midnight: '—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞',
    noon: '—Ç“Ø—Å—Ç–µ',
    morning: '—Ç–∞“£–µ—Ä—Ç–µ“£',
    afternoon: '–∫“Ø–Ω–¥—ñ–∑',
    evening: '–∫–µ—à—Ç–µ',
    night: '—Ç“Ø–Ω–¥–µ'
  }
};
var localize_suffixes = {
  0: '-—à—ñ',
  1: '-—à—ñ',
  2: '-—à—ñ',
  3: '-—à—ñ',
  4: '-—à—ñ',
  5: '-—à—ñ',
  6: '-—à—ã',
  7: '-—à—ñ',
  8: '-—à—ñ',
  9: '-—à—ã',
  10: '-—à—ã',
  20: '-—à—ã',
  30: '-—à—ã',
  40: '-—à—ã',
  50: '-—à—ñ',
  60: '-—à—ã',
  70: '-—à—ñ',
  80: '-—à—ñ',
  90: '-—à—ã',
  100: '-—à—ñ'
};
var kk_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var mod10 = number % 10;
  var b = number >= 100 ? 100 : null;
  var suffix = localize_suffixes[number] || localize_suffixes[mod10] || b && localize_suffixes[b] || '';
  return number + suffix;
};
var kk_lib_localize_localize = {
  ordinalNumber: kk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: kk_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_dayPeriodValues,
    defaultWidth: 'any',
    formattingValues: kk_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const kk_lib_localize = (kk_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/match/index.js


var kk_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(—à—ñ|—à—ã))?/i;
var kk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var kk_lib_match_matchEraPatterns = {
  narrow: /^((–± )?–∑\.?\s?–¥\.?)/i,
  abbreviated: /^((–± )?–∑\.?\s?–¥\.?)/i,
  wide: /^(–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω|–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑|–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑–¥–∞–Ω)/i
};
var kk_lib_match_parseEraPatterns = {
  any: [/^–±/i, /^–∑/i]
};
var kk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?—à—ñ)? —Ç–æ“õ.?/i,
  wide: /^[1234](-?—à—ñ)? —Ç–æ“õ—Å–∞–Ω/i
};
var kk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var kk_lib_match_matchMonthPatterns = {
  narrow: /^(“õ|–∞|–Ω|—Å|–º|–º–∞—É|—à|—Ç|“õ—ã—Ä|“õ–∞–∑|“õ–∞—Ä|–∂)/i,
  abbreviated: /^(“õ–∞“£|–∞“õ–ø|–Ω–∞—É|—Å”ô—É|–º–∞–º|–º–∞—É|—à—ñ–ª|—Ç–∞–º|“õ—ã—Ä|“õ–∞–∑|“õ–∞—Ä|–∂–µ–ª)/i,
  wide: /^(“õ–∞“£—Ç–∞—Ä|–∞“õ–ø–∞–Ω|–Ω–∞—É—Ä—ã–∑|—Å”ô—É—ñ—Ä|–º–∞–º—ã—Ä|–º–∞—É—Å—ã–º|—à—ñ–ª–¥–µ|—Ç–∞–º—ã–∑|“õ—ã—Ä–∫“Ø–π–µ–∫|“õ–∞–∑–∞–Ω|“õ–∞—Ä–∞—à–∞|–∂–µ–ª—Ç–æ“õ—Å–∞–Ω)/i
};
var kk_lib_match_parseMonthPatterns = {
  narrow: [/^“õ/i, /^–∞/i, /^–Ω/i, /^—Å/i, /^–º/i, /^–º/i, /^—à/i, /^—Ç/i, /^“õ/i, /^“õ/i, /^“õ/i, /^–∂/i],
  abbreviated: [/^“õ–∞“£/i, /^–∞“õ–ø/i, /^–Ω–∞—É/i, /^—Å”ô—É/i, /^–º–∞–º/i, /^–º–∞—É/i, /^—à—ñ–ª/i, /^—Ç–∞–º/i, /^“õ—ã—Ä/i, /^“õ–∞–∑/i, /^“õ–∞—Ä/i, /^–∂–µ–ª/i],
  any: [/^“õ/i, /^–∞/i, /^–Ω/i, /^—Å/i, /^–º/i, /^–º/i, /^—à/i, /^—Ç/i, /^“õ/i, /^“õ/i, /^“õ/i, /^–∂/i]
};
var kk_lib_match_matchDayPatterns = {
  narrow: /^(–∂|–¥|—Å|—Å|–±|–∂|—Å)/i,
  short: /^(–∂—Å|–¥—Å|—Å—Å|—Å—Ä|–±—Å|–∂–º|—Å–±)/i,
  wide: /^(–∂–µ–∫—Å–µ–Ω–±—ñ|–¥“Ø–π—Å–µ–Ω–±—ñ|—Å–µ–π—Å–µ–Ω–±—ñ|—Å”ô—Ä—Å–µ–Ω–±—ñ|–±–µ–π—Å–µ–Ω–±—ñ|–∂“±–º–∞|—Å–µ–Ω–±—ñ)/i
};
var kk_lib_match_parseDayPatterns = {
  narrow: [/^–∂/i, /^–¥/i, /^—Å/i, /^—Å/i, /^–±/i, /^–∂/i, /^—Å/i],
  short: [/^–∂—Å/i, /^–¥—Å/i, /^—Å—Å/i, /^—Å—Ä/i, /^–±—Å/i, /^–∂–º/i, /^—Å–±/i],
  any: [/^–∂[–µ–∫]/i, /^–¥[“Ø–π]/i, /^—Åe[–π]/i, /^—Å”ô[—Ä]/i, /^–±[–µ–π]/i, /^–∂[“±–º]/i, /^—Å–µ[–Ω]/i]
};
var kk_lib_match_matchDayPeriodPatterns = {
  narrow: /^–¢\.?\s?[–î–ö]\.?|—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞|((—Ç“Ø—Å—Ç–µ|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–¥–∞|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–º–µ–Ω|—Ç–∞“£|–∫“Ø–Ω–¥—ñ–∑|–∫“Ø–Ω|–∫–µ—à—Ç–µ|–∫–µ—à|—Ç“Ø–Ω–¥–µ|—Ç“Ø–Ω)\.?)/i,
  wide: /^–¢\.?\s?[–î–ö]\.?|—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞|((—Ç“Ø—Å—Ç–µ|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–¥–∞|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–º–µ–Ω|—Ç–∞“£|–∫“Ø–Ω–¥—ñ–∑|–∫“Ø–Ω|–∫–µ—à—Ç–µ|–∫–µ—à|—Ç“Ø–Ω–¥–µ|—Ç“Ø–Ω)\.?)/i,
  any: /^–¢\.?\s?[–î–ö]\.?|—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞|((—Ç“Ø—Å—Ç–µ|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–¥–∞|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–º–µ–Ω|—Ç–∞“£|–∫“Ø–Ω–¥—ñ–∑|–∫“Ø–Ω|–∫–µ—à—Ç–µ|–∫–µ—à|—Ç“Ø–Ω–¥–µ|—Ç“Ø–Ω)\.?)/i
};
var kk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–¢–î/i,
    pm: /^–¢–ö/i,
    midnight: /^—Ç“Ø–Ω –æ—Ä—Ç–∞/i,
    noon: /^–∫“Ø–Ω–¥—ñ–∑/i,
    morning: /—Ç–∞“£/i,
    afternoon: /—Ç“Ø—Å/i,
    evening: /–∫–µ—à/i,
    night: /—Ç“Ø–Ω/i
  }
};
var kk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: kk_lib_match_matchOrdinalNumberPattern,
    parsePattern: kk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kk_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kk_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kk_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kk_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const kk_lib_match = (kk_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Kazakh locale.
 * @language Kazakh
 * @iso-639-2 kaz
 * @author Nikita Bayev [@drugoi]{@link https://github.com/drugoi}
 */
var kk_locale = {
  code: 'kk',
  formatDistance: kk_lib_formatDistance,
  formatLong: kk_lib_formatLong,
  formatRelative: kk_lib_formatRelative,
  localize: kk_lib_localize,
  match: kk_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const kk = (kk_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/formatDistance/index.js
var km_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: '·ûè·û∑·ûÖ·ûá·û∂·ûÑ {{count}} ·ûú·û∑·ûì·û∂·ûë·û∏',
  xSeconds: '{{count}} ·ûú·û∑·ûì·û∂·ûë·û∏',
  halfAMinute: '·ûÄ·ûì·üí·ûõ·üá·ûì·û∂·ûë·û∏',
  lessThanXMinutes: '·ûè·û∑·ûÖ·ûá·û∂·ûÑ {{count}} ·ûì·û∂·ûë·û∏',
  xMinutes: '{{count}} ·ûì·û∂·ûë·û∏',
  aboutXHours: '·ûî·üí·ûö·û†·üÇ·ûõ {{count}} ·ûò·üâ·üÑ·ûÑ',
  xHours: '{{count}} ·ûò·üâ·üÑ·ûÑ',
  xDays: '{{count}} ·ûê·üí·ûÑ·üÉ',
  aboutXWeeks: '·ûî·üí·ûö·û†·üÇ·ûõ {{count}} ·ûü·ûî·üí·ûè·û∂·û†·üç',
  xWeeks: '{{count}} ·ûü·ûî·üí·ûè·û∂·û†·üç',
  aboutXMonths: '·ûî·üí·ûö·û†·üÇ·ûõ {{count}} ·ûÅ·üÇ',
  xMonths: '{{count}} ·ûÅ·üÇ',
  aboutXYears: '·ûî·üí·ûö·û†·üÇ·ûõ {{count}} ·ûÜ·üí·ûì·û∂·üÜ',
  xYears: '{{count}} ·ûÜ·üí·ûì·û∂·üÜ',
  overXYears: '·ûá·û∂·ûÑ {{count}} ·ûÜ·üí·ûì·û∂·üÜ',
  almostXYears: '·ûá·û∑·ûè {{count}} ·ûÜ·üí·ûì·û∂·üÜ'
};
var km_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var tokenValue = km_lib_formatDistance_formatDistanceLocale[token];
  var result = tokenValue;
  if (typeof count === 'number') {
    result = result.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '·ûÄ·üí·ûì·ûª·ûÑ·ûö·ûô·üà·ûñ·üÅ·ûõ ' + result;
    } else {
      return result + '·ûò·ûª·ûì';
    }
  }
  return result;
};
/* harmony default export */ const km_lib_formatDistance = (km_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/formatLong/index.js

var km_lib_formatLong_dateFormats = {
  full: 'EEEE do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var km_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a',
  long: 'h:mm:ss a',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var km_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '·ûò·üâ·üÑ·ûÑ' {{time}}",
  long: "{{date}} '·ûò·üâ·üÑ·ûÑ' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var km_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: km_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: km_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: km_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const km_lib_formatLong = (km_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/formatRelative/index.js
var km_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'·ûê·üí·ûÑ·üÉ'eeee'·ûü‚Äã·ûî·üí·ûè·û∂‚Äã·û†·üç‚Äã·ûò·ûª·ûì·ûò·üâ·üÑ·ûÑ' p",
  yesterday: "'·ûò·üí·ûü·û∑·ûõ·ûò·û∑·ûâ·ûì·üÖ·ûò·üâ·üÑ·ûÑ' p",
  today: "'·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá·ûò·üâ·üÑ·ûÑ' p",
  tomorrow: "'·ûê·üí·ûÑ·üÉ·ûü·üí·û¢·üÇ·ûÄ·ûò·üâ·üÑ·ûÑ' p",
  nextWeek: "'·ûê·üí·ûÑ·üÉ'eeee'·ûü‚Äã·ûî·üí·ûè·û∂‚Äã·û†·üç‚Äã·ûÄ·üí·ûö·üÑ·ûô·ûò·üâ·üÑ·ûÑ' p",
  other: 'P'
};
var km_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return km_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const km_lib_formatRelative = (km_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/localize/index.js

var km_lib_localize_eraValues = {
  narrow: ['·ûò.·ûÇ·ûü', '·ûÇ·ûü'],
  abbreviated: ['·ûò·ûª·ûì·ûÇ.·ûü', '·ûÇ.·ûü'],
  wide: ['·ûò·ûª·ûì·ûÇ·üí·ûö·û∑·ûü·üí·ûè·ûü·ûÄ·ûö·û∂·ûá', '·ûì·üÉ·ûÇ·üí·ûö·û∑·ûü·üí·ûè·ûü·ûÄ·ûö·û∂·ûá']
};
var km_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['·ûè·üí·ûö·û∏·ûò·û∂·ûü·ûë·û∏ 1', '·ûè·üí·ûö·û∏·ûò·û∂·ûü·ûë·û∏ 2', '·ûè·üí·ûö·û∏·ûò·û∂·ûü·ûë·û∏ 3', '·ûè·üí·ûö·û∏·ûò·û∂·ûü·ûë·û∏ 4']
};
var km_lib_localize_monthValues = {
  narrow: ['·ûò.·ûÄ', '·ûÄ.·ûò', '·ûò·û∑', '·ûò.·ûü', '·ûß.·ûü', '·ûò.·ûê', '·ûÄ.·ûä', '·ûü·û∏', '·ûÄ·ûâ', '·ûè·ûª', '·ûú·û∑', '·ûí'],
  abbreviated: ['·ûò·ûÄ·ûö·û∂', '·ûÄ·ûª·ûò·üí·ûó·üà', '·ûò·û∏·ûì·û∂', '·ûò·üÅ·ûü·û∂', '·ûß·ûü·ûó·û∂', '·ûò·û∑·ûê·ûª·ûì·û∂', '·ûÄ·ûÄ·üí·ûÄ·ûä·û∂', '·ûü·û∏·û†·û∂', '·ûÄ·ûâ·üí·ûâ·û∂', '·ûè·ûª·ûõ·û∂', '·ûú·û∑·ûÖ·üí·ûÜ·û∑·ûÄ·û∂', '·ûí·üí·ûì·ûº'],
  wide: ['·ûò·ûÄ·ûö·û∂', '·ûÄ·ûª·ûò·üí·ûó·üà', '·ûò·û∏·ûì·û∂', '·ûò·üÅ·ûü·û∂', '·ûß·ûü·ûó·û∂', '·ûò·û∑·ûê·ûª·ûì·û∂', '·ûÄ·ûÄ·üí·ûÄ·ûä·û∂', '·ûü·û∏·û†·û∂', '·ûÄ·ûâ·üí·ûâ·û∂', '·ûè·ûª·ûõ·û∂', '·ûú·û∑·ûÖ·üí·ûÜ·û∑·ûÄ·û∂', '·ûí·üí·ûì·ûº']
};
var km_lib_localize_dayValues = {
  narrow: ['·û¢·û∂', '·ûÖ', '·û¢', '·ûñ', '·ûñ·üí·ûö', '·ûü·ûª', '·ûü'],
  short: ['·û¢·û∂', '·ûÖ', '·û¢', '·ûñ', '·ûñ·üí·ûö', '·ûü·ûª', '·ûü'],
  abbreviated: ['·û¢·û∂', '·ûÖ', '·û¢', '·ûñ', '·ûñ·üí·ûö', '·ûü·ûª', '·ûü'],
  wide: ['·û¢·û∂·ûë·û∑·ûè·üí·ûô', '·ûÖ·ûì·üí·ûë', '·û¢·ûÑ·üí·ûÇ·û∂·ûö', '·ûñ·ûª·ûí', '·ûñ·üí·ûö·û†·ûü·üí·ûî·ûè·û∑·üç', '·ûü·ûª·ûÄ·üí·ûö', '·ûü·üÖ·ûö·üç']
};
var km_lib_localize_dayPeriodValues = {
  narrow: {
    am: '·ûñ·üí·ûö·ûπ·ûÄ',
    pm: '·ûõ·üí·ûÑ·û∂·ûÖ',
    midnight: '‚Äã·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö',
    noon: '·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã',
    morning: '·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ',
    afternoon: '·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ',
    evening: '·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ',
    night: '·ûñ·üÅ·ûõ·ûô·ûî·üã'
  },
  abbreviated: {
    am: '·ûñ·üí·ûö·ûπ·ûÄ',
    pm: '·ûõ·üí·ûÑ·û∂·ûÖ',
    midnight: '‚Äã·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö',
    noon: '·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã',
    morning: '·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ',
    afternoon: '·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ',
    evening: '·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ',
    night: '·ûñ·üÅ·ûõ·ûô·ûî·üã'
  },
  wide: {
    am: '·ûñ·üí·ûö·ûπ·ûÄ',
    pm: '·ûõ·üí·ûÑ·û∂·ûÖ',
    midnight: '‚Äã·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö',
    noon: '·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã',
    morning: '·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ',
    afternoon: '·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ',
    evening: '·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ',
    night: '·ûñ·üÅ·ûõ·ûô·ûî·üã'
  }
};
var km_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '·ûñ·üí·ûö·ûπ·ûÄ',
    pm: '·ûõ·üí·ûÑ·û∂·ûÖ',
    midnight: '‚Äã·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö',
    noon: '·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã',
    morning: '·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ',
    afternoon: '·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ',
    evening: '·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ',
    night: '·ûñ·üÅ·ûõ·ûô·ûî·üã'
  },
  abbreviated: {
    am: '·ûñ·üí·ûö·ûπ·ûÄ',
    pm: '·ûõ·üí·ûÑ·û∂·ûÖ',
    midnight: '‚Äã·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö',
    noon: '·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã',
    morning: '·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ',
    afternoon: '·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ',
    evening: '·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ',
    night: '·ûñ·üÅ·ûõ·ûô·ûî·üã'
  },
  wide: {
    am: '·ûñ·üí·ûö·ûπ·ûÄ',
    pm: '·ûõ·üí·ûÑ·û∂·ûÖ',
    midnight: '‚Äã·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö',
    noon: '·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã',
    morning: '·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ',
    afternoon: '·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ',
    evening: '·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ',
    night: '·ûñ·üÅ·ûõ·ûô·ûî·üã'
  }
};
var km_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _) {
  var number = Number(dirtyNumber);
  return number.toString();
};
var km_lib_localize_localize = {
  ordinalNumber: km_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: km_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const km_lib_localize = (km_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/match/index.js


var km_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var km_lib_match_parseOrdinalNumberPattern = /\d+/i;
var km_lib_match_matchEraPatterns = {
  narrow: /^(·ûò\.)?·ûÇ·ûü/i,
  abbreviated: /^(·ûò·ûª·ûì)?·ûÇ\.·ûü/i,
  wide: /^(·ûò·ûª·ûì|·ûì·üÉ)·ûÇ·üí·ûö·û∑·ûü·üí·ûè·ûü·ûÄ·ûö·û∂·ûá/i
};
var km_lib_match_parseEraPatterns = {
  any: [/^(·ûò|·ûò·ûª·ûì)·ûÇ\.?·ûü/i, /^(·ûì·üÉ)?·ûÇ\.?·ûü/i]
};
var km_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^(·ûè·üí·ûö·û∏·ûò·û∂·ûü)(·ûë·û∏)?\s?[1234]/i
};
var km_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var km_lib_match_matchMonthPatterns = {
  narrow: /^(·ûò\.·ûÄ|·ûÄ\.·ûò|·ûò·û∑|·ûò\.·ûü|·ûß\.·ûü|·ûò\.·ûê|·ûÄ\.·ûä|·ûü·û∏|·ûÄ·ûâ|·ûè·ûª|·ûú·û∑|·ûí)/i,
  abbreviated: /^(·ûò·ûÄ·ûö·û∂|·ûÄ·ûª·ûò·üí·ûó·üà|·ûò·û∏·ûì·û∂|·ûò·üÅ·ûü·û∂|·ûß·ûü·ûó·û∂|·ûò·û∑·ûê·ûª·ûì·û∂|·ûÄ·ûÄ·üí·ûÄ·ûä·û∂|·ûü·û∏·û†·û∂|·ûÄ·ûâ·üí·ûâ·û∂|·ûè·ûª·ûõ·û∂|·ûú·û∑·ûÖ·üí·ûÜ·û∑·ûÄ·û∂|·ûí·üí·ûì·ûº)/i,
  wide: /^(·ûò·ûÄ·ûö·û∂|·ûÄ·ûª·ûò·üí·ûó·üà|·ûò·û∏·ûì·û∂|·ûò·üÅ·ûü·û∂|·ûß·ûü·ûó·û∂|·ûò·û∑·ûê·ûª·ûì·û∂|·ûÄ·ûÄ·üí·ûÄ·ûä·û∂|·ûü·û∏·û†·û∂|·ûÄ·ûâ·üí·ûâ·û∂|·ûè·ûª·ûõ·û∂|·ûú·û∑·ûÖ·üí·ûÜ·û∑·ûÄ·û∂|·ûí·üí·ûì·ûº)/i
};
var km_lib_match_parseMonthPatterns = {
  narrow: [/^·ûò\.·ûÄ/i, /^·ûÄ\.·ûò/i, /^·ûò·û∑/i, /^·ûò\.·ûü/i, /^·ûß\.·ûü/i, /^·ûò\.·ûê/i, /^·ûÄ\.·ûä/i, /^·ûü·û∏/i, /^·ûÄ·ûâ/i, /^·ûè·ûª/i, /^·ûú·û∑/i, /^·ûí/i],
  any: [/^·ûò·ûÄ/i, /^·ûÄ·ûª/i, /^·ûò·û∏·ûì/i, /^·ûò·üÅ/i, /^·ûß·ûü/i, /^·ûò·û∑·ûê/i, /^·ûÄ·ûÄ/i, /^·ûü·û∏/i, /^·ûÄ·ûâ/i, /^·ûè·ûª/i, /^·ûú·û∑·ûÖ/i, /^·ûí/i]
};
var km_lib_match_matchDayPatterns = {
  narrow: /^(·û¢·û∂|·ûÖ|·û¢|·ûñ|·ûñ·üí·ûö|·ûü·ûª|·ûü)/i,
  short: /^(·û¢·û∂|·ûÖ|·û¢|·ûñ|·ûñ·üí·ûö|·ûü·ûª|·ûü)/i,
  abbreviated: /^(·û¢·û∂|·ûÖ|·û¢|·ûñ|·ûñ·üí·ûö|·ûü·ûª|·ûü)/i,
  wide: /^(·û¢·û∂·ûë·û∑·ûè·üí·ûô|·ûÖ·ûì·üí·ûë|·û¢·ûÑ·üí·ûÇ·û∂·ûö|·ûñ·ûª·ûí|·ûñ·üí·ûö·û†·ûü·üí·ûî·ûè·û∑·üç|·ûü·ûª·ûÄ·üí·ûö|·ûü·üÖ·ûö·üç)/i
};
var km_lib_match_parseDayPatterns = {
  narrow: [/^·û¢·û∂/i, /^·ûÖ/i, /^·û¢/i, /^·ûñ/i, /^·ûñ·üí·ûö/i, /^·ûü·ûª/i, /^·ûü/i],
  any: [/^·û¢·û∂/i, /^·ûÖ/i, /^·û¢/i, /^·ûñ/i, /^·ûñ·üí·ûö/i, /^·ûü·ûª/i, /^·ûü·üÖ/i]
};
var km_lib_match_matchDayPeriodPatterns = {
  narrow: /^(·ûñ·üí·ûö·ûπ·ûÄ|·ûõ·üí·ûÑ·û∂·ûÖ|·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ|·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã|·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ|·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ|·ûñ·üÅ·ûõ·ûô·ûî·üã|·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö)/i,
  any: /^(·ûñ·üí·ûö·ûπ·ûÄ|·ûõ·üí·ûÑ·û∂·ûÖ|·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ|·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã|·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ|·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ|·ûñ·üÅ·ûõ·ûô·ûî·üã|·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö)/i
};
var km_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^·ûñ·üí·ûö·ûπ·ûÄ/i,
    pm: /^·ûõ·üí·ûÑ·û∂·ûÖ/i,
    midnight: /^·ûñ·üÅ·ûõ·ûÄ·ûé·üí·ûä·û∂·ûõ·û¢·ûí·üí·ûö·û∂·ûè·üí·ûö/i,
    noon: /^·ûñ·üÅ·ûõ·ûê·üí·ûÑ·üÉ·ûè·üí·ûö·ûÑ·üã/i,
    morning: /·ûñ·üÅ·ûõ·ûñ·üí·ûö·ûπ·ûÄ/i,
    afternoon: /·ûñ·üÅ·ûõ·ûö·ûü·üÄ·ûõ/i,
    evening: /·ûñ·üÅ·ûõ·ûõ·üí·ûÑ·û∂·ûÖ/i,
    night: /·ûñ·üÅ·ûõ·ûô·ûî·üã/i
  }
};
var km_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: km_lib_match_matchOrdinalNumberPattern,
    parsePattern: km_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: km_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: km_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: km_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: km_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: km_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const km_lib_match = (km_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Khmer locale (Cambodian).
 * @language Khmer
 * @iso-639-2 khm
 * @author Seanghay Yath [@seanghay]{@link https://github.com/seanghay}
 */
var km_locale = {
  code: 'km',
  formatDistance: km_lib_formatDistance,
  formatLong: km_lib_formatLong,
  formatRelative: km_lib_formatRelative,
  localize: km_lib_localize,
  match: km_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const km = (km_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/formatDistance/index.js
// note: no implementation for weeks

var kn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      default: '1 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      future: '1 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      past: '1 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      future: '{{count}} ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      past: '{{count}} ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü'
    }
  },
  xSeconds: {
    one: {
      default: '1 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç',
      future: '1 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '1 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥‡≥Å',
      future: '{{count}} ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç‚Äå‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '{{count}} ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥ç ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  halfAMinute: {
    other: {
      default: '‡≤Ö‡≤∞‡≥ç‡≤ß ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑',
      future: '‡≤Ö‡≤∞‡≥ç‡≤ß ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤Ö‡≤∞‡≥ç‡≤ß ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤¶ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  lessThanXMinutes: {
    one: {
      default: '1 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      future: '1 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      past: '1 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      future: '{{count}} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü',
      past: '{{count}} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ï‡≥ç‡≤ï‡≤ø‡≤Ç‡≤§ ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü'
    }
  },
  xMinutes: {
    one: {
      default: '1 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑',
      future: '1 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '1 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤¶ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≥Å',
      future: '{{count}} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '{{count}} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  aboutXHours: {
    one: {
      default: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤ó‡≤Ç‡≤ü‡≥Ü',
      future: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤ó‡≤Ç‡≤ü‡≥Ü ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≥Å',
      future: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  xHours: {
    one: {
      default: '1 ‡≤ó‡≤Ç‡≤ü‡≥Ü',
      future: '1 ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '1 ‡≤ó‡≤Ç‡≤ü‡≥Ü ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≥Å',
      future: '{{count}} ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '{{count}} ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  xDays: {
    one: {
      default: '1 ‡≤¶‡≤ø‡≤®',
      future: '1 ‡≤¶‡≤ø‡≤®‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '1 ‡≤¶‡≤ø‡≤®‡≤¶ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≥Å',
      future: '{{count}} ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '{{count}} ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  // TODO
  // aboutXWeeks: {},

  // TODO
  // xWeeks: {},

  aboutXMonths: {
    one: {
      default: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å',
      future: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å',
      future: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  xMonths: {
    one: {
      default: '1 ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å',
      future: '1 ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '1 ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å',
      future: '{{count}} ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '{{count}} ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  aboutXYears: {
    one: {
      default: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤µ‡≤∞‡≥ç‡≤∑',
      future: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≥Å',
      future: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  xYears: {
    one: {
      default: '1 ‡≤µ‡≤∞‡≥ç‡≤∑',
      future: '1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≥Å',
      future: '{{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '{{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü'
    }
  },
  overXYears: {
    one: {
      default: '1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü',
      future: '1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü',
      past: '1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü'
    },
    other: {
      default: '{{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥ ‡≤Æ‡≥á‡≤≤‡≥Ü',
      future: '{{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥ ‡≤Æ‡≥á‡≤≤‡≥Ü',
      past: '{{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥ ‡≤Æ‡≥á‡≤≤‡≥Ü'
    }
  },
  almostXYears: {
    one: {
      default: '‡≤¨‡≤π‡≥Å‡≤§‡≥á‡≤ï 1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      future: '‡≤¨‡≤π‡≥Å‡≤§‡≥á‡≤ï 1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤¨‡≤π‡≥Å‡≤§‡≥á‡≤ï 1 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø'
    },
    other: {
      default: '‡≤¨‡≤π‡≥Å‡≤§‡≥á‡≤ï {{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      future: '‡≤¨‡≤π‡≥Å‡≤§‡≥á‡≤ï {{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø',
      past: '‡≤¨‡≤π‡≥Å‡≤§‡≥á‡≤ï {{count}} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø'
    }
  }
};
function getResultByTense(parentToken, options) {
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return parentToken.future;
    } else {
      return parentToken.past;
    }
  }
  return parentToken.default;
}
var kn_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = kn_lib_formatDistance_formatDistanceLocale[token];
  if (tokenValue.one && count === 1) {
    result = getResultByTense(tokenValue.one, options);
  } else {
    result = getResultByTense(tokenValue.other, options);
  }
  return result.replace('{{count}}', String(count));
};
/* harmony default export */ const kn_lib_formatDistance = (kn_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/formatLong/index.js
 // Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html
var kn_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM d, y',
  // CLDR 1816
  long: 'MMMM d, y',
  // CLDR 1817
  medium: 'MMM d, y',
  // CLDR 1818
  short: 'd/M/yy' // CLDR 1819
};

var kn_lib_formatLong_timeFormats = {
  full: 'hh:mm:ss a zzzz',
  // CLDR 1820
  long: 'hh:mm:ss a z',
  // CLDR 1821
  medium: 'hh:mm:ss a',
  // CLDR 1822
  short: 'hh:mm a' // CLDR 1823
};

var kn_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  // CLDR 1824
  long: '{{date}} {{time}}',
  // CLDR 1825
  medium: '{{date}} {{time}}',
  // CLDR 1826
  short: '{{date}} {{time}}' // CLDR 1827
};

var kn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: kn_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: kn_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: kn_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const kn_lib_formatLong = (kn_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/formatRelative/index.js
var kn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‡≤ï‡≤≥‡≥Ü‡≤¶' eeee p '‡≤ï‡≥ç‡≤ï‡≥Ü'",
  yesterday: "'‡≤®‡≤ø‡≤®‡≥ç‡≤®‡≥Ü' p '‡≤ï‡≥ç‡≤ï‡≥Ü'",
  today: "'‡≤á‡≤Ç‡≤¶‡≥Å' p '‡≤ï‡≥ç‡≤ï‡≥Ü'",
  tomorrow: "'‡≤®‡≤æ‡≤≥‡≥Ü' p '‡≤ï‡≥ç‡≤ï‡≥Ü'",
  nextWeek: "eeee p '‡≤ï‡≥ç‡≤ï‡≥Ü'",
  other: 'P'
};
var kn_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return kn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const kn_lib_formatRelative = (kn_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/localize/index.js
 // Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html
var kn_lib_localize_eraValues = {
  narrow: ['‡≤ï‡≥ç‡≤∞‡≤ø.‡≤™‡≥Ç', '‡≤ï‡≥ç‡≤∞‡≤ø.‡≤∂'],
  abbreviated: ['‡≤ï‡≥ç‡≤∞‡≤ø.‡≤™‡≥Ç', '‡≤ï‡≥ç‡≤∞‡≤ø.‡≤∂'],
  // CLDR #1618, #1620
  wide: ['‡≤ï‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤§ ‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ', '‡≤ï‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤§ ‡≤∂‡≤ï'] // CLDR #1614, #1616
};

var kn_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['‡≤§‡≥ç‡≤∞‡≥à 1', '‡≤§‡≥ç‡≤∞‡≥à 2', '‡≤§‡≥ç‡≤∞‡≥à 3', '‡≤§‡≥ç‡≤∞‡≥à 4'],
  // CLDR #1630 - #1638
  wide: ['1‡≤®‡≥á ‡≤§‡≥ç‡≤∞‡≥à‡≤Æ‡≤æ‡≤∏‡≤ø‡≤ï', '2‡≤®‡≥á ‡≤§‡≥ç‡≤∞‡≥à‡≤Æ‡≤æ‡≤∏‡≤ø‡≤ï', '3‡≤®‡≥á ‡≤§‡≥ç‡≤∞‡≥à‡≤Æ‡≤æ‡≤∏‡≤ø‡≤ï', '4‡≤®‡≥á ‡≤§‡≥ç‡≤∞‡≥à‡≤Æ‡≤æ‡≤∏‡≤ø‡≤ï'] // CLDR #1622 - #1629
};

// CLDR #1646 - #1717
var kn_lib_localize_monthValues = {
  narrow: ['‡≤ú', '‡≤´‡≥Ü', '‡≤Æ‡≤æ', '‡≤è', '‡≤Æ‡≥á', '‡≤ú‡≥Ç', '‡≤ú‡≥Å', '‡≤Ü', '‡≤∏‡≥Ü', '‡≤Ö', '‡≤®', '‡≤°‡≤ø'],
  abbreviated: ['‡≤ú‡≤®', '‡≤´‡≥Ü‡≤¨‡≥ç‡≤∞', '‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ö‡≥ç', '‡≤è‡≤™‡≥ç‡≤∞‡≤ø', '‡≤Æ‡≥á', '‡≤ú‡≥Ç‡≤®‡≥ç', '‡≤ú‡≥Å‡≤≤‡≥à', '‡≤Ü‡≤ó', '‡≤∏‡≥Ü‡≤™‡≥ç‡≤ü‡≥Ü‡≤Ç', '‡≤Ö‡≤ï‡≥ç‡≤ü‡≥ã', '‡≤®‡≤µ‡≥Ü‡≤Ç', '‡≤°‡≤ø‡≤∏‡≥Ü‡≤Ç'],
  wide: ['‡≤ú‡≤®‡≤µ‡≤∞‡≤ø', '‡≤´‡≥Ü‡≤¨‡≥ç‡≤∞‡≤µ‡≤∞‡≤ø', '‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ö‡≥ç', '‡≤è‡≤™‡≥ç‡≤∞‡≤ø‡≤≤‡≥ç', '‡≤Æ‡≥á', '‡≤ú‡≥Ç‡≤®‡≥ç', '‡≤ú‡≥Å‡≤≤‡≥à', '‡≤Ü‡≤ó‡≤∏‡≥ç‡≤ü‡≥ç', '‡≤∏‡≥Ü‡≤™‡≥ç‡≤ü‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç', '‡≤Ö‡≤ï‡≥ç‡≤ü‡≥ã‡≤¨‡≤∞‡≥ç', '‡≤®‡≤µ‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç', '‡≤°‡≤ø‡≤∏‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç']
};

// CLDR #1718 - #1773
var kn_lib_localize_dayValues = {
  narrow: ['‡≤≠‡≤æ', '‡≤∏‡≥ã', '‡≤Æ‡≤Ç', '‡≤¨‡≥Å', '‡≤ó‡≥Å', '‡≤∂‡≥Å', '‡≤∂'],
  short: ['‡≤≠‡≤æ‡≤®‡≥Å', '‡≤∏‡≥ã‡≤Æ', '‡≤Æ‡≤Ç‡≤ó‡≤≥', '‡≤¨‡≥Å‡≤ß', '‡≤ó‡≥Å‡≤∞‡≥Å', '‡≤∂‡≥Å‡≤ï‡≥ç‡≤∞', '‡≤∂‡≤®‡≤ø'],
  abbreviated: ['‡≤≠‡≤æ‡≤®‡≥Å', '‡≤∏‡≥ã‡≤Æ', '‡≤Æ‡≤Ç‡≤ó‡≤≥', '‡≤¨‡≥Å‡≤ß', '‡≤ó‡≥Å‡≤∞‡≥Å', '‡≤∂‡≥Å‡≤ï‡≥ç‡≤∞', '‡≤∂‡≤®‡≤ø'],
  wide: ['‡≤≠‡≤æ‡≤®‡≥Å‡≤µ‡≤æ‡≤∞', '‡≤∏‡≥ã‡≤Æ‡≤µ‡≤æ‡≤∞', '‡≤Æ‡≤Ç‡≤ó‡≤≥‡≤µ‡≤æ‡≤∞', '‡≤¨‡≥Å‡≤ß‡≤µ‡≤æ‡≤∞', '‡≤ó‡≥Å‡≤∞‡≥Å‡≤µ‡≤æ‡≤∞', '‡≤∂‡≥Å‡≤ï‡≥ç‡≤∞‡≤µ‡≤æ‡≤∞', '‡≤∂‡≤®‡≤ø‡≤µ‡≤æ‡≤∞']
};

// CLDR #1774 - #1815
var kn_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≥ç‡≤®',
    pm: '‡≤Ö‡≤™‡≤∞‡≤æ‡≤π‡≥ç‡≤®',
    midnight: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø',
    noon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤π‡≥ç‡≤®',
    morning: '‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü',
    afternoon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤π‡≥ç‡≤®',
    evening: '‡≤∏‡≤Ç‡≤ú‡≥Ü',
    night: '‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø'
  },
  abbreviated: {
    am: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≥ç‡≤®',
    pm: '‡≤Ö‡≤™‡≤∞‡≤æ‡≤π‡≥ç‡≤®',
    midnight: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø',
    noon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    morning: '‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü',
    afternoon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    evening: '‡≤∏‡≤Ç‡≤ú‡≥Ü',
    night: '‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø'
  },
  wide: {
    am: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≥ç‡≤®',
    pm: '‡≤Ö‡≤™‡≤∞‡≤æ‡≤π‡≥ç‡≤®',
    midnight: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø',
    noon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    morning: '‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü',
    afternoon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    evening: '‡≤∏‡≤Ç‡≤ú‡≥Ü',
    night: '‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø'
  }
};
var kn_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‡≤™‡≥Ç',
    pm: '‡≤Ö',
    midnight: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø',
    noon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    morning: '‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü',
    afternoon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    evening: '‡≤∏‡≤Ç‡≤ú‡≥Ü',
    night: '‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø'
  },
  abbreviated: {
    am: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≥ç‡≤®',
    pm: '‡≤Ö‡≤™‡≤∞‡≤æ‡≤π‡≥ç‡≤®',
    midnight: '‡≤Æ‡≤ß‡≥ç‡≤Ø ‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø',
    noon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    morning: '‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü',
    afternoon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    evening: '‡≤∏‡≤Ç‡≤ú‡≥Ü',
    night: '‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø'
  },
  wide: {
    am: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≥ç‡≤®',
    pm: '‡≤Ö‡≤™‡≤∞‡≤æ‡≤π‡≥ç‡≤®',
    midnight: '‡≤Æ‡≤ß‡≥ç‡≤Ø ‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø',
    noon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    morning: '‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü',
    afternoon: '‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π',
    evening: '‡≤∏‡≤Ç‡≤ú‡≥Ü',
    night: '‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø'
  }
};
var kn_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '‡≤®‡≥á';
};
var kn_lib_localize_localize = {
  ordinalNumber: kn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: kn_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const kn_lib_localize = (kn_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/match/index.js


var kn_lib_match_matchOrdinalNumberPattern = /^(\d+)(‡≤®‡≥á|‡≤®‡≥Ü)?/i;
var kn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var kn_lib_match_matchEraPatterns = {
  narrow: /^(‡≤ï‡≥ç‡≤∞‡≤ø.‡≤™‡≥Ç|‡≤ï‡≥ç‡≤∞‡≤ø.‡≤∂)/i,
  abbreviated: /^(‡≤ï‡≥ç‡≤∞‡≤ø\.?\s?‡≤™‡≥Ç\.?|‡≤ï‡≥ç‡≤∞‡≤ø\.?\s?‡≤∂\.?|‡≤™‡≥ç‡≤∞\.?\s?‡≤∂\.?)/i,
  wide: /^(‡≤ï‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤§ ‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ|‡≤ï‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤§ ‡≤∂‡≤ï|‡≤™‡≥ç‡≤∞‡≤∏‡≤ï‡≥ç‡≤§ ‡≤∂‡≤ï)/i
};
var kn_lib_match_parseEraPatterns = {
  any: [/^‡≤™‡≥Ç/i, /^(‡≤∂|‡≤™‡≥ç‡≤∞)/i]
};
var kn_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^‡≤§‡≥ç‡≤∞‡≥à[1234]|‡≤§‡≥ç‡≤∞‡≥à [1234]| [1234]‡≤§‡≥ç‡≤∞‡≥à/i,
  wide: /^[1234](‡≤®‡≥á)? ‡≤§‡≥ç‡≤∞‡≥à‡≤Æ‡≤æ‡≤∏‡≤ø‡≤ï/i
};
var kn_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var kn_lib_match_matchMonthPatterns = {
  narrow: /^(‡≤ú‡≥Ç|‡≤ú‡≥Å|‡≤ú|‡≤´‡≥Ü|‡≤Æ‡≤æ|‡≤è|‡≤Æ‡≥á|‡≤Ü|‡≤∏‡≥Ü|‡≤Ö|‡≤®|‡≤°‡≤ø)/i,
  abbreviated: /^(‡≤ú‡≤®|‡≤´‡≥Ü‡≤¨‡≥ç‡≤∞|‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ö‡≥ç|‡≤è‡≤™‡≥ç‡≤∞‡≤ø|‡≤Æ‡≥á|‡≤ú‡≥Ç‡≤®‡≥ç|‡≤ú‡≥Å‡≤≤‡≥à|‡≤Ü‡≤ó|‡≤∏‡≥Ü‡≤™‡≥ç‡≤ü‡≥Ü‡≤Ç|‡≤Ö‡≤ï‡≥ç‡≤ü‡≥ã|‡≤®‡≤µ‡≥Ü‡≤Ç|‡≤°‡≤ø‡≤∏‡≥Ü‡≤Ç)/i,
  wide: /^(‡≤ú‡≤®‡≤µ‡≤∞‡≤ø|‡≤´‡≥Ü‡≤¨‡≥ç‡≤∞‡≤µ‡≤∞‡≤ø|‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ö‡≥ç|‡≤è‡≤™‡≥ç‡≤∞‡≤ø‡≤≤‡≥ç|‡≤Æ‡≥á|‡≤ú‡≥Ç‡≤®‡≥ç|‡≤ú‡≥Å‡≤≤‡≥à|‡≤Ü‡≤ó‡≤∏‡≥ç‡≤ü‡≥ç|‡≤∏‡≥Ü‡≤™‡≥ç‡≤ü‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç|‡≤Ö‡≤ï‡≥ç‡≤ü‡≥ã‡≤¨‡≤∞‡≥ç|‡≤®‡≤µ‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç|‡≤°‡≤ø‡≤∏‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç)/i
};
var kn_lib_match_parseMonthPatterns = {
  narrow: [/^‡≤ú$/i, /^‡≤´‡≥Ü/i, /^‡≤Æ‡≤æ/i, /^‡≤è/i, /^‡≤Æ‡≥á/i, /^‡≤ú‡≥Ç/i, /^‡≤ú‡≥Å$/i, /^‡≤Ü/i, /^‡≤∏‡≥Ü/i, /^‡≤Ö/i, /^‡≤®/i, /^‡≤°‡≤ø/i],
  any: [/^‡≤ú‡≤®/i, /^‡≤´‡≥Ü/i, /^‡≤Æ‡≤æ/i, /^‡≤è/i, /^‡≤Æ‡≥á/i, /^‡≤ú‡≥Ç‡≤®‡≥ç/i, /^‡≤ú‡≥Å‡≤≤‡≥à/i, /^‡≤Ü/i, /^‡≤∏‡≥Ü/i, /^‡≤Ö/i, /^‡≤®/i, /^‡≤°‡≤ø/i]
};
var kn_lib_match_matchDayPatterns = {
  narrow: /^(‡≤≠‡≤æ|‡≤∏‡≥ã|‡≤Æ|‡≤¨‡≥Å|‡≤ó‡≥Å|‡≤∂‡≥Å|‡≤∂)/i,
  short: /^(‡≤≠‡≤æ‡≤®‡≥Å|‡≤∏‡≥ã‡≤Æ|‡≤Æ‡≤Ç‡≤ó‡≤≥|‡≤¨‡≥Å‡≤ß|‡≤ó‡≥Å‡≤∞‡≥Å|‡≤∂‡≥Å‡≤ï‡≥ç‡≤∞|‡≤∂‡≤®‡≤ø)/i,
  abbreviated: /^(‡≤≠‡≤æ‡≤®‡≥Å|‡≤∏‡≥ã‡≤Æ|‡≤Æ‡≤Ç‡≤ó‡≤≥|‡≤¨‡≥Å‡≤ß|‡≤ó‡≥Å‡≤∞‡≥Å|‡≤∂‡≥Å‡≤ï‡≥ç‡≤∞|‡≤∂‡≤®‡≤ø)/i,
  wide: /^(‡≤≠‡≤æ‡≤®‡≥Å‡≤µ‡≤æ‡≤∞|‡≤∏‡≥ã‡≤Æ‡≤µ‡≤æ‡≤∞|‡≤Æ‡≤Ç‡≤ó‡≤≥‡≤µ‡≤æ‡≤∞|‡≤¨‡≥Å‡≤ß‡≤µ‡≤æ‡≤∞|‡≤ó‡≥Å‡≤∞‡≥Å‡≤µ‡≤æ‡≤∞|‡≤∂‡≥Å‡≤ï‡≥ç‡≤∞‡≤µ‡≤æ‡≤∞|‡≤∂‡≤®‡≤ø‡≤µ‡≤æ‡≤∞)/i
};
var kn_lib_match_parseDayPatterns = {
  narrow: [/^‡≤≠‡≤æ/i, /^‡≤∏‡≥ã/i, /^‡≤Æ/i, /^‡≤¨‡≥Å/i, /^‡≤ó‡≥Å/i, /^‡≤∂‡≥Å/i, /^‡≤∂/i],
  any: [/^‡≤≠‡≤æ/i, /^‡≤∏‡≥ã/i, /^‡≤Æ/i, /^‡≤¨‡≥Å/i, /^‡≤ó‡≥Å/i, /^‡≤∂‡≥Å/i, /^‡≤∂/i]
};
var kn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(‡≤™‡≥Ç|‡≤Ö|‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø|‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π|‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü|‡≤∏‡≤Ç‡≤ú‡≥Ü|‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø)/i,
  any: /^(‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≥ç‡≤®|‡≤Ö‡≤™‡≤∞‡≤æ‡≤π‡≥ç‡≤®|‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø|‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π|‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü|‡≤∏‡≤Ç‡≤ú‡≥Ü|‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø)/i
};
var kn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‡≤™‡≥Ç/i,
    pm: /^‡≤Ö/i,
    midnight: /‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø/i,
    noon: /‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π/i,
    morning: /‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü/i,
    afternoon: /‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç‡≤π/i,
    evening: /‡≤∏‡≤Ç‡≤ú‡≥Ü/i,
    night: /‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø/i
  }
};
var kn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: kn_lib_match_matchOrdinalNumberPattern,
    parsePattern: kn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kn_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kn_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kn_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: kn_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: kn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const kn_lib_match = (kn_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Kannada locale (India).
 * @language Kannada
 * @iso-639-2 kan
 * @author Manjunatha Gouli [@developergouli]{@link https://github.com/developergouli}
 */
var kn_locale = {
  code: 'kn',
  formatDistance: kn_lib_formatDistance,
  formatLong: kn_lib_formatLong,
  formatRelative: kn_lib_formatRelative,
  localize: kn_lib_localize,
  match: kn_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const kn = (kn_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/formatDistance/index.js
var ko_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '1Ï¥à ÎØ∏Îßå',
    other: '{{count}}Ï¥à ÎØ∏Îßå'
  },
  xSeconds: {
    one: '1Ï¥à',
    other: '{{count}}Ï¥à'
  },
  halfAMinute: '30Ï¥à',
  lessThanXMinutes: {
    one: '1Î∂Ñ ÎØ∏Îßå',
    other: '{{count}}Î∂Ñ ÎØ∏Îßå'
  },
  xMinutes: {
    one: '1Î∂Ñ',
    other: '{{count}}Î∂Ñ'
  },
  aboutXHours: {
    one: 'ÏïΩ 1ÏãúÍ∞Ñ',
    other: 'ÏïΩ {{count}}ÏãúÍ∞Ñ'
  },
  xHours: {
    one: '1ÏãúÍ∞Ñ',
    other: '{{count}}ÏãúÍ∞Ñ'
  },
  xDays: {
    one: '1Ïùº',
    other: '{{count}}Ïùº'
  },
  aboutXWeeks: {
    one: 'ÏïΩ 1Ï£º',
    other: 'ÏïΩ {{count}}Ï£º'
  },
  xWeeks: {
    one: '1Ï£º',
    other: '{{count}}Ï£º'
  },
  aboutXMonths: {
    one: 'ÏïΩ 1Í∞úÏõî',
    other: 'ÏïΩ {{count}}Í∞úÏõî'
  },
  xMonths: {
    one: '1Í∞úÏõî',
    other: '{{count}}Í∞úÏõî'
  },
  aboutXYears: {
    one: 'ÏïΩ 1ÎÖÑ',
    other: 'ÏïΩ {{count}}ÎÖÑ'
  },
  xYears: {
    one: '1ÎÖÑ',
    other: '{{count}}ÎÖÑ'
  },
  overXYears: {
    one: '1ÎÖÑ Ïù¥ÏÉÅ',
    other: '{{count}}ÎÖÑ Ïù¥ÏÉÅ'
  },
  almostXYears: {
    one: 'Í±∞Ïùò 1ÎÖÑ',
    other: 'Í±∞Ïùò {{count}}ÎÖÑ'
  }
};
var ko_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ko_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' ÌõÑ';
    } else {
      return result + ' Ï†Ñ';
    }
  }
  return result;
};
/* harmony default export */ const ko_lib_formatDistance = (ko_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/formatLong/index.js

var ko_lib_formatLong_dateFormats = {
  full: 'yÎÖÑ MÏõî dÏùº EEEE',
  long: 'yÎÖÑ MÏõî dÏùº',
  medium: 'y.MM.dd',
  short: 'y.MM.dd'
};
var ko_lib_formatLong_timeFormats = {
  full: 'a HÏãú mmÎ∂Ñ ssÏ¥à zzzz',
  long: 'a H:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var ko_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var ko_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ko_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ko_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ko_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ko_lib_formatLong = (ko_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/formatRelative/index.js
var ko_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ÏßÄÎÇú' eeee p",
  yesterday: "'Ïñ¥Ï†ú' p",
  today: "'Ïò§Îäò' p",
  tomorrow: "'ÎÇ¥Ïùº' p",
  nextWeek: "'Îã§Ïùå' eeee p",
  other: 'P'
};
var ko_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ko_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ko_lib_formatRelative = (ko_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/localize/index.js

var ko_lib_localize_eraValues = {
  narrow: ['BC', 'AD'],
  abbreviated: ['BC', 'AD'],
  wide: ['Í∏∞ÏõêÏ†Ñ', 'ÏÑúÍ∏∞']
};
var ko_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1Î∂ÑÍ∏∞', '2Î∂ÑÍ∏∞', '3Î∂ÑÍ∏∞', '4Î∂ÑÍ∏∞']
};
var ko_lib_localize_monthValues = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî', '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî'],
  wide: ['1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî', '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî']
};
var ko_lib_localize_dayValues = {
  narrow: ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'],
  short: ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'],
  abbreviated: ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'],
  wide: ['ÏùºÏöîÏùº', 'ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº']
};
var ko_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'Ïò§Ï†Ñ',
    pm: 'Ïò§ÌõÑ',
    midnight: 'ÏûêÏ†ï',
    noon: 'Ï†ïÏò§',
    morning: 'ÏïÑÏπ®',
    afternoon: 'Ïò§ÌõÑ',
    evening: 'Ï†ÄÎÖÅ',
    night: 'Î∞§'
  },
  abbreviated: {
    am: 'Ïò§Ï†Ñ',
    pm: 'Ïò§ÌõÑ',
    midnight: 'ÏûêÏ†ï',
    noon: 'Ï†ïÏò§',
    morning: 'ÏïÑÏπ®',
    afternoon: 'Ïò§ÌõÑ',
    evening: 'Ï†ÄÎÖÅ',
    night: 'Î∞§'
  },
  wide: {
    am: 'Ïò§Ï†Ñ',
    pm: 'Ïò§ÌõÑ',
    midnight: 'ÏûêÏ†ï',
    noon: 'Ï†ïÏò§',
    morning: 'ÏïÑÏπ®',
    afternoon: 'Ïò§ÌõÑ',
    evening: 'Ï†ÄÎÖÅ',
    night: 'Î∞§'
  }
};
var ko_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'Ïò§Ï†Ñ',
    pm: 'Ïò§ÌõÑ',
    midnight: 'ÏûêÏ†ï',
    noon: 'Ï†ïÏò§',
    morning: 'ÏïÑÏπ®',
    afternoon: 'Ïò§ÌõÑ',
    evening: 'Ï†ÄÎÖÅ',
    night: 'Î∞§'
  },
  abbreviated: {
    am: 'Ïò§Ï†Ñ',
    pm: 'Ïò§ÌõÑ',
    midnight: 'ÏûêÏ†ï',
    noon: 'Ï†ïÏò§',
    morning: 'ÏïÑÏπ®',
    afternoon: 'Ïò§ÌõÑ',
    evening: 'Ï†ÄÎÖÅ',
    night: 'Î∞§'
  },
  wide: {
    am: 'Ïò§Ï†Ñ',
    pm: 'Ïò§ÌõÑ',
    midnight: 'ÏûêÏ†ï',
    noon: 'Ï†ïÏò§',
    morning: 'ÏïÑÏπ®',
    afternoon: 'Ïò§ÌõÑ',
    evening: 'Ï†ÄÎÖÅ',
    night: 'Î∞§'
  }
};
var ko_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case 'minute':
    case 'second':
      return String(number);
    case 'date':
      return number + 'Ïùº';
    default:
      return number + 'Î≤àÏß∏';
  }
};
var ko_lib_localize_localize = {
  ordinalNumber: ko_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ko_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ko_lib_localize = (ko_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/match/index.js


var ko_lib_match_matchOrdinalNumberPattern = /^(\d+)(Ïùº|Î≤àÏß∏)?/i;
var ko_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ko_lib_match_matchEraPatterns = {
  narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(Í∏∞ÏõêÏ†Ñ|ÏÑúÍ∏∞)/i
};
var ko_lib_match_parseEraPatterns = {
  any: [/^(bc|Í∏∞ÏõêÏ†Ñ)/i, /^(ad|ÏÑúÍ∏∞)/i]
};
var ko_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]ÏÇ¨?Î∂ÑÍ∏∞/i
};
var ko_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ko_lib_match_matchMonthPatterns = {
  narrow: /^(1[012]|[123456789])/,
  abbreviated: /^(1[012]|[123456789])Ïõî/i,
  wide: /^(1[012]|[123456789])Ïõî/i
};
var ko_lib_match_parseMonthPatterns = {
  any: [/^1Ïõî?$/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var ko_lib_match_matchDayPatterns = {
  narrow: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]/,
  short: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]/,
  abbreviated: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]/,
  wide: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]ÏöîÏùº/
};
var ko_lib_match_parseDayPatterns = {
  any: [/^Ïùº/, /^Ïõî/, /^Ìôî/, /^Ïàò/, /^Î™©/, /^Í∏à/, /^ÌÜ†/]
};
var ko_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|Ïò§Ï†Ñ|Ïò§ÌõÑ|ÏûêÏ†ï|Ï†ïÏò§|ÏïÑÏπ®|Ï†ÄÎÖÅ|Î∞§)/i
};
var ko_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(am|Ïò§Ï†Ñ)/i,
    pm: /^(pm|Ïò§ÌõÑ)/i,
    midnight: /^ÏûêÏ†ï/i,
    noon: /^Ï†ïÏò§/i,
    morning: /^ÏïÑÏπ®/i,
    afternoon: /^Ïò§ÌõÑ/i,
    evening: /^Ï†ÄÎÖÅ/i,
    night: /^Î∞§/i
  }
};
var ko_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ko_lib_match_matchOrdinalNumberPattern,
    parsePattern: ko_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ko_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ko_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ko_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ko_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ko_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ko_lib_match = (ko_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Korean locale.
 * @language Korean
 * @iso-639-2 kor
 * @author Hong Chulju [@angdev]{@link https://github.com/angdev}
 * @author Lee Seoyoen [@iamssen]{@link https://github.com/iamssen}
 * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
 */
var ko_locale = {
  code: 'ko',
  formatDistance: ko_lib_formatDistance,
  formatLong: ko_lib_formatLong,
  formatRelative: ko_lib_formatRelative,
  localize: ko_lib_localize,
  match: ko_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ko = (ko_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/formatDistance/index.js
var lb_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: 'manner w√©i eng Sekonn',
      other: 'manner w√©i {{count}} Sekonnen'
    },
    withPreposition: {
      one: 'manner w√©i enger Sekonn',
      other: 'manner w√©i {{count}} Sekonnen'
    }
  },
  xSeconds: {
    standalone: {
      one: 'eng Sekonn',
      other: '{{count}} Sekonnen'
    },
    withPreposition: {
      one: 'enger Sekonn',
      other: '{{count}} Sekonnen'
    }
  },
  halfAMinute: {
    standalone: 'eng hallef Minutt',
    withPreposition: 'enger hallwer Minutt'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'manner w√©i eng Minutt',
      other: 'manner w√©i {{count}} Minutten'
    },
    withPreposition: {
      one: 'manner w√©i enger Minutt',
      other: 'manner w√©i {{count}} Minutten'
    }
  },
  xMinutes: {
    standalone: {
      one: 'eng Minutt',
      other: '{{count}} Minutten'
    },
    withPreposition: {
      one: 'enger Minutt',
      other: '{{count}} Minutten'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'ongef√©ier eng Stonn',
      other: 'ongef√©ier {{count}} Stonnen'
    },
    withPreposition: {
      one: 'ongef√©ier enger Stonn',
      other: 'ongef√©ier {{count}} Stonnen'
    }
  },
  xHours: {
    standalone: {
      one: 'eng Stonn',
      other: '{{count}} Stonnen'
    },
    withPreposition: {
      one: 'enger Stonn',
      other: '{{count}} Stonnen'
    }
  },
  xDays: {
    standalone: {
      one: 'een Dag',
      other: '{{count}} Deeg'
    },
    withPreposition: {
      one: 'engem Dag',
      other: '{{count}} Deeg'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'ongef√©ier eng Woch',
      other: 'ongef√©ier {{count}} Wochen'
    },
    withPreposition: {
      one: 'ongef√©ier enger Woche',
      other: 'ongef√©ier {{count}} Wochen'
    }
  },
  xWeeks: {
    standalone: {
      one: 'eng Woch',
      other: '{{count}} Wochen'
    },
    withPreposition: {
      one: 'enger Woch',
      other: '{{count}} Wochen'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'ongef√©ier ee Mount',
      other: 'ongef√©ier {{count}} M√©int'
    },
    withPreposition: {
      one: 'ongef√©ier engem Mount',
      other: 'ongef√©ier {{count}} M√©int'
    }
  },
  xMonths: {
    standalone: {
      one: 'ee Mount',
      other: '{{count}} M√©int'
    },
    withPreposition: {
      one: 'engem Mount',
      other: '{{count}} M√©int'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'ongef√©ier ee Joer',
      other: 'ongef√©ier {{count}} Joer'
    },
    withPreposition: {
      one: 'ongef√©ier engem Joer',
      other: 'ongef√©ier {{count}} Joer'
    }
  },
  xYears: {
    standalone: {
      one: 'ee Joer',
      other: '{{count}} Joer'
    },
    withPreposition: {
      one: 'engem Joer',
      other: '{{count}} Joer'
    }
  },
  overXYears: {
    standalone: {
      one: 'm√©i w√©i ee Joer',
      other: 'm√©i w√©i {{count}} Joer'
    },
    withPreposition: {
      one: 'm√©i w√©i engem Joer',
      other: 'm√©i w√©i {{count}} Joer'
    }
  },
  almostXYears: {
    standalone: {
      one: 'bal ee Joer',
      other: 'bal {{count}} Joer'
    },
    withPreposition: {
      one: 'bal engem Joer',
      other: 'bal {{count}} Joer'
    }
  }
};
var EXCEPTION_CONSONANTS = ['d', 'h', 'n', 't', 'z'];
var VOWELS = ['a,', 'e', 'i', 'o', 'u'];
var DIGITS_SPOKEN_N_NEEDED = [0, 1, 2, 3, 8, 9];
var FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [40, 50, 60, 70];

// Eifeler Regel
function isFinalNNeeded(nextWords) {
  var firstLetter = nextWords.charAt(0).toLowerCase();
  if (VOWELS.indexOf(firstLetter) != -1 || EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1) {
    return true;
  }

  // Numbers would need to converted into words for checking.
  // Therefore, I have listed the digits that require a preceeding n with a few exceptions.
  var firstWord = nextWords.split(' ')[0];
  var number = parseInt(firstWord);
  if (!isNaN(number) && DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 && FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(parseInt(firstWord.substring(0, 2))) == -1) {
    return true;
  }

  // Omit other checks as they are not expected here.
  return false;
}
var lb_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = lb_lib_formatDistance_formatDistanceLocale[token];
  var usageGroup = options !== null && options !== void 0 && options.addSuffix ? tokenValue.withPreposition : tokenValue.standalone;
  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'a' + (isFinalNNeeded(result) ? 'n' : '') + ' ' + result;
    } else {
      return 'viru' + (isFinalNNeeded(result) ? 'n' : '') + ' ' + result;
    }
  }
  return result;
};
/* harmony default export */ const lb_lib_formatDistance = (lb_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/formatLong/index.js
 // DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
var lb_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM y',
  // M√©indeg, 7. Januar 2018
  long: 'do MMMM y',
  // 7. Januar 2018
  medium: 'do MMM y',
  // 7. Jan 2018
  short: 'dd.MM.yy' // 07.01.18
};

var lb_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var lb_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var lb_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: lb_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: lb_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: lb_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const lb_lib_formatLong = (lb_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/formatRelative/index.js
var lb_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    var result = "'l√§schte";
    if (day === 2 || day === 4) {
      // Eifeler Regel: Add an n before the consonant d; Here "D√´nschdeg" "and Donneschde".
      result += 'n';
    }
    result += "' eeee 'um' p";
    return result;
  },
  yesterday: "'g√´schter um' p",
  today: "'haut um' p",
  tomorrow: "'moien um' p",
  nextWeek: "eeee 'um' p",
  other: 'P'
};
var lb_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = lb_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const lb_lib_formatRelative = (lb_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/localize/index.js

var lb_lib_localize_eraValues = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['viru Christus', 'no Christus']
};
var lb_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};
var lb_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'M√§e', 'Abr', 'Mee', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['Januar', 'Februar', 'M√§erz', 'Abr√´ll', 'Mee', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};
var lb_lib_localize_dayValues = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'M√©', 'D√´', 'M√´', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'M√©.', 'D√´.', 'M√´.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonndeg', 'M√©indeg', 'D√´nschdeg', 'M√´ttwoch', 'Donneschdeg', 'Freideg', 'Samschdeg']
};
var lb_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'mo.',
    pm: 'nom√´.',
    midnight: 'M√´tternuecht',
    noon: 'M√´tteg',
    morning: 'Moien',
    afternoon: 'Nom√´tteg',
    evening: 'Owend',
    night: 'Nuecht'
  },
  abbreviated: {
    am: 'moies',
    pm: 'nom√´ttes',
    midnight: 'M√´tternuecht',
    noon: 'M√´tteg',
    morning: 'Moien',
    afternoon: 'Nom√´tteg',
    evening: 'Owend',
    night: 'Nuecht'
  },
  wide: {
    am: 'moies',
    pm: 'nom√´ttes',
    midnight: 'M√´tternuecht',
    noon: 'M√´tteg',
    morning: 'Moien',
    afternoon: 'Nom√´tteg',
    evening: 'Owend',
    night: 'Nuecht'
  }
};
var lb_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'mo.',
    pm: 'nom.',
    midnight: 'M√´tternuecht',
    noon: 'm√´ttes',
    morning: 'moies',
    afternoon: 'nom√´ttes',
    evening: 'owes',
    night: 'nuets'
  },
  abbreviated: {
    am: 'moies',
    pm: 'nom√´ttes',
    midnight: 'M√´tternuecht',
    noon: 'm√´ttes',
    morning: 'moies',
    afternoon: 'nom√´ttes',
    evening: 'owes',
    night: 'nuets'
  },
  wide: {
    am: 'moies',
    pm: 'nom√´ttes',
    midnight: 'M√´tternuecht',
    noon: 'm√´ttes',
    morning: 'moies',
    afternoon: 'nom√´ttes',
    evening: 'owes',
    night: 'nuets'
  }
};
var lb_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var lb_lib_localize_localize = {
  ordinalNumber: lb_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: lb_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const lb_lib_localize = (lb_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/match/index.js


var lb_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var lb_lib_match_parseOrdinalNumberPattern = /\d+/i;
var lb_lib_match_matchEraPatterns = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(viru Christus|virun eiser Z√§itrechnung|no Christus|eiser Z√§itrechnung)/i
};
var lb_lib_match_parseEraPatterns = {
  any: [/^v/i, /^n/i]
};
var lb_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var lb_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var lb_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|m√§e|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
  wide: /^(januar|februar|m√§erz|abr√´ll|mee|juni|juli|august|september|oktober|november|dezember)/i
};
var lb_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^m√§/i, /^ab/i, /^me/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var lb_lib_match_matchDayPatterns = {
  narrow: /^[smdf]/i,
  short: /^(so|m√©|d√´|m√´|do|fr|sa)/i,
  abbreviated: /^(son?|m√©i?|d√´n?|m√´t?|don?|fre?|sam?)\.?/i,
  wide: /^(sonndeg|m√©indeg|d√´nschdeg|m√´ttwoch|donneschdeg|freideg|samschdeg)/i
};
var lb_lib_match_parseDayPatterns = {
  any: [/^so/i, /^m√©/i, /^d√´/i, /^m√´/i, /^do/i, /^f/i, /^sa/i]
};
var lb_lib_match_matchDayPeriodPatterns = {
  narrow: /^(mo\.?|nom√´\.?|M√´tternuecht|m√´ttes|moies|nom√´ttes|owes|nuets)/i,
  abbreviated: /^(moi\.?|nom√´t\.?|M√´tternuecht|m√´ttes|moies|nom√´ttes|owes|nuets)/i,
  wide: /^(moies|nom√´ttes|M√´tternuecht|m√´ttes|moies|nom√´ttes|owes|nuets)/i
};
var lb_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^m/i,
    pm: /^n/i,
    midnight: /^M√´tter/i,
    noon: /^m√´ttes/i,
    morning: /moies/i,
    afternoon: /nom√´ttes/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /owes/i,
    night: /nuets/i // will never be matched. Night is matched by `pm`
  }
};

var lb_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: lb_lib_match_matchOrdinalNumberPattern,
    parsePattern: lb_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lb_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lb_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lb_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lb_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lb_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const lb_lib_match = (lb_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Luxembourgish locale.
 * @language Luxembourgish
 * @iso-639-2 ltz
 * @author Daniel Waxweiler [@dwaxweiler]{@link https://github.com/dwaxweiler}
 */
var lb_locale = {
  code: 'lb',
  formatDistance: lb_lib_formatDistance,
  formatLong: lb_lib_formatLong,
  formatRelative: lb_lib_formatRelative,
  localize: lb_lib_localize,
  match: lb_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const lb = (lb_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/formatDistance/index.js
var formatDistance_translations = {
  xseconds_other: 'sekundƒó_sekund≈æi≈≥_sekundes',
  xminutes_one: 'minutƒó_minutƒós_minutƒô',
  xminutes_other: 'minutƒós_minuƒçi≈≥_minutes',
  xhours_one: 'valanda_valandos_valandƒÖ',
  xhours_other: 'valandos_valand≈≥_valandas',
  xdays_one: 'diena_dienos_dienƒÖ',
  xdays_other: 'dienos_dien≈≥_dienas',
  xweeks_one: 'savaitƒó_savaitƒós_savaitƒô',
  xweeks_other: 'savaitƒós_savaiƒçi≈≥_savaites',
  xmonths_one: 'mƒónuo_mƒónesio_mƒónesƒØ',
  xmonths_other: 'mƒónesiai_mƒónesi≈≥_mƒónesius',
  xyears_one: 'metai_met≈≥_metus',
  xyears_other: 'metai_met≈≥_metus',
  about: 'apie',
  over: 'daugiau nei',
  almost: 'beveik',
  lessthan: 'ma≈æiau nei'
};
var translateSeconds = function translateSeconds(_number, addSuffix, _key, isFuture) {
  if (!addSuffix) {
    return 'kelios sekundƒós';
  } else {
    return isFuture ? 'keli≈≥ sekund≈æi≈≥' : 'kelias sekundes';
  }
};
var translateSingular = function translateSingular(_number, addSuffix, key, isFuture) {
  return !addSuffix ? formatDistance_forms(key)[0] : isFuture ? formatDistance_forms(key)[1] : formatDistance_forms(key)[2];
};
var translate = function translate(number, addSuffix, key, isFuture) {
  var result = number + ' ';
  if (number === 1) {
    return result + translateSingular(number, addSuffix, key, isFuture);
  } else if (!addSuffix) {
    return result + (special(number) ? formatDistance_forms(key)[1] : formatDistance_forms(key)[0]);
  } else {
    if (isFuture) {
      return result + formatDistance_forms(key)[1];
    } else {
      return result + (special(number) ? formatDistance_forms(key)[1] : formatDistance_forms(key)[2]);
    }
  }
};
function special(number) {
  return number % 10 === 0 || number > 10 && number < 20;
}
function formatDistance_forms(key) {
  return formatDistance_translations[key].split('_');
}
var lt_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: translateSeconds,
    other: translate
  },
  xSeconds: {
    one: translateSeconds,
    other: translate
  },
  halfAMinute: 'pusƒó minutƒós',
  lessThanXMinutes: {
    one: translateSingular,
    other: translate
  },
  xMinutes: {
    one: translateSingular,
    other: translate
  },
  aboutXHours: {
    one: translateSingular,
    other: translate
  },
  xHours: {
    one: translateSingular,
    other: translate
  },
  xDays: {
    one: translateSingular,
    other: translate
  },
  aboutXWeeks: {
    one: translateSingular,
    other: translate
  },
  xWeeks: {
    one: translateSingular,
    other: translate
  },
  aboutXMonths: {
    one: translateSingular,
    other: translate
  },
  xMonths: {
    one: translateSingular,
    other: translate
  },
  aboutXYears: {
    one: translateSingular,
    other: translate
  },
  xYears: {
    one: translateSingular,
    other: translate
  },
  overXYears: {
    one: translateSingular,
    other: translate
  },
  almostXYears: {
    one: translateSingular,
    other: translate
  }
};
var lt_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], '') : token;
  var isFuture = (options === null || options === void 0 ? void 0 : options.comparison) !== undefined && options.comparison > 0;
  var result;
  var tokenValue = lt_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + '_one', isFuture);
  } else {
    result = tokenValue.other(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + '_other', isFuture);
  }
  if (adverb) {
    var _key2 = adverb[0].toLowerCase();
    result = formatDistance_translations[_key2] + ' ' + result;
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'po ' + result;
    } else {
      return 'prie≈° ' + result;
    }
  }
  return result;
};
/* harmony default export */ const lt_lib_formatDistance = (lt_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/formatLong/index.js

var lt_lib_formatLong_dateFormats = {
  full: "y 'm'. MMMM d 'd'., EEEE",
  long: "y 'm'. MMMM d 'd'.",
  medium: 'y-MM-dd',
  short: 'y-MM-dd'
};
var lt_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var lt_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var lt_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: lt_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: lt_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: lt_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const lt_lib_formatLong = (lt_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/formatRelative/index.js
var lt_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'PraƒójusƒØ' eeee p",
  yesterday: "'Vakar' p",
  today: "'≈†iandien' p",
  tomorrow: "'Rytoj' p",
  nextWeek: 'eeee p',
  other: 'P'
};
var lt_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return lt_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const lt_lib_formatRelative = (lt_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/localize/index.js

var lt_lib_localize_eraValues = {
  narrow: ['pr. Kr.', 'po Kr.'],
  abbreviated: ['pr. Kr.', 'po Kr.'],
  wide: ['prie≈° Krist≈≥', 'po Kristaus']
};
var lt_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I ketv.', 'II ketv.', 'III ketv.', 'IV ketv.'],
  wide: ['I ketvirtis', 'II ketvirtis', 'III ketvirtis', 'IV ketvirtis']
};
var localize_formattingQuarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I k.', 'II k.', 'III k.', 'IV k.'],
  wide: ['I ketvirtis', 'II ketvirtis', 'III ketvirtis', 'IV ketvirtis']
};
var lt_lib_localize_monthValues = {
  narrow: ['S', 'V', 'K', 'B', 'G', 'B', 'L', 'R', 'R', 'S', 'L', 'G'],
  abbreviated: ['saus.', 'vas.', 'kov.', 'bal.', 'geg.', 'bir≈æ.', 'liep.', 'rugp.', 'rugs.', 'spal.', 'lapkr.', 'gruod.'],
  wide: ['sausis', 'vasaris', 'kovas', 'balandis', 'gegu≈æƒó', 'bir≈æelis', 'liepa', 'rugpj≈´tis', 'rugsƒójis', 'spalis', 'lapkritis', 'gruodis']
};
var lt_lib_localize_formattingMonthValues = {
  narrow: ['S', 'V', 'K', 'B', 'G', 'B', 'L', 'R', 'R', 'S', 'L', 'G'],
  abbreviated: ['saus.', 'vas.', 'kov.', 'bal.', 'geg.', 'bir≈æ.', 'liep.', 'rugp.', 'rugs.', 'spal.', 'lapkr.', 'gruod.'],
  wide: ['sausio', 'vasario', 'kovo', 'baland≈æio', 'gegu≈æƒós', 'bir≈æelio', 'liepos', 'rugpj≈´ƒçio', 'rugsƒójo', 'spalio', 'lapkriƒçio', 'gruod≈æio']
};
var lt_lib_localize_dayValues = {
  narrow: ['S', 'P', 'A', 'T', 'K', 'P', '≈†'],
  short: ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', '≈†t'],
  abbreviated: ['sk', 'pr', 'an', 'tr', 'kt', 'pn', '≈°t'],
  wide: ['sekmadienis', 'pirmadienis', 'antradienis', 'treƒçiadienis', 'ketvirtadienis', 'penktadienis', '≈°e≈°tadienis']
};
var localize_formattingDayValues = {
  narrow: ['S', 'P', 'A', 'T', 'K', 'P', '≈†'],
  short: ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', '≈†t'],
  abbreviated: ['sk', 'pr', 'an', 'tr', 'kt', 'pn', '≈°t'],
  wide: ['sekmadienƒØ', 'pirmadienƒØ', 'antradienƒØ', 'treƒçiadienƒØ', 'ketvirtadienƒØ', 'penktadienƒØ', '≈°e≈°tadienƒØ']
};
var lt_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'pr. p.',
    pm: 'pop.',
    midnight: 'vidurnaktis',
    noon: 'vidurdienis',
    morning: 'rytas',
    afternoon: 'diena',
    evening: 'vakaras',
    night: 'naktis'
  },
  abbreviated: {
    am: 'prie≈°piet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'vidurdienis',
    morning: 'rytas',
    afternoon: 'diena',
    evening: 'vakaras',
    night: 'naktis'
  },
  wide: {
    am: 'prie≈°piet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'vidurdienis',
    morning: 'rytas',
    afternoon: 'diena',
    evening: 'vakaras',
    night: 'naktis'
  }
};
var lt_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'pr. p.',
    pm: 'pop.',
    midnight: 'vidurnaktis',
    noon: 'perpiet',
    morning: 'rytas',
    afternoon: 'popietƒó',
    evening: 'vakaras',
    night: 'naktis'
  },
  abbreviated: {
    am: 'prie≈°piet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'perpiet',
    morning: 'rytas',
    afternoon: 'popietƒó',
    evening: 'vakaras',
    night: 'naktis'
  },
  wide: {
    am: 'prie≈°piet',
    pm: 'popiet',
    midnight: 'vidurnaktis',
    noon: 'perpiet',
    morning: 'rytas',
    afternoon: 'popietƒó',
    evening: 'vakaras',
    night: 'naktis'
  }
};
var lt_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '-oji';
};
var lt_lib_localize_localize = {
  ordinalNumber: lt_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_quarterValues,
    defaultWidth: 'wide',
    formattingValues: localize_formattingQuarterValues,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: lt_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_dayValues,
    defaultWidth: 'wide',
    formattingValues: localize_formattingDayValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: lt_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const lt_lib_localize = (lt_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/match/index.js


var lt_lib_match_matchOrdinalNumberPattern = /^(\d+)(-oji)?/i;
var lt_lib_match_parseOrdinalNumberPattern = /\d+/i;
var lt_lib_match_matchEraPatterns = {
  narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
  abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|m≈´s≈≥ eroje)/i,
  wide: /^(prie≈° Krist≈≥|prie≈° m≈´s≈≥ erƒÖ|po Kristaus|m≈´s≈≥ eroje)/i
};
var lt_lib_match_parseEraPatterns = {
  wide: [/prie≈°/i, /(po|m≈´s≈≥)/i],
  any: [/^pr/i, /^(po|m)/i]
};
var lt_lib_match_matchQuarterPatterns = {
  narrow: /^([1234])/i,
  abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
  wide: /^(I|II|III|IV)\s?ketvirtis/i
};
var lt_lib_match_parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/I$/i, /II$/i, /III/i, /IV/i]
};
var lt_lib_match_matchMonthPatterns = {
  narrow: /^[svkbglr]/i,
  abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|bir≈æ\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
  wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|baland≈æ?i(s|o)|gegu≈æƒós?|bir≈æeli(s|o)|liep(a|os)|rugpj≈´(t|ƒç)i(s|o)|rugsƒój(is|o)|spali(s|o)|lapkri(t|ƒç)i(s|o)|gruod≈æ?i(s|o))/i
};
var lt_lib_match_parseMonthPatterns = {
  narrow: [/^s/i, /^v/i, /^k/i, /^b/i, /^g/i, /^b/i, /^l/i, /^r/i, /^r/i, /^s/i, /^l/i, /^g/i],
  any: [/^saus/i, /^vas/i, /^kov/i, /^bal/i, /^geg/i, /^bir≈æ/i, /^liep/i, /^rugp/i, /^rugs/i, /^spal/i, /^lapkr/i, /^gruod/i]
};
var lt_lib_match_matchDayPatterns = {
  narrow: /^[spatk≈°]/i,
  short: /^(sk|pr|an|tr|kt|pn|≈°t)/i,
  abbreviated: /^(sk|pr|an|tr|kt|pn|≈°t)/i,
  wide: /^(sekmadien(is|ƒØ)|pirmadien(is|ƒØ)|antradien(is|ƒØ)|treƒçiadien(is|ƒØ)|ketvirtadien(is|ƒØ)|penktadien(is|ƒØ)|≈°e≈°tadien(is|ƒØ))/i
};
var lt_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^≈°/i],
  wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^≈°e/i],
  any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^≈°t/i]
};
var lt_lib_match_matchDayPeriodPatterns = {
  narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietƒó)|vakaras|naktis)/i,
  any: /^(prie≈°piet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietƒó)|vakaras|naktis)/i
};
var lt_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^pr/i,
    pm: /^pop./i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietƒó)/i,
    evening: /vakaras/i,
    night: /naktis/i
  },
  any: {
    am: /^pr/i,
    pm: /^popiet$/i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietƒó)/i,
    evening: /vakaras/i,
    night: /naktis/i
  }
};
var lt_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: lt_lib_match_matchOrdinalNumberPattern,
    parsePattern: lt_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lt_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lt_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lt_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lt_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: lt_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const lt_lib_match = (lt_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Lithuanian locale.
 * @language Lithuanian
 * @iso-639-2 lit
 * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
 * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
 */
var lt_locale = {
  code: 'lt',
  formatDistance: lt_lib_formatDistance,
  formatLong: lt_lib_formatLong,
  formatRelative: lt_lib_formatRelative,
  localize: lt_lib_localize,
  match: lt_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const lt = (lt_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/formatDistance/index.js
function _lib_formatDistance_buildLocalizeTokenFn(schema) {
  return function (count, options) {
    if (count === 1) {
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.one[0].replace('{{time}}', schema.one[2]);
      } else {
        return schema.one[0].replace('{{time}}', schema.one[1]);
      }
    } else {
      var rem = count % 10 === 1 && count % 100 !== 11;
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.other[0].replace('{{time}}', rem ? schema.other[3] : schema.other[4]).replace('{{count}}', String(count));
      } else {
        return schema.other[0].replace('{{time}}', rem ? schema.other[1] : schema.other[2]).replace('{{count}}', String(count));
      }
    }
  };
}
var lv_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['mazƒÅk par {{time}}', 'sekundi', 'sekundi'],
    other: ['mazƒÅk nekƒÅ {{count}} {{time}}', 'sekunde', 'sekundes', 'sekundes', 'sekundƒìm']
  }),
  xSeconds: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'sekunde', 'sekundes'],
    other: ['{{count}} {{time}}', 'sekunde', 'sekundes', 'sekundes', 'sekundƒìm']
  }),
  halfAMinute: function halfAMinute(_count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      return 'pusmin≈´tes';
    } else {
      return 'pusmin≈´te';
    }
  },
  lessThanXMinutes: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['mazƒÅk par {{time}}', 'min≈´ti', 'min≈´ti'],
    other: ['mazƒÅk nekƒÅ {{count}} {{time}}', 'min≈´te', 'min≈´tes', 'min≈´tes', 'min≈´tƒìm']
  }),
  xMinutes: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'min≈´te', 'min≈´tes'],
    other: ['{{count}} {{time}}', 'min≈´te', 'min≈´tes', 'min≈´tes', 'min≈´tƒìm']
  }),
  aboutXHours: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['apmƒìram 1 {{time}}', 'stunda', 'stundas'],
    other: ['apmƒìram {{count}} {{time}}', 'stunda', 'stundas', 'stundas', 'stundƒÅm']
  }),
  xHours: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'stunda', 'stundas'],
    other: ['{{count}} {{time}}', 'stunda', 'stundas', 'stundas', 'stundƒÅm']
  }),
  xDays: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'diena', 'dienas'],
    other: ['{{count}} {{time}}', 'diena', 'dienas', 'dienas', 'dienƒÅm']
  }),
  aboutXWeeks: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['apmƒìram 1 {{time}}', 'nedƒìƒºa', 'nedƒìƒºas'],
    other: ['apmƒìram {{count}} {{time}}', 'nedƒìƒºa', 'nedƒìƒºu', 'nedƒìƒºas', 'nedƒìƒºƒÅm']
  }),
  xWeeks: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'nedƒìƒºa', 'nedƒìƒºas'],
    other: ['{{count}} {{time}}',
    // TODO
    'nedƒìƒºa', 'nedƒìƒºu', 'nedƒìƒºas', 'nedƒìƒºƒÅm']
  }),
  aboutXMonths: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['apmƒìram 1 {{time}}', 'mƒìnesis', 'mƒìne≈°a'],
    other: ['apmƒìram {{count}} {{time}}', 'mƒìnesis', 'mƒìne≈°i', 'mƒìne≈°a', 'mƒìne≈°iem']
  }),
  xMonths: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'mƒìnesis', 'mƒìne≈°a'],
    other: ['{{count}} {{time}}', 'mƒìnesis', 'mƒìne≈°i', 'mƒìne≈°a', 'mƒìne≈°iem']
  }),
  aboutXYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['apmƒìram 1 {{time}}', 'gads', 'gada'],
    other: ['apmƒìram {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  }),
  xYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['1 {{time}}', 'gads', 'gada'],
    other: ['{{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  }),
  overXYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['ilgƒÅk par 1 {{time}}', 'gadu', 'gadu'],
    other: ['vairƒÅk nekƒÅ {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  }),
  almostXYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ['gandrƒ´z 1 {{time}}', 'gads', 'gada'],
    other: ['vairƒÅk nekƒÅ {{count}} {{time}}', 'gads', 'gadi', 'gada', 'gadiem']
  })
};
var lv_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result = lv_lib_formatDistance_formatDistanceLocale[token](count, options);
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'pƒìc ' + result;
    } else {
      return 'pirms ' + result;
    }
  }
  return result;
};
/* harmony default export */ const lv_lib_formatDistance = (lv_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/formatLong/index.js

var lv_lib_formatLong_dateFormats = {
  full: "EEEE, y. 'gada' d. MMMM",
  long: "y. 'gada' d. MMMM",
  medium: 'dd.MM.y.',
  short: 'dd.MM.y.'
};
var lv_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var lv_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'plkst.' {{time}}",
  long: "{{date}} 'plkst.' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var lv_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: lv_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: lv_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: lv_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const lv_lib_formatLong = (lv_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/formatRelative/index.js

var _lib_formatRelative_weekdays = ['svƒìtdienƒÅ', 'pirmdienƒÅ', 'otrdienƒÅ', 'tre≈°dienƒÅ', 'ceturtdienƒÅ', 'piektdienƒÅ', 'sestdienƒÅ'];
var lv_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    if (isSameUTCWeek(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }
    var weekday = _lib_formatRelative_weekdays[date.getUTCDay()];
    return "'PagƒÅju≈°ƒÅ " + weekday + " plkst.' p";
  },
  yesterday: "'Vakar plkst.' p",
  today: "'≈†odien plkst.' p",
  tomorrow: "'Rƒ´t plkst.' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    if (isSameUTCWeek(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }
    var weekday = _lib_formatRelative_weekdays[date.getUTCDay()];
    return "'NƒÅkamajƒÅ " + weekday + " plkst.' p";
  },
  other: 'P'
};
var lv_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = lv_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const lv_lib_formatRelative = (lv_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/localize/index.js

var lv_lib_localize_eraValues = {
  narrow: ['p.m.ƒì', 'm.ƒì'],
  abbreviated: ['p. m. ƒì.', 'm. ƒì.'],
  wide: ['pirms m≈´su ƒìras', 'm≈´su ƒìrƒÅ']
};
var lv_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. cet.', '2. cet.', '3. cet.', '4. cet.'],
  wide: ['pirmais ceturksnis', 'otrais ceturksnis', 'tre≈°ais ceturksnis', 'ceturtais ceturksnis']
};
var _lib_localize_formattingQuarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. cet.', '2. cet.', '3. cet.', '4. cet.'],
  wide: ['pirmajƒÅ ceturksnƒ´', 'otrajƒÅ ceturksnƒ´', 'tre≈°ajƒÅ ceturksnƒ´', 'ceturtajƒÅ ceturksnƒ´']
};
var lv_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'febr.', 'marts', 'apr.', 'maijs', 'j≈´n.', 'j≈´l.', 'aug.', 'sept.', 'okt.', 'nov.', 'dec.'],
  wide: ['janvƒÅris', 'februƒÅris', 'marts', 'aprƒ´lis', 'maijs', 'j≈´nijs', 'j≈´lijs', 'augusts', 'septembris', 'oktobris', 'novembris', 'decembris']
};
var lv_lib_localize_formattingMonthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'febr.', 'martƒÅ', 'apr.', 'maijs', 'j≈´n.', 'j≈´l.', 'aug.', 'sept.', 'okt.', 'nov.', 'dec.'],
  wide: ['janvƒÅrƒ´', 'februƒÅrƒ´', 'martƒÅ', 'aprƒ´lƒ´', 'maijƒÅ', 'j≈´nijƒÅ', 'j≈´lijƒÅ', 'augustƒÅ', 'septembrƒ´', 'oktobrƒ´', 'novembrƒ´', 'decembrƒ´']
};
var lv_lib_localize_dayValues = {
  narrow: ['S', 'P', 'O', 'T', 'C', 'P', 'S'],
  short: ['Sv', 'P', 'O', 'T', 'C', 'Pk', 'S'],
  abbreviated: ['svƒìtd.', 'pirmd.', 'otrd.', 'tre≈°d.', 'ceturtd.', 'piektd.', 'sestd.'],
  wide: ['svƒìtdiena', 'pirmdiena', 'otrdiena', 'tre≈°diena', 'ceturtdiena', 'piektdiena', 'sestdiena']
};
var _lib_localize_formattingDayValues = {
  narrow: ['S', 'P', 'O', 'T', 'C', 'P', 'S'],
  short: ['Sv', 'P', 'O', 'T', 'C', 'Pk', 'S'],
  abbreviated: ['svƒìtd.', 'pirmd.', 'otrd.', 'tre≈°d.', 'ceturtd.', 'piektd.', 'sestd.'],
  wide: ['svƒìtdienƒÅ', 'pirmdienƒÅ', 'otrdienƒÅ', 'tre≈°dienƒÅ', 'ceturtdienƒÅ', 'piektdienƒÅ', 'sestdienƒÅ']
};
var lv_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rƒ´ts',
    afternoon: 'diena',
    evening: 'vakars',
    night: 'nakts'
  },
  abbreviated: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rƒ´ts',
    afternoon: 'pƒìcpusd.',
    evening: 'vakars',
    night: 'nakts'
  },
  wide: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusnakts',
    noon: 'pusdienlaiks',
    morning: 'rƒ´ts',
    afternoon: 'pƒìcpusdiena',
    evening: 'vakars',
    night: 'nakts'
  }
};
var lv_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rƒ´tƒÅ',
    afternoon: 'dienƒÅ',
    evening: 'vakarƒÅ',
    night: 'naktƒ´'
  },
  abbreviated: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusn.',
    noon: 'pusd.',
    morning: 'rƒ´tƒÅ',
    afternoon: 'pƒìcpusd.',
    evening: 'vakarƒÅ',
    night: 'naktƒ´'
  },
  wide: {
    am: 'am',
    pm: 'pm',
    midnight: 'pusnaktƒ´',
    noon: 'pusdienlaikƒÅ',
    morning: 'rƒ´tƒÅ',
    afternoon: 'pƒìcpusdienƒÅ',
    evening: 'vakarƒÅ',
    night: 'naktƒ´'
  }
};
var lv_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var lv_lib_localize_localize = {
  ordinalNumber: lv_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_quarterValues,
    defaultWidth: 'wide',
    formattingValues: _lib_localize_formattingQuarterValues,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: lv_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_dayValues,
    defaultWidth: 'wide',
    formattingValues: _lib_localize_formattingDayValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: lv_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const lv_lib_localize = (lv_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/match/index.js


var lv_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var lv_lib_match_parseOrdinalNumberPattern = /\d+/i;
var lv_lib_match_matchEraPatterns = {
  narrow: /^(p\.m\.ƒì|m\.ƒì)/i,
  abbreviated: /^(p\. m\. ƒì\.|m\. ƒì\.)/i,
  wide: /^(pirms m≈´su ƒìras|m≈´su ƒìrƒÅ)/i
};
var lv_lib_match_parseEraPatterns = {
  any: [/^p/i, /^m/i]
};
var lv_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](\. cet\.)/i,
  wide: /^(pirma(is|jƒÅ)|otra(is|jƒÅ)|tre≈°a(is|jƒÅ)|ceturta(is|jƒÅ)) ceturksn(is|ƒ´)/i
};
var lv_lib_match_parseQuarterPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
  abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
  wide: [/^p/i, /^o/i, /^t/i, /^c/i]
};
var lv_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|j≈´n\.|j≈´l\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
  wide: /^(janvƒÅr(is|ƒ´)|februƒÅr(is|ƒ´)|mart[sƒÅ]|aprƒ´l(is|ƒ´)|maij[sƒÅ]|j≈´nij[sƒÅ]|j≈´lij[sƒÅ]|august[sƒÅ]|septembr(is|ƒ´)|oktobr(is|ƒ´)|novembr(is|ƒ´)|decembr(is|ƒ´))/i
};
var lv_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^j≈´n/i, /^j≈´l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var lv_lib_match_matchDayPatterns = {
  narrow: /^[spotc]/i,
  short: /^(sv|pi|o|t|c|pk|s)/i,
  abbreviated: /^(svƒìtd\.|pirmd\.|otrd.\|tre≈°d\.|ceturtd\.|piektd\.|sestd\.)/i,
  wide: /^(svƒìtdien(a|ƒÅ)|pirmdien(a|ƒÅ)|otrdien(a|ƒÅ)|tre≈°dien(a|ƒÅ)|ceturtdien(a|ƒÅ)|piektdien(a|ƒÅ)|sestdien(a|ƒÅ))/i
};
var lv_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
  any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i]
};
var lv_lib_match_matchDayPeriodPatterns = {
  narrow: /^(am|pm|pusn\.|pusd\.|rƒ´t(s|ƒÅ)|dien(a|ƒÅ)|vakar(s|ƒÅ)|nakt(s|ƒ´))/,
  abbreviated: /^(am|pm|pusn\.|pusd\.|rƒ´t(s|ƒÅ)|pƒìcpusd\.|vakar(s|ƒÅ)|nakt(s|ƒ´))/,
  wide: /^(am|pm|pusnakt(s|ƒ´)|pusdienlaik(s|ƒÅ)|rƒ´t(s|ƒÅ)|pƒìcpusdien(a|ƒÅ)|vakar(s|ƒÅ)|nakt(s|ƒ´))/i
};
var lv_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^pusn/i,
    noon: /^pusd/i,
    morning: /^r/i,
    afternoon: /^(d|pƒìc)/i,
    evening: /^v/i,
    night: /^n/i
  }
};
var lv_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: lv_lib_match_matchOrdinalNumberPattern,
    parsePattern: lv_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lv_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lv_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'wide',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lv_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lv_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: lv_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const lv_lib_match = (lv_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Latvian locale (Latvia).
 * @language Latvian
 * @iso-639-2 lav
 * @author R≈´dolfs Puƒ∑ƒ´tis [@prudolfs]{@link https://github.com/prudolfs}
 */
var lv_locale = {
  code: 'lv',
  formatDistance: lv_lib_formatDistance,
  formatLong: lv_lib_formatLong,
  formatRelative: lv_lib_formatRelative,
  localize: lv_lib_localize,
  match: lv_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const lv = (lv_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/formatDistance/index.js
var mk_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '–ø–æ–º–∞–ª–∫—É –æ–¥ —Å–µ–∫—É–Ω–¥–∞',
    other: '–ø–æ–º–∞–ª–∫—É –æ–¥ {{count}} —Å–µ–∫—É–Ω–¥–∏'
  },
  xSeconds: {
    one: '1 —Å–µ–∫—É–Ω–¥–∞',
    other: '{{count}} —Å–µ–∫—É–Ω–¥–∏'
  },
  halfAMinute: '–ø–æ–ª–æ–≤–∏–Ω–∞ –º–∏–Ω—É—Ç–∞',
  lessThanXMinutes: {
    one: '–ø–æ–º–∞–ª–∫—É –æ–¥ –º–∏–Ω—É—Ç–∞',
    other: '–ø–æ–º–∞–ª–∫—É –æ–¥ {{count}} –º–∏–Ω—É—Ç–∏'
  },
  xMinutes: {
    one: '1 –º–∏–Ω—É—Ç–∞',
    other: '{{count}} –º–∏–Ω—É—Ç–∏'
  },
  aboutXHours: {
    one: '–æ–∫–æ–ª—É 1 —á–∞—Å',
    other: '–æ–∫–æ–ª—É {{count}} —á–∞—Å–∞'
  },
  xHours: {
    one: '1 —á–∞—Å',
    other: '{{count}} —á–∞—Å–∞'
  },
  xDays: {
    one: '1 –¥–µ–Ω',
    other: '{{count}} –¥–µ–Ω–∞'
  },
  aboutXWeeks: {
    one: '–æ–∫–æ–ª—É 1 –Ω–µ–¥–µ–ª–∞',
    other: '–æ–∫–æ–ª—É {{count}} –º–µ—Å–µ—Ü–∏'
  },
  xWeeks: {
    one: '1 –Ω–µ–¥–µ–ª–∞',
    other: '{{count}} –Ω–µ–¥–µ–ª–∏'
  },
  aboutXMonths: {
    one: '–æ–∫–æ–ª—É 1 –º–µ—Å–µ—Ü',
    other: '–æ–∫–æ–ª—É {{count}} –Ω–µ–¥–µ–ª–∏'
  },
  xMonths: {
    one: '1 –º–µ—Å–µ—Ü',
    other: '{{count}} –º–µ—Å–µ—Ü–∏'
  },
  aboutXYears: {
    one: '–æ–∫–æ–ª—É 1 –≥–æ–¥–∏–Ω–∞',
    other: '–æ–∫–æ–ª—É {{count}} –≥–æ–¥–∏–Ω–∏'
  },
  xYears: {
    one: '1 –≥–æ–¥–∏–Ω–∞',
    other: '{{count}} –≥–æ–¥–∏–Ω–∏'
  },
  overXYears: {
    one: '–ø–æ–≤–µ—ú–µ –æ–¥ 1 –≥–æ–¥–∏–Ω–∞',
    other: '–ø–æ–≤–µ—ú–µ –æ–¥ {{count}} –≥–æ–¥–∏–Ω–∏'
  },
  almostXYears: {
    one: '–±–µ–∑–º–∞–ª–∫—É 1 –≥–æ–¥–∏–Ω–∞',
    other: '–±–µ–∑–º–∞–ª–∫—É {{count}} –≥–æ–¥–∏–Ω–∏'
  }
};
var mk_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = mk_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '–∑–∞ ' + result;
    } else {
      return '–ø—Ä–µ–¥ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const mk_lib_formatDistance = (mk_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/formatLong/index.js

var mk_lib_formatLong_dateFormats = {
  full: 'EEEE, dd MMMM yyyy',
  long: 'dd MMMM yyyy',
  medium: 'dd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var mk_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'H:mm'
};
var mk_lib_formatLong_dateTimeFormats = {
  any: '{{date}} {{time}}'
};
var mk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: mk_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: mk_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: mk_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const mk_lib_formatLong = (mk_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/formatRelative/index.js

var mk_lib_formatRelative_weekdays = ['–Ω–µ–¥–µ–ª–∞', '–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤—Ä—Ç–æ–∫', '–ø–µ—Ç–æ–∫', '—Å–∞–±–æ—Ç–∞'];
function mk_lib_formatRelative_lastWeek(day) {
  var weekday = mk_lib_formatRelative_weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'–º–∏–Ω–∞—Ç–∞—Ç–∞ " + weekday + " –≤–æ' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'–º–∏–Ω–∞—Ç–∏–æ—Ç " + weekday + " –≤–æ' p";
  }
}
function mk_lib_formatRelative_thisWeek(day) {
  var weekday = mk_lib_formatRelative_weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'–æ–≤–∞ " + weekday + " –≤o' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'–æ–≤–æ—ò " + weekday + " –≤o' p";
  }
}
function mk_lib_formatRelative_nextWeek(day) {
  var weekday = mk_lib_formatRelative_weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'—Å–ª–µ–¥–Ω–∞—Ç–∞ " + weekday + " –≤o' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'—Å–ª–µ–¥–Ω–∏–æ—Ç " + weekday + " –≤o' p";
  }
}
var mk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return mk_lib_formatRelative_thisWeek(day);
    } else {
      return mk_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'–≤—á–µ—Ä–∞ –≤–æ' p",
  today: "'–¥–µ–Ω–µ—Å –≤–æ' p",
  tomorrow: "'—É—Ç—Ä–µ –≤–æ' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return mk_lib_formatRelative_thisWeek(day);
    } else {
      return mk_lib_formatRelative_nextWeek(day);
    }
  },
  other: 'P'
};
var mk_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = mk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const mk_lib_formatRelative = (mk_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/localize/index.js

var mk_lib_localize_eraValues = {
  narrow: ['–ø—Ä.–Ω.–µ.', '–Ω.–µ.'],
  abbreviated: ['–ø—Ä–µ–¥ –Ω. –µ.', '–Ω. –µ.'],
  wide: ['–ø—Ä–µ–¥ –Ω–∞—à–∞—Ç–∞ –µ—Ä–∞', '–Ω–∞—à–∞—Ç–∞ –µ—Ä–∞']
};
var mk_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-–≤–∏ –∫–≤.', '2-—Ä–∏ –∫–≤.', '3-—Ç–∏ –∫–≤.', '4-—Ç–∏ –∫–≤.'],
  wide: ['1-–≤–∏ –∫–≤–∞—Ä—Ç–∞–ª', '2-—Ä–∏ –∫–≤–∞—Ä—Ç–∞–ª', '3-—Ç–∏ –∫–≤–∞—Ä—Ç–∞–ª', '4-—Ç–∏ –∫–≤–∞—Ä—Ç–∞–ª']
};
var mk_lib_localize_monthValues = {
  abbreviated: ['—ò–∞–Ω', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—ò', '—ò—É–Ω', '—ò—É–ª', '–∞–≤–≥', '—Å–µ–ø—Ç', '–æ–∫—Ç', '–Ω–æ–µ–º', '–¥–µ–∫'],
  wide: ['—ò–∞–Ω—É–∞—Ä–∏', '—Ñ–µ–≤—Ä—É–∞—Ä–∏', '–º–∞—Ä—Ç', '–∞–ø—Ä–∏–ª', '–º–∞—ò', '—ò—É–Ω–∏', '—ò—É–ª–∏', '–∞–≤–≥—É—Å—Ç', '—Å–µ–ø—Ç–µ–º–≤—Ä–∏', '–æ–∫—Ç–æ–º–≤—Ä–∏', '–Ω–æ–µ–º–≤—Ä–∏', '–¥–µ–∫–µ–º–≤—Ä–∏']
};
var mk_lib_localize_dayValues = {
  narrow: ['–ù', '–ü', '–í', '–°', '–ß', '–ü', '–°'],
  short: ['–Ω–µ', '–ø–æ', '–≤—Ç', '—Å—Ä', '—á–µ', '–ø–µ', '—Å–∞'],
  abbreviated: ['–Ω–µ–¥', '–ø–æ–Ω', '–≤—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø–µ—Ç', '—Å–∞–±'],
  wide: ['–Ω–µ–¥–µ–ª–∞', '–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤—Ä—Ç–æ–∫', '–ø–µ—Ç–æ–∫', '—Å–∞–±–æ—Ç–∞']
};
var mk_lib_localize_dayPeriodValues = {
  wide: {
    am: '–ø—Ä–µ—Ç–ø–ª–∞–¥–Ω–µ',
    pm: '–ø–æ–ø–ª–∞–¥–Ω–µ',
    midnight: '–ø–æ–ª–Ω–æ—ú',
    noon: '–Ω–∞–ø–ª–∞–¥–Ω–µ',
    morning: '–Ω–∞—É—Ç—Ä–æ',
    afternoon: '–ø–æ–ø–ª–∞–¥–Ω–µ',
    evening: '–Ω–∞–≤–µ—á–µ—Ä',
    night: '–Ω–æ—ú–µ'
  }
};
var mk_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + '-–≤–∏';
      case 2:
        return number + '-—Ä–∏';
      case 7:
      case 8:
        return number + '-–º–∏';
    }
  }
  return number + '-—Ç–∏';
};
var mk_lib_localize_localize = {
  ordinalNumber: mk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const mk_lib_localize = (mk_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/match/index.js


var mk_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?[–≤—Ä–º—Ç][–∏])?/i;
var mk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var mk_lib_match_matchEraPatterns = {
  narrow: /^((–ø—Ä)?–Ω\.?\s?–µ\.?)/i,
  abbreviated: /^((–ø—Ä)?–Ω\.?\s?–µ\.?)/i,
  wide: /^(–ø—Ä–µ–¥ –Ω–∞—à–∞—Ç–∞ –µ—Ä–∞|–Ω–∞—à–∞—Ç–∞ –µ—Ä–∞)/i
};
var mk_lib_match_parseEraPatterns = {
  any: [/^–ø/i, /^–Ω/i]
};
var mk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[–≤—Ä—Ç]?–∏?)? –∫–≤.?/i,
  wide: /^[1234](-?[–≤—Ä—Ç]?–∏?)? –∫–≤–∞—Ä—Ç–∞–ª/i
};
var mk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var mk_lib_match_matchDayPatterns = {
  narrow: /^[–Ω–ø–≤—Å—á]/i,
  short: /^(–Ω–µ|–ø–æ|–≤—Ç|—Å—Ä|—á–µ|–ø–µ|—Å–∞)/i,
  abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|–≤—Ç–æ|—Å—Ä–µ|—á–µ—Ç|–ø–µ—Ç|—Å–∞–±)/i,
  wide: /^(–Ω–µ–¥–µ–ª–∞|–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤—Ä—Ç–æ–∫|–ø–µ—Ç–æ–∫|—Å–∞–±–æ—Ç–∞)/i
};
var mk_lib_match_parseDayPatterns = {
  narrow: [/^–Ω/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
  any: [/^–Ω[–µ–¥]/i, /^–ø[–æ–Ω]/i, /^–≤—Ç/i, /^—Å—Ä/i, /^—á[–µ—Ç]/i, /^–ø[–µ—Ç]/i, /^—Å[–∞–±]/i]
};
var mk_lib_match_matchMonthPatterns = {
  abbreviated: /^(—ò–∞–Ω|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—ò|—ò—É–Ω|—ò—É–ª|–∞–≤–≥|—Å–µ–ø|–æ–∫—Ç|–Ω–æ–µ–º|–¥–µ–∫)/i,
  wide: /^(—ò–∞–Ω—É–∞—Ä–∏|—Ñ–µ–≤—Ä—É–∞—Ä–∏|–º–∞—Ä—Ç|–∞–ø—Ä–∏–ª|–º–∞—ò|—ò—É–Ω–∏|—ò—É–ª–∏|–∞–≤–≥—É—Å—Ç|—Å–µ–ø—Ç–µ–º–≤—Ä–∏|–æ–∫—Ç–æ–º–≤—Ä–∏|–Ω–æ–µ–º–≤—Ä–∏|–¥–µ–∫–µ–º–≤—Ä–∏)/i
};
var mk_lib_match_parseMonthPatterns = {
  any: [/^—ò–∞/i, /^–§/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞—ò/i, /^—ò—É–Ω/i, /^—ò—É–ª/i, /^–∞–≤/i, /^—Å–µ/i, /^–æ–∫—Ç/i, /^–Ω–æ/i, /^–¥–µ/i]
};
var mk_lib_match_matchDayPeriodPatterns = {
  any: /^(–ø—Ä–µ—Ç–ø|–ø–æ–ø–ª|–ø–æ–ª–Ω–æ—ú|—É—Ç—Ä–æ|–ø–ª–∞–¥–Ω–µ|–≤–µ—á–µ—Ä|–Ω–æ—ú)/i
};
var mk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /–ø—Ä–µ—Ç–ø–ª–∞–¥–Ω–µ/i,
    pm: /–ø–æ–ø–ª–∞–¥–Ω–µ/i,
    midnight: /–ø–æ–ª–Ω–æ—ú/i,
    noon: /–Ω–∞–ø–ª–∞–¥–Ω–µ/i,
    morning: /–Ω–∞—É—Ç—Ä–æ/i,
    afternoon: /–ø–æ–ø–ª–∞–¥–Ω–µ/i,
    evening: /–Ω–∞–≤–µ—á–µ—Ä/i,
    night: /–Ω–æ—ú–µ/i
  }
};
var mk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: mk_lib_match_matchOrdinalNumberPattern,
    parsePattern: mk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mk_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mk_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mk_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mk_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: mk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const mk_lib_match = (mk_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Macedonian locale.
 * @language Macedonian
 * @iso-639-2 mkd
 * @author Petar Vlahu [@vlahupetar]{@link https://github.com/vlahupetar}
 * @author Altrim Beqiri [@altrim]{@link https://github.com/altrim}
 */
var mk_locale = {
  code: 'mk',
  formatDistance: mk_lib_formatDistance,
  formatLong: mk_lib_formatLong,
  formatRelative: mk_lib_formatRelative,
  localize: mk_lib_localize,
  match: mk_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const mk = (mk_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/formatDistance/index.js
var mn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '—Å–µ–∫—É–Ω–¥ —Ö“Ø—Ä—ç—Ö–≥“Ø–π',
    other: '{{count}} —Å–µ–∫—É–Ω–¥ —Ö“Ø—Ä—ç—Ö–≥“Ø–π'
  },
  xSeconds: {
    one: '1 —Å–µ–∫—É–Ω–¥',
    other: '{{count}} —Å–µ–∫—É–Ω–¥'
  },
  halfAMinute: '—Ö–∞–≥–∞—Å –º–∏–Ω—É—Ç',
  lessThanXMinutes: {
    one: '–º–∏–Ω—É—Ç —Ö“Ø—Ä—ç—Ö–≥“Ø–π',
    other: '{{count}} –º–∏–Ω—É—Ç —Ö“Ø—Ä—ç—Ö–≥“Ø–π'
  },
  xMinutes: {
    one: '1 –º–∏–Ω—É—Ç',
    other: '{{count}} –º–∏–Ω—É—Ç'
  },
  aboutXHours: {
    one: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä 1 —Ü–∞–≥',
    other: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä {{count}} —Ü–∞–≥'
  },
  xHours: {
    one: '1 —Ü–∞–≥',
    other: '{{count}} —Ü–∞–≥'
  },
  xDays: {
    one: '1 ”©–¥”©—Ä',
    other: '{{count}} ”©–¥”©—Ä'
  },
  aboutXWeeks: {
    one: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä 1 –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥',
    other: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä {{count}} –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥'
  },
  xWeeks: {
    one: '1 –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥',
    other: '{{count}} –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥'
  },
  aboutXMonths: {
    one: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä 1 —Å–∞—Ä',
    other: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä {{count}} —Å–∞—Ä'
  },
  xMonths: {
    one: '1 —Å–∞—Ä',
    other: '{{count}} —Å–∞—Ä'
  },
  aboutXYears: {
    one: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä 1 –∂–∏–ª',
    other: '–æ–π—Ä–æ–ª—Ü–æ–æ–≥–æ–æ—Ä {{count}} –∂–∏–ª'
  },
  xYears: {
    one: '1 –∂–∏–ª',
    other: '{{count}} –∂–∏–ª'
  },
  overXYears: {
    one: '1 –∂–∏–ª –≥–∞—Ä–∞–Ω',
    other: '{{count}} –∂–∏–ª –≥–∞—Ä–∞–Ω'
  },
  almostXYears: {
    one: '–±–∞—Ä–∞–≥ 1 –∂–∏–ª',
    other: '–±–∞—Ä–∞–≥ {{count}} –∂–∏–ª'
  }
};
var mn_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = mn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    /**
     * Append genitive case
     */
    var words = result.split(' ');
    var lastword = words.pop();
    result = words.join(' ');
    switch (lastword) {
      case '—Å–µ–∫—É–Ω–¥':
        result += ' —Å–µ–∫—É–Ω–¥–∏–π–Ω';
        break;
      case '–º–∏–Ω—É—Ç':
        result += ' –º–∏–Ω—É—Ç—ã–Ω';
        break;
      case '—Ü–∞–≥':
        result += ' —Ü–∞–≥–∏–π–Ω';
        break;
      case '”©–¥”©—Ä':
        result += ' ”©–¥—Ä–∏–π–Ω';
        break;
      case '—Å–∞—Ä':
        result += ' —Å–∞—Ä—ã–Ω';
        break;
      case '–∂–∏–ª':
        result += ' –∂–∏–ª–∏–π–Ω';
        break;
      case '—Ö–æ–Ω–æ–≥':
        result += ' —Ö–æ–Ω–æ–≥–∏–π–Ω';
        break;
      case '–≥–∞—Ä–∞–Ω':
        result += ' –≥–∞—Ä–∞–Ω—ã';
        break;
      case '—Ö“Ø—Ä—ç—Ö–≥“Ø–π':
        result += ' —Ö“Ø—Ä—ç—Ö–≥“Ø–π —Ö—É–≥–∞—Ü–∞–∞–Ω—ã';
        break;
      default:
        result += lastword + '-–Ω';
    }
    if (options.comparison && options.comparison > 0) {
      return result + ' –¥–∞—Ä–∞–∞';
    } else {
      return result + ' ”©–º–Ω”©';
    }
  }
  return result;
};
/* harmony default export */ const mn_lib_formatDistance = (mn_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/formatLong/index.js

var mn_lib_formatLong_dateFormats = {
  full: "y '–æ–Ω—ã' MMMM'—ã–Ω' d, EEEE '–≥–∞—Ä–∞–≥'",
  long: "y '–æ–Ω—ã' MMMM'—ã–Ω' d",
  medium: "y '–æ–Ω—ã' MMM'—ã–Ω' d",
  short: 'y.MM.dd'
};
var mn_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var mn_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var mn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: mn_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: mn_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: mn_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const mn_lib_formatLong = (mn_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/formatRelative/index.js
var mn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'”©–Ω–≥”©—Ä—Å”©–Ω' eeee '–≥–∞—Ä–∞–≥–∏–π–Ω' p '—Ü–∞–≥—Ç'",
  yesterday: "'”©—á–∏–≥–¥”©—Ä' p '—Ü–∞–≥—Ç'",
  today: "'”©–Ω”©”©–¥”©—Ä' p '—Ü–∞–≥—Ç'",
  tomorrow: "'–º–∞—Ä–≥–∞–∞—à' p '—Ü–∞–≥—Ç'",
  nextWeek: "'–∏—Ä—ç—Ö' eeee '–≥–∞—Ä–∞–≥–∏–π–Ω' p '—Ü–∞–≥—Ç'",
  other: 'P'
};
var mn_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return mn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const mn_lib_formatRelative = (mn_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/localize/index.js

var mn_lib_localize_eraValues = {
  narrow: ['–ù–¢”®', '–ù–¢'],
  abbreviated: ['–ù–¢”®', '–ù–¢'],
  wide: ['–Ω–∏–π—Ç–∏–π–Ω —Ç–æ–æ–ª–ª—ã–Ω ”©–º–Ω”©—Ö', '–Ω–∏–π—Ç–∏–π–Ω —Ç–æ–æ–ª–ª—ã–Ω']
};
var mn_lib_localize_quarterValues = {
  narrow: ['I', 'II', 'III', 'IV'],
  abbreviated: ['I —É–ª–∏—Ä–∞–ª', 'II —É–ª–∏—Ä–∞–ª', 'III —É–ª–∏—Ä–∞–ª', 'IV —É–ª–∏—Ä–∞–ª'],
  wide: ['1-—Ä —É–ª–∏—Ä–∞–ª', '2-—Ä —É–ª–∏—Ä–∞–ª', '3-—Ä —É–ª–∏—Ä–∞–ª', '4-—Ä —É–ª–∏—Ä–∞–ª']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var mn_lib_localize_monthValues = {
  narrow: ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'],
  abbreviated: ['1-—Ä —Å–∞—Ä', '2-—Ä —Å–∞—Ä', '3-—Ä —Å–∞—Ä', '4-—Ä —Å–∞—Ä', '5-—Ä —Å–∞—Ä', '6-—Ä —Å–∞—Ä', '7-—Ä —Å–∞—Ä', '8-—Ä —Å–∞—Ä', '9-—Ä —Å–∞—Ä', '10-—Ä —Å–∞—Ä', '11-—Ä —Å–∞—Ä', '12-—Ä —Å–∞—Ä'],
  wide: ['–ù—ç–≥–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '–•–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–ì—É—Ä–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–î”©—Ä”©–≤–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '–¢–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–ó—É—Ä–≥–∞–∞–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–î–æ–ª–æ–æ–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–ù–∞–π–º–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–ï—Å–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '–ê—Ä–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–ê—Ä–≤–∞–Ω–Ω—ç–≥–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '–ê—Ä–≤–∞–Ω —Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Å–∞—Ä']
};
var mn_lib_localize_formattingMonthValues = {
  narrow: ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'],
  abbreviated: ['1-—Ä —Å–∞—Ä', '2-—Ä —Å–∞—Ä', '3-—Ä —Å–∞—Ä', '4-—Ä —Å–∞—Ä', '5-—Ä —Å–∞—Ä', '6-—Ä —Å–∞—Ä', '7-—Ä —Å–∞—Ä', '8-—Ä —Å–∞—Ä', '9-—Ä —Å–∞—Ä', '10-—Ä —Å–∞—Ä', '11-—Ä —Å–∞—Ä', '12-—Ä —Å–∞—Ä'],
  wide: ['–Ω—ç–≥–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '—Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–≥—É—Ä–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–¥”©—Ä”©–≤–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '—Ç–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–∑—É—Ä–≥–∞–∞–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–¥–æ–ª–æ–æ–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–Ω–∞–π–º–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–µ—Å–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '–∞—Ä–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä', '–∞—Ä–≤–∞–Ω–Ω—ç–≥–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä', '–∞—Ä–≤–∞–Ω —Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Å–∞—Ä']
};
var mn_lib_localize_dayValues = {
  narrow: ['–ù', '–î', '–ú', '–õ', '–ü', '–ë', '–ë'],
  short: ['–ù—è', '–î–∞', '–ú—è', '–õ—Ö', '–ü“Ø', '–ë–∞', '–ë—è'],
  abbreviated: ['–ù—è–º', '–î–∞–≤', '–ú—è–≥', '–õ—Ö–∞', '–ü“Ø—Ä', '–ë–∞–∞', '–ë—è–º'],
  wide: ['–ù—è–º', '–î–∞–≤–∞–∞', '–ú—è–≥–º–∞—Ä', '–õ—Ö–∞–≥–≤–∞', '–ü“Ø—Ä—ç–≤', '–ë–∞–∞—Å–∞–Ω', '–ë—è–º–±–∞']
};
var mn_lib_localize_formattingDayValues = {
  narrow: ['–ù', '–î', '–ú', '–õ', '–ü', '–ë', '–ë'],
  short: ['–ù—è', '–î–∞', '–ú—è', '–õ—Ö', '–ü“Ø', '–ë–∞', '–ë—è'],
  abbreviated: ['–ù—è–º', '–î–∞–≤', '–ú—è–≥', '–õ—Ö–∞', '–ü“Ø—Ä', '–ë–∞–∞', '–ë—è–º'],
  wide: ['–Ω—è–º', '–¥–∞–≤–∞–∞', '–º—è–≥–º–∞—Ä', '–ª—Ö–∞–≥–≤–∞', '–ø“Ø—Ä—ç–≤', '–±–∞–∞—Å–∞–Ω', '–±—è–º–±–∞']
};
var mn_lib_localize_dayPeriodValues = {
  narrow: {
    am: '“Ø.”©.',
    pm: '“Ø.—Ö.',
    midnight: '—à”©–Ω”© –¥—É–Ω–¥',
    noon: '“Ø–¥ –¥—É–Ω–¥',
    morning: '”©–≥–ª”©”©',
    afternoon: '”©–¥”©—Ä',
    evening: '–æ—Ä–æ–π',
    night: '—à”©–Ω”©'
  },
  abbreviated: {
    am: '“Ø.”©.',
    pm: '“Ø.—Ö.',
    midnight: '—à”©–Ω”© –¥—É–Ω–¥',
    noon: '“Ø–¥ –¥—É–Ω–¥',
    morning: '”©–≥–ª”©”©',
    afternoon: '”©–¥”©—Ä',
    evening: '–æ—Ä–æ–π',
    night: '—à”©–Ω”©'
  },
  wide: {
    am: '“Ø.”©.',
    pm: '“Ø.—Ö.',
    midnight: '—à”©–Ω”© –¥—É–Ω–¥',
    noon: '“Ø–¥ –¥—É–Ω–¥',
    morning: '”©–≥–ª”©”©',
    afternoon: '”©–¥”©—Ä',
    evening: '–æ—Ä–æ–π',
    night: '—à”©–Ω”©'
  }
};
var mn_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var mn_lib_localize_localize = {
  ordinalNumber: mn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: mn_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_dayValues,
    defaultWidth: 'wide',
    formattingValues: mn_lib_localize_formattingDayValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const mn_lib_localize = (mn_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/match/index.js


var mn_lib_match_matchOrdinalNumberPattern = /\d+/i;
var mn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var mn_lib_match_matchEraPatterns = {
  narrow: /^(–Ω—Ç”©|–Ω—Ç)/i,
  abbreviated: /^(–Ω—Ç”©|–Ω—Ç)/i,
  wide: /^(–Ω–∏–π—Ç–∏–π–Ω —Ç–æ–æ–ª–ª—ã–Ω ”©–º–Ω”©|–Ω–∏–π—Ç–∏–π–Ω —Ç–æ–æ–ª–ª—ã–Ω)/i
};
var mn_lib_match_parseEraPatterns = {
  any: [/^(–Ω—Ç”©|–Ω–∏–π—Ç–∏–π–Ω —Ç–æ–æ–ª–ª—ã–Ω ”©–º–Ω”©)/i, /^(–Ω—Ç|–Ω–∏–π—Ç–∏–π–Ω —Ç–æ–æ–ª–ª—ã–Ω)/i]
};
var mn_lib_match_matchQuarterPatterns = {
  narrow: /^(iv|iii|ii|i)/i,
  abbreviated: /^(iv|iii|ii|i) —É–ª–∏—Ä–∞–ª/i,
  wide: /^[1-4]-—Ä —É–ª–∏—Ä–∞–ª/i
};
var mn_lib_match_parseQuarterPatterns = {
  any: [/^(i(\s|$)|1)/i, /^(ii(\s|$)|2)/i, /^(iii(\s|$)|3)/i, /^(iv(\s|$)|4)/i]
};
var mn_lib_match_matchMonthPatterns = {
  narrow: /^(xii|xi|x|ix|viii|vii|vi|v|iv|iii|ii|i)/i,
  abbreviated: /^(1-—Ä —Å–∞—Ä|2-—Ä —Å–∞—Ä|3-—Ä —Å–∞—Ä|4-—Ä —Å–∞—Ä|5-—Ä —Å–∞—Ä|6-—Ä —Å–∞—Ä|7-—Ä —Å–∞—Ä|8-—Ä —Å–∞—Ä|9-—Ä —Å–∞—Ä|10-—Ä —Å–∞—Ä|11-—Ä —Å–∞—Ä|12-—Ä —Å–∞—Ä)/i,
  wide: /^(–Ω—ç–≥–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä|—Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–≥—É—Ä–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–¥”©—Ä”©–≤–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä|—Ç–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–∑—É—Ä–≥–∞–∞–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–¥–æ–ª–æ–æ–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–Ω–∞–π–º–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–µ—Å–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä|–∞—Ä–∞–≤–¥—É–≥–∞–∞—Ä —Å–∞—Ä|–∞—Ä–≤–∞–Ω –Ω—ç–≥–¥“Ø–≥—ç—ç—Ä —Å–∞—Ä|–∞—Ä–≤–∞–Ω —Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä —Å–∞—Ä)/i
};
var mn_lib_match_parseMonthPatterns = {
  narrow: [/^i$/i, /^ii$/i, /^iii$/i, /^iv$/i, /^v$/i, /^vi$/i, /^vii$/i, /^viii$/i, /^ix$/i, /^x$/i, /^xi$/i, /^xii$/i],
  any: [/^(1|–Ω—ç–≥–¥“Ø–≥—ç—ç—Ä)/i, /^(2|—Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä)/i, /^(3|–≥—É—Ä–∞–≤–¥—É–≥–∞–∞—Ä)/i, /^(4|–¥”©—Ä”©–≤–¥“Ø–≥—ç—ç—Ä)/i, /^(5|—Ç–∞–≤–¥—É–≥–∞–∞—Ä)/i, /^(6|–∑—É—Ä–≥–∞–∞–¥—É–≥–∞–∞—Ä)/i, /^(7|–¥–æ–ª–æ–æ–¥—É–≥–∞–∞—Ä)/i, /^(8|–Ω–∞–π–º–¥—É–≥–∞–∞—Ä)/i, /^(9|–µ—Å–¥“Ø–≥—ç—ç—Ä)/i, /^(10|–∞—Ä–∞–≤–¥—É–≥–∞–∞—Ä)/i, /^(11|–∞—Ä–≤–∞–Ω –Ω—ç–≥–¥“Ø–≥—ç—ç—Ä)/i, /^(12|–∞—Ä–≤–∞–Ω —Ö–æ—ë—Ä–¥—É–≥–∞–∞—Ä)/i]
};
var mn_lib_match_matchDayPatterns = {
  narrow: /^[–Ω–¥–º–ª–ø–±–±]/i,
  short: /^(–Ω—è|–¥–∞|–º—è|–ª—Ö|–ø“Ø|–±–∞|–±—è)/i,
  abbreviated: /^(–Ω—è–º|–¥–∞–≤|–º—è–≥|–ª—Ö–∞|–ø“Ø—Ä|–±–∞–∞|–±—è–º)/i,
  wide: /^(–Ω—è–º|–¥–∞–≤–∞–∞|–º—è–≥–º–∞—Ä|–ª—Ö–∞–≥–≤–∞|–ø“Ø—Ä—ç–≤|–±–∞–∞—Å–∞–Ω|–±—è–º–±–∞)/i
};
var mn_lib_match_parseDayPatterns = {
  narrow: [/^–Ω/i, /^–¥/i, /^–º/i, /^–ª/i, /^–ø/i, /^–±/i, /^–±/i],
  any: [/^–Ω—è/i, /^–¥–∞/i, /^–º—è/i, /^–ª—Ö/i, /^–ø“Ø/i, /^–±–∞/i, /^–±—è/i]
};
var mn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(“Ø\.”©\.|“Ø\.—Ö\.|—à”©–Ω”© –¥—É–Ω–¥|“Ø–¥ –¥—É–Ω–¥|”©–≥–ª”©”©|”©–¥”©—Ä|–æ—Ä–æ–π|—à”©–Ω”©)/i,
  any: /^(“Ø\.”©\.|“Ø\.—Ö\.|—à”©–Ω”© –¥—É–Ω–¥|“Ø–¥ –¥—É–Ω–¥|”©–≥–ª”©”©|”©–¥”©—Ä|–æ—Ä–æ–π|—à”©–Ω”©)/i
};
var mn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^“Ø\.”©\./i,
    pm: /^“Ø\.—Ö\./i,
    midnight: /^—à”©–Ω”© –¥—É–Ω–¥/i,
    noon: /^“Ø–¥ –¥—É–Ω–¥/i,
    morning: /”©–≥–ª”©”©/i,
    afternoon: /”©–¥”©—Ä/i,
    evening: /–æ—Ä–æ–π/i,
    night: /—à”©–Ω”©/i
  }
};
var mn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: mn_lib_match_matchOrdinalNumberPattern,
    parsePattern: mn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mn_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mn_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mn_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mn_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: mn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const mn_lib_match = (mn_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Mongolian locale.
 * @language Mongolian
 * @iso-639-2 mon
 * @author Bilguun Ochirbat [@bilguun0203]{@link https://github.com/bilguun0203}
 */
var mn_locale = {
  code: 'mn',
  formatDistance: mn_lib_formatDistance,
  formatLong: mn_lib_formatLong,
  formatRelative: mn_lib_formatRelative,
  localize: mn_lib_localize,
  match: mn_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const mn = (mn_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/formatDistance/index.js
var ms_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'kurang dari 1 saat',
    other: 'kurang dari {{count}} saat'
  },
  xSeconds: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  halfAMinute: 'setengah minit',
  lessThanXMinutes: {
    one: 'kurang dari 1 minit',
    other: 'kurang dari {{count}} minit'
  },
  xMinutes: {
    one: '1 minit',
    other: '{{count}} minit'
  },
  aboutXHours: {
    one: 'sekitar 1 jam',
    other: 'sekitar {{count}} jam'
  },
  xHours: {
    one: '1 jam',
    other: '{{count}} jam'
  },
  xDays: {
    one: '1 hari',
    other: '{{count}} hari'
  },
  aboutXWeeks: {
    one: 'sekitar 1 minggu',
    other: 'sekitar {{count}} minggu'
  },
  xWeeks: {
    one: '1 minggu',
    other: '{{count}} minggu'
  },
  aboutXMonths: {
    one: 'sekitar 1 bulan',
    other: 'sekitar {{count}} bulan'
  },
  xMonths: {
    one: '1 bulan',
    other: '{{count}} bulan'
  },
  aboutXYears: {
    one: 'sekitar 1 tahun',
    other: 'sekitar {{count}} tahun'
  },
  xYears: {
    one: '1 tahun',
    other: '{{count}} tahun'
  },
  overXYears: {
    one: 'lebih dari 1 tahun',
    other: 'lebih dari {{count}} tahun'
  },
  almostXYears: {
    one: 'hampir 1 tahun',
    other: 'hampir {{count}} tahun'
  }
};
var ms_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ms_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'dalam masa ' + result;
    } else {
      return result + ' yang lalu';
    }
  }
  return result;
};
/* harmony default export */ const ms_lib_formatDistance = (ms_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/formatLong/index.js

var ms_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'd/M/yyyy'
};
var ms_lib_formatLong_timeFormats = {
  full: 'HH.mm.ss',
  long: 'HH.mm.ss',
  medium: 'HH.mm',
  short: 'HH.mm'
};
var ms_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ms_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ms_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ms_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ms_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ms_lib_formatLong = (ms_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/formatRelative/index.js
var ms_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'lepas pada jam' p",
  yesterday: "'Semalam pada jam' p",
  today: "'Hari ini pada jam' p",
  tomorrow: "'Esok pada jam' p",
  nextWeek: "eeee 'pada jam' p",
  other: 'P'
};
var ms_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ms_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ms_lib_formatRelative = (ms_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/localize/index.js
 // Most data for localization are taken from this page
// https://www.unicode.org/cldr/charts/32/summary/ms.html
var ms_lib_localize_eraValues = {
  narrow: ['SM', 'M'],
  abbreviated: ['SM', 'M'],
  wide: ['Sebelum Masihi', 'Masihi']
};
var ms_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['S1', 'S2', 'S3', 'S4'],
  wide: ['Suku pertama', 'Suku kedua', 'Suku ketiga', 'Suku keempat']
};

// Note: in Malay, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var ms_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'O', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ogo', 'Sep', 'Okt', 'Nov', 'Dis'],
  wide: ['Januari', 'Februari', 'Mac', 'April', 'Mei', 'Jun', 'Julai', 'Ogos', 'September', 'Oktober', 'November', 'Disember']
};
var ms_lib_localize_dayValues = {
  narrow: ['A', 'I', 'S', 'R', 'K', 'J', 'S'],
  short: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
  abbreviated: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
  wide: ['Ahad', 'Isnin', 'Selasa', 'Rabu', 'Khamis', 'Jumaat', 'Sabtu']
};
var ms_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'tgh malam',
    noon: 'tgh hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  }
};
var ms_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  }
};
var ms_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  // Can't use "pertama", "kedua" because can't be parsed
  return 'ke-' + Number(dirtyNumber);
};
var ms_lib_localize_localize = {
  ordinalNumber: ms_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ms_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ms_lib_localize = (ms_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/match/index.js


var ms_lib_match_matchOrdinalNumberPattern = /^ke-(\d+)?/i;
var ms_lib_match_parseOrdinalNumberPattern = /petama|\d+/i;
var ms_lib_match_matchEraPatterns = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
  wide: /^(sebelum masihi|masihi)/i
};
var ms_lib_match_parseEraPatterns = {
  any: [/^s/i, /^(m)/i]
};
var ms_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^S[1234]/i,
  wide: /Suku (pertama|kedua|ketiga|keempat)/i
};
var ms_lib_match_parseQuarterPatterns = {
  any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
};
var ms_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
  wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
};
var ms_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^og/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var ms_lib_match_matchDayPatterns = {
  narrow: /^[aisrkj]/i,
  short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
};
var ms_lib_match_parseDayPatterns = {
  narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var ms_lib_match_matchDayPeriodPatterns = {
  narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
};
var ms_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pa/i,
    afternoon: /tengah h/i,
    evening: /pe/i,
    night: /m/i
  }
};
var ms_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ms_lib_match_matchOrdinalNumberPattern,
    parsePattern: ms_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ms_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ms_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ms_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ms_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ms_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ms_lib_match = (ms_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Malay locale.
 * @language Malay
 * @iso-639-2 msa
 * @author Ruban Selvarajah [@Zyten]{@link https://github.com/Zyten}
 */
var ms_locale = {
  code: 'ms',
  formatDistance: ms_lib_formatDistance,
  formatLong: ms_lib_formatLong,
  formatRelative: ms_lib_formatRelative,
  localize: ms_lib_localize,
  match: ms_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ms = (ms_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/formatDistance/index.js
var mt_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'inqas minn sekonda',
    other: 'inqas minn {{count}} sekondi'
  },
  xSeconds: {
    one: 'sekonda',
    other: '{{count}} sekondi'
  },
  halfAMinute: 'nofs minuta',
  lessThanXMinutes: {
    one: 'inqas minn minuta',
    other: 'inqas minn {{count}} minuti'
  },
  xMinutes: {
    one: 'minuta',
    other: '{{count}} minuti'
  },
  aboutXHours: {
    one: 'madwar siegƒßa',
    other: 'madwar {{count}} siegƒßat'
  },
  xHours: {
    one: 'siegƒßa',
    other: '{{count}} siegƒßat'
  },
  xDays: {
    one: 'ƒ°urnata',
    other: '{{count}} ƒ°ranet'
  },
  aboutXWeeks: {
    one: 'madwar ƒ°imgƒßa',
    other: 'madwar {{count}} ƒ°imgƒßat'
  },
  xWeeks: {
    one: 'ƒ°imgƒßa',
    other: '{{count}} ƒ°imgƒßat'
  },
  aboutXMonths: {
    one: 'madwar xahar',
    other: 'madwar {{count}} xhur'
  },
  xMonths: {
    one: 'xahar',
    other: '{{count}} xhur'
  },
  aboutXYears: {
    one: 'madwar sena',
    two: 'madwar sentejn',
    other: 'madwar {{count}} snin'
  },
  xYears: {
    one: 'sena',
    two: 'sentejn',
    other: '{{count}} snin'
  },
  overXYears: {
    one: 'aktar minn sena',
    two: 'aktar minn sentejn',
    other: 'aktar minn {{count}} snin'
  },
  almostXYears: {
    one: 'kwa≈ºi sena',
    two: 'kwa≈ºi sentejn',
    other: 'kwa≈ºi {{count}} snin'
  }
};
var mt_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = mt_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "f'" + result;
    } else {
      return result + ' ilu';
    }
  }
  return result;
};
/* harmony default export */ const mt_lib_formatDistance = (mt_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/formatLong/index.js

var mt_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var mt_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var mt_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var mt_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: mt_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: mt_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: mt_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const mt_lib_formatLong = (mt_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/formatRelative/index.js
var mt_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'li gƒßadda' 'fil-'p",
  yesterday: "'Il-bieraƒß fil-'p",
  today: "'Illum fil-'p",
  tomorrow: "'Gƒßada fil-'p",
  nextWeek: "eeee 'fil-'p",
  other: 'P'
};
var mt_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return mt_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const mt_lib_formatRelative = (mt_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/localize/index.js

var mt_lib_localize_eraValues = {
  narrow: ['Q', 'W'],
  abbreviated: ['QK', 'WK'],
  wide: ['qabel Kristu', 'wara Kristu']
};
var mt_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1. kwart', '2. kwart', '3. kwart', '4. kwart']
};
var mt_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'ƒ†', 'L', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Fra', 'Mar', 'Apr', 'Mej', 'ƒ†un', 'Lul', 'Aww', 'Set', 'Ott', 'Nov', 'Diƒã'],
  wide: ['Jannar', 'Frar', 'Marzu', 'April', 'Mejju', 'ƒ†unju', 'Lulju', 'Awwissu', 'Settembru', 'Ottubru', 'Novembru', 'Diƒãembru']
};
var mt_lib_localize_dayValues = {
  narrow: ['ƒ¶', 'T', 'T', 'E', 'ƒ¶', 'ƒ†', 'S'],
  short: ['ƒ¶a', 'Tn', 'Tl', 'Er', 'ƒ¶a', 'ƒ†i', 'Si'],
  abbreviated: ['ƒ¶ad', 'Tne', 'Tli', 'Erb', 'ƒ¶am', 'ƒ†im', 'Sib'],
  wide: ['Il-ƒ¶add', 'It-Tnejn', 'It-Tlieta', 'L-Erbgƒßa', 'Il-ƒ¶amis', 'Il-ƒ†imgƒßa', 'Is-Sibt']
};
var mt_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'nofsillejl',
    noon: 'nofsinhar',
    morning: 'gƒßodwa',
    afternoon: 'wara nofsinhar',
    evening: 'filgƒßaxija',
    night: 'lejl'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'nofsillejl',
    noon: 'nofsinhar',
    morning: 'gƒßodwa',
    afternoon: 'wara nofsinhar',
    evening: 'filgƒßaxija',
    night: 'lejl'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'nofsillejl',
    noon: 'nofsinhar',
    morning: 'gƒßodwa',
    afternoon: 'wara nofsinhar',
    evening: 'filgƒßaxija',
    night: 'lejl'
  }
};
var mt_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: 'filgƒßodu',
    afternoon: 'wara nofsinhar',
    evening: 'filgƒßaxija',
    night: 'billejl'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: 'filgƒßodu',
    afternoon: 'wara nofsinhar',
    evening: 'filgƒßaxija',
    night: 'billejl'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: 'filgƒßodu',
    afternoon: 'wara nofsinhar',
    evening: 'filgƒßaxija',
    night: 'billejl'
  }
};
var mt_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '¬∫';
};
var mt_lib_localize_localize = {
  ordinalNumber: mt_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: mt_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const mt_lib_localize = (mt_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/match/index.js


var mt_lib_match_matchOrdinalNumberPattern = /^(\d+)(¬∫)?/i;
var mt_lib_match_parseOrdinalNumberPattern = /\d+/i;
var mt_lib_match_matchEraPatterns = {
  narrow: /^(q|w)/i,
  abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
  wide: /^(qabel kristu|before common era|wara kristu|common era)/i
};
var mt_lib_match_parseEraPatterns = {
  any: [/^(q|b)/i, /^(w|c)/i]
};
var mt_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](\.)? kwart/i
};
var mt_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var mt_lib_match_matchMonthPatterns = {
  narrow: /^[jfmaglsond]/i,
  abbreviated: /^(jan|fra|mar|apr|mej|ƒ°un|lul|aww|set|ott|nov|diƒã)/i,
  wide: /^(jannar|frar|marzu|april|mejju|ƒ°unju|lulju|awwissu|settembru|ottubru|novembru|diƒãembru)/i
};
var mt_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^ƒ°/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mej/i, /^ƒ°/i, /^l/i, /^aw/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var mt_lib_match_matchDayPatterns = {
  narrow: /^[ƒßteƒ°s]/i,
  short: /^(ƒßa|tn|tl|er|ƒßa|ƒ°i|si)/i,
  abbreviated: /^(ƒßad|tne|tli|erb|ƒßam|ƒ°im|sib)/i,
  wide: /^(il-ƒßadd|it-tnejn|it-tlieta|l-erbgƒßa|il-ƒßamis|il-ƒ°imgƒßa|is-sibt)/i
};
var mt_lib_match_parseDayPatterns = {
  narrow: [/^ƒß/i, /^t/i, /^t/i, /^e/i, /^ƒß/i, /^ƒ°/i, /^s/i],
  any: [/^(il-)?ƒßad/i, /^(it-)?tn/i, /^(it-)?tl/i, /^(l-)?er/i, /^(il-)?ham/i, /^(il-)?ƒ°i/i, /^(is-)?si/i]
};
var mt_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (gƒßodwa|wara nofsinhar|filgƒßaxija|lejl))/i,
  any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (gƒßodwa|wara nofsinhar|filgƒßaxija|lejl))/i
};
var mt_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^f'nofsillejl/i,
    noon: /^f'nofsinhar/i,
    morning: /gƒßodwa/i,
    afternoon: /wara(\s.*)nofsinhar/i,
    evening: /filgƒßaxija/i,
    night: /lejl/i
  }
};
var mt_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: mt_lib_match_matchOrdinalNumberPattern,
    parsePattern: mt_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mt_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mt_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mt_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: mt_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: mt_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const mt_lib_match = (mt_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Maltese locale.
 * @language Maltese
 * @iso-639-2 mlt
 * @author Andras Matzon [@amatzon](@link https://github.com/amatzon)
 * @author Bryan Borg [@bryanMt](@link https://github.com/bryanMt)
 */
var mt_locale = {
  code: 'mt',
  formatDistance: mt_lib_formatDistance,
  formatLong: mt_lib_formatLong,
  formatRelative: mt_lib_formatRelative,
  localize: mt_lib_localize,
  match: mt_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const mt = (mt_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/formatDistance/index.js
var nb_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mindre enn ett sekund',
    other: 'mindre enn {{count}} sekunder'
  },
  xSeconds: {
    one: 'ett sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: 'et halvt minutt',
  lessThanXMinutes: {
    one: 'mindre enn ett minutt',
    other: 'mindre enn {{count}} minutter'
  },
  xMinutes: {
    one: 'ett minutt',
    other: '{{count}} minutter'
  },
  aboutXHours: {
    one: 'omtrent en time',
    other: 'omtrent {{count}} timer'
  },
  xHours: {
    one: 'en time',
    other: '{{count}} timer'
  },
  xDays: {
    one: 'en dag',
    other: '{{count}} dager'
  },
  aboutXWeeks: {
    one: 'omtrent en uke',
    other: 'omtrent {{count}} uker'
  },
  xWeeks: {
    one: 'en uke',
    other: '{{count}} uker'
  },
  aboutXMonths: {
    one: 'omtrent en m√•ned',
    other: 'omtrent {{count}} m√•neder'
  },
  xMonths: {
    one: 'en m√•ned',
    other: '{{count}} m√•neder'
  },
  aboutXYears: {
    one: 'omtrent ett √•r',
    other: 'omtrent {{count}} √•r'
  },
  xYears: {
    one: 'ett √•r',
    other: '{{count}} √•r'
  },
  overXYears: {
    one: 'over ett √•r',
    other: 'over {{count}} √•r'
  },
  almostXYears: {
    one: 'nesten ett √•r',
    other: 'nesten {{count}} √•r'
  }
};
var nb_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = nb_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }
  return result;
};
/* harmony default export */ const nb_lib_formatDistance = (nb_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/formatLong/index.js

var nb_lib_formatLong_dateFormats = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var nb_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var nb_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var nb_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nb_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nb_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nb_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const nb_lib_formatLong = (nb_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/formatRelative/index.js
var nb_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i g√•r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
var nb_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return nb_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nb_lib_formatRelative = (nb_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/localize/index.js

var nb_lib_localize_eraValues = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['f√∏r Kristus', 'etter Kristus']
};
var nb_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var nb_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
};
var nb_lib_localize_dayValues = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['s√∏', 'ma', 'ti', 'on', 'to', 'fr', 'l√∏'],
  abbreviated: ['s√∏n', 'man', 'tir', 'ons', 'tor', 'fre', 'l√∏r'],
  wide: ['s√∏ndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'l√∏rdag']
};
var nb_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morg.',
    afternoon: 'p√• etterm.',
    evening: 'p√• kvelden',
    night: 'p√• natten'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morg.',
    afternoon: 'p√• etterm.',
    evening: 'p√• kvelden',
    night: 'p√• natten'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morgenen',
    afternoon: 'p√• ettermiddagen',
    evening: 'p√• kvelden',
    night: 'p√• natten'
  }
};
var nb_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var nb_lib_localize_localize = {
  ordinalNumber: nb_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const nb_lib_localize = (nb_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/match/index.js


var nb_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var nb_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nb_lib_match_matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(f√∏r Kristus|f√∏r v√•r tid|etter Kristus|v√•r tid)/i
};
var nb_lib_match_parseEraPatterns = {
  any: [/^f/i, /^e/i]
};
var nb_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var nb_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nb_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var nb_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var nb_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(s√∏|ma|ti|on|to|fr|l√∏)/i,
  abbreviated: /^(s√∏n|man|tir|ons|tor|fre|l√∏r)/i,
  wide: /^(s√∏ndag|mandag|tirsdag|onsdag|torsdag|fredag|l√∏rdag)/i
};
var nb_lib_match_parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var nb_lib_match_matchDayPeriodPatterns = {
  narrow: /^(midnatt|middag|(p√•) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(p√•) (morgenen|ettermiddagen|kvelden|natten))/i
};
var nb_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var nb_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nb_lib_match_matchOrdinalNumberPattern,
    parsePattern: nb_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nb_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nb_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nb_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nb_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: nb_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const nb_lib_match = (nb_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Norwegian Bokm√•l locale.
 * @language Norwegian Bokm√•l
 * @iso-639-2 nob
 * @author Hans-Kristian Koren [@Hanse]{@link https://github.com/Hanse}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Dag Stuan [@dagstuan]{@link https://github.com/dagstuan}
 */
var nb_locale = {
  code: 'nb',
  formatDistance: nb_lib_formatDistance,
  formatLong: nb_lib_formatLong,
  formatRelative: nb_lib_formatRelative,
  localize: nb_lib_localize,
  match: nb_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nb = (nb_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/formatDistance/index.js
var nl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'minder dan een seconde',
    other: 'minder dan {{count}} seconden'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} seconden'
  },
  halfAMinute: 'een halve minuut',
  lessThanXMinutes: {
    one: 'minder dan een minuut',
    other: 'minder dan {{count}} minuten'
  },
  xMinutes: {
    one: 'een minuut',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} uur'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} uur'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weken'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weken'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maanden'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maanden'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer dan 1 jaar',
    other: 'meer dan {{count}} jaar'
  },
  almostXYears: {
    one: 'bijna 1 jaar',
    other: 'bijna {{count}} jaar'
  }
};
var nl_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = nl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'over ' + result;
    } else {
      return result + ' geleden';
    }
  }
  return result;
};
/* harmony default export */ const nl_lib_formatDistance = (nl_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/formatLong/index.js

var nl_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd-MM-y'
};
var nl_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var nl_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var nl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const nl_lib_formatLong = (nl_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/formatRelative/index.js
var nl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'afgelopen' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var nl_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return nl_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nl_lib_formatRelative = (nl_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/localize/index.js

var nl_lib_localize_eraValues = {
  narrow: ['v.C.', 'n.C.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['voor Christus', 'na Christus']
};
var nl_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
};
var nl_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
};
var nl_lib_localize_dayValues = {
  narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
  short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
  abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
  wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
};
var nl_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};
var nl_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'e';
};
var nl_lib_localize_localize = {
  ordinalNumber: nl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const nl_lib_localize = (nl_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/match/index.js


var nl_lib_match_matchOrdinalNumberPattern = /^(\d+)e?/i;
var nl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nl_lib_match_matchEraPatterns = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var nl_lib_match_parseEraPatterns = {
  any: [/^v/, /^n/]
};
var nl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var nl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nl_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var nl_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var nl_lib_match_matchDayPatterns = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var nl_lib_match_parseDayPatterns = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var nl_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var nl_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var nl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nl_lib_match_matchOrdinalNumberPattern,
    parsePattern: nl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: nl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const nl_lib_match = (nl_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
 * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
 * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
 * @author Edo Rivai [@edorivai]{@link https://github.com/edorivai}
 * @author Niels Keurentjes [@curry684]{@link https://github.com/curry684}
 * @author Stefan Vermaas [@stefanvermaas]{@link https://github.com/stefanvermaas}
 */
var nl_locale = {
  code: 'nl',
  formatDistance: nl_lib_formatDistance,
  formatLong: nl_lib_formatLong,
  formatRelative: nl_lib_formatRelative,
  localize: nl_lib_localize,
  match: nl_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nl = (nl_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/formatDistance/index.js
var nl_BE_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'minder dan een seconde',
    other: 'minder dan {{count}} seconden'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} seconden'
  },
  halfAMinute: 'een halve minuut',
  lessThanXMinutes: {
    one: 'minder dan een minuut',
    other: 'minder dan {{count}} minuten'
  },
  xMinutes: {
    one: 'een minuut',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} uur'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} uur'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weken'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weken'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maanden'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maanden'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer dan 1 jaar',
    other: 'meer dan {{count}} jaar'
  },
  almostXYears: {
    one: 'bijna 1 jaar',
    other: 'bijna {{count}} jaar'
  }
};
var nl_BE_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = nl_BE_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'over ' + result;
    } else {
      return result + ' geleden';
    }
  }
  return result;
};
/* harmony default export */ const nl_BE_lib_formatDistance = (nl_BE_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/formatLong/index.js

var nl_BE_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.y'
};
var nl_BE_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var nl_BE_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var nl_BE_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_BE_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_BE_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_BE_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const nl_BE_lib_formatLong = (nl_BE_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/formatRelative/index.js
var nl_BE_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'vorige' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
var nl_BE_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return nl_BE_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nl_BE_lib_formatRelative = (nl_BE_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/localize/index.js

var nl_BE_lib_localize_eraValues = {
  narrow: ['v.C.', 'n.C.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['voor Christus', 'na Christus']
};
var nl_BE_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
};
var nl_BE_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
};
var nl_BE_lib_localize_dayValues = {
  narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
  short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
  abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
  wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
};
var nl_BE_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middag',
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middag',
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middag',
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};
var nl_BE_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + 'e';
};
var nl_BE_lib_localize_localize = {
  ordinalNumber: nl_BE_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const nl_BE_lib_localize = (nl_BE_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/match/index.js


var nl_BE_lib_match_matchOrdinalNumberPattern = /^(\d+)e?/i;
var nl_BE_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nl_BE_lib_match_matchEraPatterns = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var nl_BE_lib_match_parseEraPatterns = {
  any: [/^v/, /^n/]
};
var nl_BE_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var nl_BE_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nl_BE_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var nl_BE_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var nl_BE_lib_match_matchDayPatterns = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var nl_BE_lib_match_parseDayPatterns = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var nl_BE_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var nl_BE_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var nl_BE_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nl_BE_lib_match_matchOrdinalNumberPattern,
    parsePattern: nl_BE_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_BE_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_BE_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_BE_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nl_BE_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: nl_BE_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const nl_BE_lib_match = (nl_BE_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
 * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
 * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
 * @author Alex Hoeing [@dcbn]{@link https://github.com/dcbn}
 */
var nl_BE_locale = {
  code: 'nl-BE',
  formatDistance: nl_BE_lib_formatDistance,
  formatLong: nl_BE_lib_formatLong,
  formatRelative: nl_BE_lib_formatRelative,
  localize: nl_BE_lib_localize,
  match: nl_BE_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nl_BE = (nl_BE_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/formatDistance/index.js
var nn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mindre enn eitt sekund',
    other: 'mindre enn {{count}} sekund'
  },
  xSeconds: {
    one: 'eitt sekund',
    other: '{{count}} sekund'
  },
  halfAMinute: 'eit halvt minutt',
  lessThanXMinutes: {
    one: 'mindre enn eitt minutt',
    other: 'mindre enn {{count}} minutt'
  },
  xMinutes: {
    one: 'eitt minutt',
    other: '{{count}} minutt'
  },
  aboutXHours: {
    one: 'omtrent ein time',
    other: 'omtrent {{count}} timar'
  },
  xHours: {
    one: 'ein time',
    other: '{{count}} timar'
  },
  xDays: {
    one: 'ein dag',
    other: '{{count}} dagar'
  },
  aboutXWeeks: {
    one: 'omtrent ei veke',
    other: 'omtrent {{count}} veker'
  },
  xWeeks: {
    one: 'ei veke',
    other: '{{count}} veker'
  },
  aboutXMonths: {
    one: 'omtrent ein m√•nad',
    other: 'omtrent {{count}} m√•nader'
  },
  xMonths: {
    one: 'ein m√•nad',
    other: '{{count}} m√•nader'
  },
  aboutXYears: {
    one: 'omtrent eitt √•r',
    other: 'omtrent {{count}} √•r'
  },
  xYears: {
    one: 'eitt √•r',
    other: '{{count}} √•r'
  },
  overXYears: {
    one: 'over eitt √•r',
    other: 'over {{count}} √•r'
  },
  almostXYears: {
    one: 'nesten eitt √•r',
    other: 'nesten {{count}} √•r'
  }
};
var wordMapping = ['null', 'ein', 'to', 'tre', 'fire', 'fem', 'seks', 'sju', '√•tte', 'ni', 'ti', 'elleve', 'tolv'];
var nn_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = nn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    if (options && options.onlyNumeric) {
      result = tokenValue.other.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', count < 13 ? wordMapping[count] : String(count));
    }
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' sidan';
    }
  }
  return result;
};
/* harmony default export */ const nn_lib_formatDistance = (nn_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/formatLong/index.js

var nn_lib_formatLong_dateFormats = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var nn_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var nn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var nn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nn_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nn_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nn_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const nn_lib_formatLong = (nn_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/formatRelative/index.js
var nn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'f√∏rre' eeee 'kl.' p",
  yesterday: "'i g√•r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
var nn_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return nn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nn_lib_formatRelative = (nn_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/localize/index.js

var nn_lib_localize_eraValues = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['f√∏r Kristus', 'etter Kristus']
};
var nn_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var nn_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
};
var nn_lib_localize_dayValues = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['su', 'm√•', 'ty', 'on', 'to', 'fr', 'lau'],
  abbreviated: ['sun', 'm√•n', 'tys', 'ons', 'tor', 'fre', 'laur'],
  wide: ['sundag', 'm√•ndag', 'tysdag', 'onsdag', 'torsdag', 'fredag', 'laurdag']
};
var nn_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morg.',
    afternoon: 'p√• etterm.',
    evening: 'p√• kvelden',
    night: 'p√• natta'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morg.',
    afternoon: 'p√• etterm.',
    evening: 'p√• kvelden',
    night: 'p√• natta'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morgonen',
    afternoon: 'p√• ettermiddagen',
    evening: 'p√• kvelden',
    night: 'p√• natta'
  }
};
var nn_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var nn_lib_localize_localize = {
  ordinalNumber: nn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_dayPeriodValues,
    defaultWidth: 'wide'
  })
};
/* harmony default export */ const nn_lib_localize = (nn_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/match/index.js


var nn_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var nn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nn_lib_match_matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(f√∏r Kristus|f√∏r v√•r tid|etter Kristus|v√•r tid)/i
};
var nn_lib_match_parseEraPatterns = {
  any: [/^f/i, /^e/i]
};
var nn_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var nn_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nn_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var nn_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var nn_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(su|m√•|ty|on|to|fr|la)/i,
  abbreviated: /^(sun|m√•n|tys|ons|tor|fre|laur)/i,
  wide: /^(sundag|m√•ndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
};
var nn_lib_match_parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var nn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(midnatt|middag|(p√•) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(p√•) (morgonen|ettermiddagen|kvelden|natta))/i
};
var nn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var nn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nn_lib_match_matchOrdinalNumberPattern,
    parsePattern: nn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nn_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nn_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nn_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: nn_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: nn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const nn_lib_match = (nn_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Norwegian Nynorsk locale.
 * @language Norwegian Nynorsk
 * @iso-639-2 nno
 * @author Mats Byrkjeland [@draperunner]{@link https://github.com/draperunner}
 */
var nn_locale = {
  code: 'nn',
  formatDistance: nn_lib_formatDistance,
  formatLong: nn_lib_formatLong,
  formatRelative: nn_lib_formatRelative,
  localize: nn_lib_localize,
  match: nn_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nn = (nn_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/formatDistance/index.js
var oc_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mens d‚Äôuna segonda',
    other: 'mens de {{count}} segondas'
  },
  xSeconds: {
    one: '1 segonda',
    other: '{{count}} segondas'
  },
  halfAMinute: '30 segondas',
  lessThanXMinutes: {
    one: 'mens d‚Äôuna minuta',
    other: 'mens de {{count}} minutas'
  },
  xMinutes: {
    one: '1 minuta',
    other: '{{count}} minutas'
  },
  aboutXHours: {
    one: 'environ 1 ora',
    other: 'environ {{count}} oras'
  },
  xHours: {
    one: '1 ora',
    other: '{{count}} oras'
  },
  xDays: {
    one: '1 jorn',
    other: '{{count}} jorns'
  },
  aboutXWeeks: {
    one: 'environ 1 setmana',
    other: 'environ {{count}} setmanas'
  },
  xWeeks: {
    one: '1 setmana',
    other: '{{count}} setmanas'
  },
  aboutXMonths: {
    one: 'environ 1 mes',
    other: 'environ {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'environ 1 an',
    other: 'environ {{count}} ans'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ans'
  },
  overXYears: {
    one: 'mai d‚Äôun an',
    other: 'mai de {{count}} ans'
  },
  almostXYears: {
    one: 'gaireben un an',
    other: 'gaireben {{count}} ans'
  }
};
var oc_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = oc_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'd‚Äôaqu√≠ ' + result;
    } else {
      return 'fa ' + result;
    }
  }
  return result;
};
/* harmony default export */ const oc_lib_formatDistance = (oc_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/formatLong/index.js

var oc_lib_formatLong_dateFormats = {
  full: "EEEE d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var oc_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var oc_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'a' {{time}}",
  long: "{{date}} 'a' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var oc_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: oc_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: oc_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: oc_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const oc_lib_formatLong = (oc_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/formatRelative/index.js
var oc_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'passat a' p",
  yesterday: "'i√®r a' p",
  today: "'u√®i a' p",
  tomorrow: "'deman a' p",
  nextWeek: "eeee 'a' p",
  other: 'P'
};
var oc_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return oc_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const oc_lib_formatRelative = (oc_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/localize/index.js

var oc_lib_localize_eraValues = {
  narrow: ['ab. J.C.', 'apr. J.C.'],
  abbreviated: ['ab. J.C.', 'apr. J.C.'],
  wide: ['abans J√®sus-Crist', 'apr√®s J√®sus-Crist']
};
var oc_lib_localize_quarterValues = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1√®r trim.', '2nd trim.', '3en trim.', '4en trim.'],
  wide: ['1√®r trim√®stre', '2nd trim√®stre', '3en trim√®stre', '4en trim√®stre']
};
var oc_lib_localize_monthValues = {
  narrow: ['GN', 'FB', 'M√á', 'AB', 'MA', 'JN', 'JL', 'AG', 'ST', 'OC', 'NV', 'DC'],
  abbreviated: ['gen.', 'febr.', 'mar√ß', 'abr.', 'mai', 'junh', 'jul.', 'ag.', 'set.', 'oct.', 'nov.', 'dec.'],
  wide: ['geni√®r', 'febri√®r', 'mar√ß', 'abril', 'mai', 'junh', 'julhet', 'agost', 'setembre', 'oct√≤bre', 'novembre', 'decembre']
};
var oc_lib_localize_dayValues = {
  narrow: ['dg.', 'dl.', 'dm.', 'dc.', 'dj.', 'dv.', 'ds.'],
  short: ['dg.', 'dl.', 'dm.', 'dc.', 'dj.', 'dv.', 'ds.'],
  abbreviated: ['dg.', 'dl.', 'dm.', 'dc.', 'dj.', 'dv.', 'ds.'],
  wide: ['dimenge', 'diluns', 'dimars', 'dim√®cres', 'dij√≤us', 'divendres', 'dissabte']
};
var oc_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'mi√®janu√®ch',
    noon: 'mi√®gjorn',
    morning: 'matin',
    afternoon: 'apr√®p-mi√®gjorn',
    evening: 'v√®spre',
    night: 'nu√®ch'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'mi√®janu√®ch',
    noon: 'mi√®gjorn',
    morning: 'matin',
    afternoon: 'apr√®p-mi√®gjorn',
    evening: 'v√®spre',
    night: 'nu√®ch'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'mi√®janu√®ch',
    noon: 'mi√®gjorn',
    morning: 'matin',
    afternoon: 'apr√®p-mi√®gjorn',
    evening: 'v√®spre',
    night: 'nu√®ch'
  }
};
var oc_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'mi√®janu√®ch',
    noon: 'mi√®gjorn',
    morning: 'del matin',
    afternoon: 'de l‚Äôapr√®p-mi√®gjorn',
    evening: 'del ser',
    night: 'de la nu√®ch'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mi√®janu√®ch',
    noon: 'mi√®gjorn',
    morning: 'del matin',
    afternoon: 'de l‚Äôapr√®p-mi√®gjorn',
    evening: 'del ser',
    night: 'de la nu√®ch'
  },
  wide: {
    am: 'ante meridiem',
    pm: 'post meridiem',
    midnight: 'mi√®janu√®ch',
    noon: 'mi√®gjorn',
    morning: 'del matin',
    afternoon: 'de l‚Äôapr√®p-mi√®gjorn',
    evening: 'del ser',
    night: 'de la nu√®ch'
  }
};
var oc_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var ordinal;
  switch (number) {
    case 1:
      ordinal = '√®r';
      break;
    case 2:
      ordinal = 'nd';
      break;
    default:
      ordinal = 'en';
  }

  // feminine for year, week, hour, minute, second
  if (unit === 'year' || unit === 'week' || unit === 'hour' || unit === 'minute' || unit === 'second') {
    ordinal += 'a';
  }
  return number + ordinal;
};
var oc_lib_localize_localize = {
  ordinalNumber: oc_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: oc_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const oc_lib_localize = (oc_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/match/index.js


var oc_lib_match_matchOrdinalNumberPattern = /^(\d+)(√®r|nd|en)?[a]?/i;
var oc_lib_match_parseOrdinalNumberPattern = /\d+/i;
var oc_lib_match_matchEraPatterns = {
  narrow: /^(ab\.J\.C|apr\.J\.C|apr\.J\.-C)/i,
  abbreviated: /^(ab\.J\.-C|ab\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(abans J√®sus-Crist|apr√®s J√®sus-Crist)/i
};
var oc_lib_match_parseEraPatterns = {
  any: [/^ab/i, /^ap/i]
};
var oc_lib_match_matchQuarterPatterns = {
  narrow: /^T[1234]/i,
  abbreviated: /^[1234](√®r|nd|en)? trim\.?/i,
  wide: /^[1234](√®r|nd|en)? trim√®stre/i
};
var oc_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var oc_lib_match_matchMonthPatterns = {
  narrow: /^(GN|FB|M√á|AB|MA|JN|JL|AG|ST|OC|NV|DC)/i,
  abbreviated: /^(gen|febr|mar√ß|abr|mai|junh|jul|ag|set|oct|nov|dec)\.?/i,
  wide: /^(geni√®r|febri√®r|mar√ß|abril|mai|junh|julhet|agost|setembre|oct√≤bre|novembre|decembre)/i
};
var oc_lib_match_parseMonthPatterns = {
  any: [/^g/i, /^f/i, /^ma[r?]|M√á/i, /^ab/i, /^ma[i?]/i, /^ju[n?]|JN/i, /^ju[l?]|JL/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var oc_lib_match_matchDayPatterns = {
  narrow: /^d[glmcjvs]\.?/i,
  short: /^d[glmcjvs]\.?/i,
  abbreviated: /^d[glmcjvs]\.?/i,
  wide: /^(dimenge|diluns|dimars|dim√®cres|dij√≤us|divendres|dissabte)/i
};
var oc_lib_match_parseDayPatterns = {
  narrow: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  short: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  abbreviated: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  any: [/^dg|dime/i, /^dl|dil/i, /^dm|dima/i, /^dc|dim√®/i, /^dj|dij/i, /^dv|div/i, /^ds|dis/i]
};
var oc_lib_match_matchDayPeriodPatterns = {
  any: /(^(a\.?m|p\.?m))|(ante meridiem|post meridiem)|((del |de la |de l‚Äô)(matin|apr√®p-mi√®gjorn|v√®spre|ser|nu√®ch))/i
};
var oc_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /(^a)|ante meridiem/i,
    pm: /(^p)|post meridiem/i,
    midnight: /^mi√®j/i,
    noon: /^mi√®g/i,
    morning: /matin/i,
    afternoon: /apr√®p-mi√®gjorn/i,
    evening: /v√®spre|ser/i,
    night: /nu√®ch/i
  }
};
var oc_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: oc_lib_match_matchOrdinalNumberPattern,
    parsePattern: oc_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: oc_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: oc_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: oc_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: oc_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: oc_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const oc_lib_match = (oc_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Occitan locale.
 * @language Occitan
 * @iso-639-2 oci
 * @author Quentin PAG√àS
 */
var oc_locale = {
  code: 'oc',
  formatDistance: oc_lib_formatDistance,
  formatLong: oc_lib_formatLong,
  formatRelative: oc_lib_formatRelative,
  localize: oc_lib_localize,
  match: oc_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const oc = (oc_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/formatDistance/index.js
var pl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      regular: 'mniej ni≈º sekunda',
      past: 'mniej ni≈º sekundƒô',
      future: 'mniej ni≈º sekundƒô'
    },
    twoFour: 'mniej ni≈º {{count}} sekundy',
    other: 'mniej ni≈º {{count}} sekund'
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'sekundƒô',
      future: 'sekundƒô'
    },
    twoFour: '{{count}} sekundy',
    other: '{{count}} sekund'
  },
  halfAMinute: {
    one: 'p√≥≈Ç minuty',
    twoFour: 'p√≥≈Ç minuty',
    other: 'p√≥≈Ç minuty'
  },
  lessThanXMinutes: {
    one: {
      regular: 'mniej ni≈º minuta',
      past: 'mniej ni≈º minutƒô',
      future: 'mniej ni≈º minutƒô'
    },
    twoFour: 'mniej ni≈º {{count}} minuty',
    other: 'mniej ni≈º {{count}} minut'
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'minutƒô',
      future: 'minutƒô'
    },
    twoFour: '{{count}} minuty',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: {
      regular: 'oko≈Ço godziny',
      past: 'oko≈Ço godziny',
      future: 'oko≈Ço godzinƒô'
    },
    twoFour: 'oko≈Ço {{count}} godziny',
    other: 'oko≈Ço {{count}} godzin'
  },
  xHours: {
    one: {
      regular: 'godzina',
      past: 'godzinƒô',
      future: 'godzinƒô'
    },
    twoFour: '{{count}} godziny',
    other: '{{count}} godzin'
  },
  xDays: {
    one: {
      regular: 'dzie≈Ñ',
      past: 'dzie≈Ñ',
      future: '1 dzie≈Ñ'
    },
    twoFour: '{{count}} dni',
    other: '{{count}} dni'
  },
  aboutXWeeks: {
    one: 'oko≈Ço tygodnia',
    twoFour: 'oko≈Ço {{count}} tygodni',
    other: 'oko≈Ço {{count}} tygodni'
  },
  xWeeks: {
    one: 'tydzie≈Ñ',
    twoFour: '{{count}} tygodnie',
    other: '{{count}} tygodni'
  },
  aboutXMonths: {
    one: 'oko≈Ço miesiƒÖc',
    twoFour: 'oko≈Ço {{count}} miesiƒÖce',
    other: 'oko≈Ço {{count}} miesiƒôcy'
  },
  xMonths: {
    one: 'miesiƒÖc',
    twoFour: '{{count}} miesiƒÖce',
    other: '{{count}} miesiƒôcy'
  },
  aboutXYears: {
    one: 'oko≈Ço rok',
    twoFour: 'oko≈Ço {{count}} lata',
    other: 'oko≈Ço {{count}} lat'
  },
  xYears: {
    one: 'rok',
    twoFour: '{{count}} lata',
    other: '{{count}} lat'
  },
  overXYears: {
    one: 'ponad rok',
    twoFour: 'ponad {{count}} lata',
    other: 'ponad {{count}} lat'
  },
  almostXYears: {
    one: 'prawie rok',
    twoFour: 'prawie {{count}} lata',
    other: 'prawie {{count}} lat'
  }
};
function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }
  var rem100 = count % 100;

  // ends with 11-20
  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }
  var rem10 = rem100 % 10;

  // ends with 2, 3, 4
  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function pl_lib_formatDistance_declension(scheme, count, time) {
  var group = declensionGroup(scheme, count);
  var finalText = typeof group === 'string' ? group : group[time];
  return finalText.replace('{{count}}', String(count));
}
var pl_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var scheme = pl_lib_formatDistance_formatDistanceLocale[token];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return pl_lib_formatDistance_declension(scheme, count, 'regular');
  }
  if (options.comparison && options.comparison > 0) {
    return 'za ' + pl_lib_formatDistance_declension(scheme, count, 'future');
  } else {
    return pl_lib_formatDistance_declension(scheme, count, 'past') + ' temu';
  }
};
/* harmony default export */ const pl_lib_formatDistance = (pl_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/formatLong/index.js

var pl_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM y',
  long: 'do MMMM y',
  medium: 'do MMM y',
  short: 'dd.MM.y'
};
var pl_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var pl_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var pl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: pl_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: pl_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: pl_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const pl_lib_formatLong = (pl_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/formatRelative/index.js

var adjectivesLastWeek = {
  masculine: 'ostatni',
  feminine: 'ostatnia'
};
var adjectivesThisWeek = {
  masculine: 'ten',
  feminine: 'ta'
};
var adjectivesNextWeek = {
  masculine: 'nastƒôpny',
  feminine: 'nastƒôpna'
};
var dayGrammaticalGender = {
  0: 'feminine',
  1: 'masculine',
  2: 'masculine',
  3: 'feminine',
  4: 'masculine',
  5: 'masculine',
  6: 'feminine'
};
function dayAndTimeWithAdjective(token, date, baseDate, options) {
  var adjectives;
  if (isSameUTCWeek(date, baseDate, options)) {
    adjectives = adjectivesThisWeek;
  } else if (token === 'lastWeek') {
    adjectives = adjectivesLastWeek;
  } else if (token === 'nextWeek') {
    adjectives = adjectivesNextWeek;
  } else {
    throw new Error("Cannot determine adjectives for token ".concat(token));
  }
  var day = date.getUTCDay();
  var grammaticalGender = dayGrammaticalGender[day];
  var adjective = adjectives[grammaticalGender];
  return "'".concat(adjective, "' eeee 'o' p");
}
var pl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: dayAndTimeWithAdjective,
  yesterday: "'wczoraj o' p",
  today: "'dzisiaj o' p",
  tomorrow: "'jutro o' p",
  nextWeek: dayAndTimeWithAdjective,
  other: 'P'
};
var pl_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = pl_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(token, date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const pl_lib_formatRelative = (pl_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/localize/index.js

var pl_lib_localize_eraValues = {
  narrow: ['p.n.e.', 'n.e.'],
  abbreviated: ['p.n.e.', 'n.e.'],
  wide: ['przed naszƒÖ erƒÖ', 'naszej ery']
};
var pl_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I kw.', 'II kw.', 'III kw.', 'IV kw.'],
  wide: ['I kwarta≈Ç', 'II kwarta≈Ç', 'III kwarta≈Ç', 'IV kwarta≈Ç']
};
var pl_lib_localize_monthValues = {
  narrow: ['S', 'L', 'M', 'K', 'M', 'C', 'L', 'S', 'W', 'P', 'L', 'G'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'pa≈∫', 'lis', 'gru'],
  wide: ['stycze≈Ñ', 'luty', 'marzec', 'kwiecie≈Ñ', 'maj', 'czerwiec', 'lipiec', 'sierpie≈Ñ', 'wrzesie≈Ñ', 'pa≈∫dziernik', 'listopad', 'grudzie≈Ñ']
};
var monthFormattingValues = {
  narrow: ['s', 'l', 'm', 'k', 'm', 'c', 'l', 's', 'w', 'p', 'l', 'g'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'pa≈∫', 'lis', 'gru'],
  wide: ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'wrze≈õnia', 'pa≈∫dziernika', 'listopada', 'grudnia']
};
var pl_lib_localize_dayValues = {
  narrow: ['N', 'P', 'W', '≈ö', 'C', 'P', 'S'],
  short: ['nie', 'pon', 'wto', '≈õro', 'czw', 'piƒÖ', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', '≈õr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedzia≈Çek', 'wtorek', '≈õroda', 'czwartek', 'piƒÖtek', 'sobota']
};
var dayFormattingValues = {
  narrow: ['n', 'p', 'w', '≈õ', 'c', 'p', 's'],
  short: ['nie', 'pon', 'wto', '≈õro', 'czw', 'piƒÖ', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', '≈õr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedzia≈Çek', 'wtorek', '≈õroda', 'czwartek', 'piƒÖtek', 'sobota']
};
var pl_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'p√≥≈Çn.',
    noon: 'po≈Ç',
    morning: 'rano',
    afternoon: 'popo≈Ç.',
    evening: 'wiecz.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'p√≥≈Çnoc',
    noon: 'po≈Çudnie',
    morning: 'rano',
    afternoon: 'popo≈Çudnie',
    evening: 'wiecz√≥r',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'p√≥≈Çnoc',
    noon: 'po≈Çudnie',
    morning: 'rano',
    afternoon: 'popo≈Çudnie',
    evening: 'wiecz√≥r',
    night: 'noc'
  }
};
var dayPeriodFormattingValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'o p√≥≈Çn.',
    noon: 'w po≈Ç.',
    morning: 'rano',
    afternoon: 'po po≈Ç.',
    evening: 'wiecz.',
    night: 'w nocy'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o p√≥≈Çnocy',
    noon: 'w po≈Çudnie',
    morning: 'rano',
    afternoon: 'po po≈Çudniu',
    evening: 'wieczorem',
    night: 'w nocy'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o p√≥≈Çnocy',
    noon: 'w po≈Çudnie',
    morning: 'rano',
    afternoon: 'po po≈Çudniu',
    evening: 'wieczorem',
    night: 'w nocy'
  }
};
var pl_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var pl_lib_localize_localize = {
  ordinalNumber: pl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: monthFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_dayValues,
    defaultWidth: 'wide',
    formattingValues: dayFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: dayPeriodFormattingValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const pl_lib_localize = (pl_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/match/index.js


var pl_lib_match_matchOrdinalNumberPattern = /^(\d+)?/i;
var pl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var pl_lib_match_matchEraPatterns = {
  narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  wide: /^(przed\s*nasz(ƒÖ|a)\s*er(ƒÖ|a)|naszej\s*ery)/i
};
var pl_lib_match_parseEraPatterns = {
  any: [/^p/i, /^n/i]
};
var pl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
  wide: /^(I|II|III|IV)\s*kwarta(≈Ç|l)/i
};
var pl_lib_match_parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
};
var pl_lib_match_matchMonthPatterns = {
  narrow: /^[slmkcwpg]/i,
  abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(≈∫|z)|lis|gru)/i,
  wide: /^(stycznia|stycze(≈Ñ|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(≈Ñ|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(≈Ñ|n)|wrze(≈õ|s)nia|wrzesie(≈Ñ|n)|pa(≈∫|z)dziernika|pa(≈∫|z)dziernik|listopada|listopad|grudnia|grudzie(≈Ñ|n))/i
};
var pl_lib_match_parseMonthPatterns = {
  narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
  any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
};
var pl_lib_match_matchDayPatterns = {
  narrow: /^[npw≈õcs]/i,
  short: /^(nie|pon|wto|(≈õ|s)ro|czw|pi(ƒÖ|a)|sob)/i,
  abbreviated: /^(niedz|pon|wt|(≈õ|s)r|czw|pt|sob)\.?/i,
  wide: /^(niedziela|poniedzia(≈Ç|l)ek|wtorek|(≈õ|s)roda|czwartek|pi(ƒÖ|a)tek|sobota)/i
};
var pl_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^w/i, /^≈õ/i, /^c/i, /^p/i, /^s/i],
  abbreviated: [/^n/i, /^po/i, /^w/i, /^(≈õ|s)r/i, /^c/i, /^pt/i, /^so/i],
  any: [/^n/i, /^po/i, /^w/i, /^(≈õ|s)r/i, /^c/i, /^pi/i, /^so/i]
};
var pl_lib_match_matchDayPeriodPatterns = {
  narrow: /^(^a$|^p$|p√≥(≈Ç|l)n\.?|o\s*p√≥(≈Ç|l)n\.?|po(≈Ç|l)\.?|w\s*po(≈Ç|l)\.?|po\s*po(≈Ç|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
  any: /^(am|pm|p√≥(≈Ç|l)noc|o\s*p√≥(≈Ç|l)nocy|po(≈Ç|l)udnie|w\s*po(≈Ç|l)udnie|popo(≈Ç|l)udnie|po\s*po(≈Ç|l)udniu|rano|wiecz√≥r|wieczorem|noc|w\s*nocy)/i
};
var pl_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /p√≥(≈Ç|l)n/i,
    noon: /po(≈Ç|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(≈Ç|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  },
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /p√≥(≈Ç|l)n/i,
    noon: /po(≈Ç|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(≈Ç|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  }
};
var pl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: pl_lib_match_matchOrdinalNumberPattern,
    parsePattern: pl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pl_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pl_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pl_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pl_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: pl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const pl_lib_match = (pl_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Polish locale.
 * @language Polish
 * @iso-639-2 pol
 * @author Mateusz Derks [@ertrzyiks]{@link https://github.com/ertrzyiks}
 * @author Just RAG [@justrag]{@link https://github.com/justrag}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Mateusz Tokarski [@mutisz]{@link https://github.com/mutisz}
 */
var pl_locale = {
  code: 'pl',
  formatDistance: pl_lib_formatDistance,
  formatLong: pl_lib_formatLong,
  formatRelative: pl_lib_formatRelative,
  localize: pl_lib_localize,
  match: pl_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const pl = (pl_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/formatDistance/index.js
var pt_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'menos de um segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'meio minuto',
  lessThanXMinutes: {
    one: 'menos de um minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'aproximadamente 1 hora',
    other: 'aproximadamente {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dias'
  },
  aboutXWeeks: {
    one: 'aproximadamente 1 semana',
    other: 'aproximadamente {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'aproximadamente 1 m√™s',
    other: 'aproximadamente {{count}} meses'
  },
  xMonths: {
    one: '1 m√™s',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'aproximadamente 1 ano',
    other: 'aproximadamente {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'mais de 1 ano',
    other: 'mais de {{count}} anos'
  },
  almostXYears: {
    one: 'quase 1 ano',
    other: 'quase {{count}} anos'
  }
};
var pt_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = pt_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'daqui a ' + result;
    } else {
      return 'h√° ' + result;
    }
  }
  return result;
};
/* harmony default export */ const pt_lib_formatDistance = (pt_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/formatLong/index.js

var pt_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d 'de' MMM 'de' y",
  short: 'dd/MM/y'
};
var pt_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var pt_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '√†s' {{time}}",
  long: "{{date}} '√†s' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var pt_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const pt_lib_formatLong = (pt_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/formatRelative/index.js
var pt_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? '√∫ltimo' : '√∫ltima';
    return "'" + last + "' eeee '√†s' p";
  },
  yesterday: "'ontem √†s' p",
  today: "'hoje √†s' p",
  tomorrow: "'amanh√£ √†s' p",
  nextWeek: "eeee '√†s' p",
  other: 'P'
};
var pt_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = pt_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const pt_lib_formatRelative = (pt_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/localize/index.js

var pt_lib_localize_eraValues = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a.C.', 'd.C.'],
  wide: ['antes de Cristo', 'depois de Cristo']
};
var pt_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1¬∫ trimestre', '2¬∫ trimestre', '3¬∫ trimestre', '4¬∫ trimestre']
};
var pt_lib_localize_monthValues = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
  wide: ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
};
var pt_lib_localize_dayValues = {
  narrow: ['d', 's', 't', 'q', 'q', 's', 's'],
  short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 's√°b'],
  abbreviated: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 's√°b'],
  wide: ['domingo', 'segunda-feira', 'ter√ßa-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 's√°bado']
};
var pt_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manh√£',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manh√£',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manh√£',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  }
};
var pt_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manh√£',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manh√£',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manh√£',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  }
};
var pt_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '¬∫';
};
var pt_lib_localize_localize = {
  ordinalNumber: pt_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: pt_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const pt_lib_localize = (pt_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/match/index.js


var pt_lib_match_matchOrdinalNumberPattern = /^(\d+)(¬∫|¬™)?/i;
var pt_lib_match_parseOrdinalNumberPattern = /\d+/i;
var pt_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
};
var pt_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era comum)/i, /^(depois de cristo|era comum)/i]
};
var pt_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](¬∫|¬™)? trimestre/i
};
var pt_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var pt_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var pt_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ab/i, /^mai/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var pt_lib_match_matchDayPatterns = {
  narrow: /^[dstq]/i,
  short: /^(dom|seg|ter|qua|qui|sex|s[√°a]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[√°a]b)/i,
  wide: /^(domingo|segunda-?\s?feira|ter√ßa-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[√°a]bado)/i
};
var pt_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[√°a]/i]
};
var pt_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[√£a]|tarde|noite|madrugada))/i,
  any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[√£a]|tarde|noite|madrugada))/i
};
var pt_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^meia/i,
    noon: /^meio/i,
    morning: /manh[√£a]/i,
    afternoon: /tarde/i,
    evening: /noite/i,
    night: /madrugada/i
  }
};
var pt_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: pt_lib_match_matchOrdinalNumberPattern,
    parsePattern: pt_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: pt_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const pt_lib_match = (pt_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Portuguese locale.
 * @language Portuguese
 * @iso-639-2 por
 * @author D√°rio Freire [@dfreire]{@link https://github.com/dfreire}
 * @author Adri√°n de la Rosa [@adrm]{@link https://github.com/adrm}
 */
var pt_locale = {
  code: 'pt',
  formatDistance: pt_lib_formatDistance,
  formatLong: pt_lib_formatLong,
  formatRelative: pt_lib_formatRelative,
  localize: pt_lib_localize,
  match: pt_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const pt = (pt_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/formatDistance/index.js
var pt_BR_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'menos de um segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'meio minuto',
  lessThanXMinutes: {
    one: 'menos de um minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'cerca de 1 hora',
    other: 'cerca de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dias'
  },
  aboutXWeeks: {
    one: 'cerca de 1 semana',
    other: 'cerca de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'cerca de 1 m√™s',
    other: 'cerca de {{count}} meses'
  },
  xMonths: {
    one: '1 m√™s',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'cerca de 1 ano',
    other: 'cerca de {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'mais de 1 ano',
    other: 'mais de {{count}} anos'
  },
  almostXYears: {
    one: 'quase 1 ano',
    other: 'quase {{count}} anos'
  }
};
var pt_BR_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = pt_BR_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'em ' + result;
    } else {
      return 'h√° ' + result;
    }
  }
  return result;
};
/* harmony default export */ const pt_BR_lib_formatDistance = (pt_BR_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/formatLong/index.js

var pt_BR_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var pt_BR_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var pt_BR_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '√†s' {{time}}",
  long: "{{date}} '√†s' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var pt_BR_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_BR_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_BR_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_BR_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const pt_BR_lib_formatLong = (pt_BR_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/formatRelative/index.js
var pt_BR_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? '√∫ltimo' : '√∫ltima';
    return "'" + last + "' eeee '√†s' p";
  },
  yesterday: "'ontem √†s' p",
  today: "'hoje √†s' p",
  tomorrow: "'amanh√£ √†s' p",
  nextWeek: "eeee '√†s' p",
  other: 'P'
};
var pt_BR_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = pt_BR_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const pt_BR_lib_formatRelative = (pt_BR_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/localize/index.js

var pt_BR_lib_localize_eraValues = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'depois de cristo']
};
var pt_BR_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1¬∫ trimestre', '2¬∫ trimestre', '3¬∫ trimestre', '4¬∫ trimestre']
};
var pt_BR_lib_localize_monthValues = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
  wide: ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
};
var pt_BR_lib_localize_dayValues = {
  narrow: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
  short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sab'],
  abbreviated: ['domingo', 'segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 's√°bado'],
  wide: ['domingo', 'segunda-feira', 'ter√ßa-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 's√°bado']
};
var pt_BR_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'manh√£',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manh√£',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manh√£',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  }
};
var pt_BR_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'da manh√£',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manh√£',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manh√£',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  }
};
var pt_BR_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === 'week') {
    return number + '¬™';
  }
  return number + '¬∫';
};
var pt_BR_lib_localize_localize = {
  ordinalNumber: pt_BR_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: pt_BR_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const pt_BR_lib_localize = (pt_BR_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/match/index.js


var pt_BR_lib_match_matchOrdinalNumberPattern = /^(\d+)[¬∫¬™o]?/i;
var pt_BR_lib_match_parseOrdinalNumberPattern = /\d+/i;
var pt_BR_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
  wide: /^(antes de cristo|depois de cristo)/i
};
var pt_BR_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^antes de cristo/i, /^depois de cristo/i]
};
var pt_BR_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](¬∫)? trimestre/i
};
var pt_BR_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var pt_BR_lib_match_matchMonthPatterns = {
  narrow: /^[jfmajsond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var pt_BR_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^fev/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dez/i]
};
var pt_BR_lib_match_matchDayPatterns = {
  narrow: /^(dom|[23456]¬™?|s[a√°]b)/i,
  short: /^(dom|[23456]¬™?|s[a√°]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[a√°]b)/i,
  wide: /^(domingo|(segunda|ter[c√ß]a|quarta|quinta|sexta)([- ]feira)?|s[a√°]bado)/i
};
var pt_BR_lib_match_parseDayPatterns = {
  short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[a√°]/i],
  narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[a√°]/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[a√°]b/i]
};
var pt_BR_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(da) (manh√£|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manh√£|tarde|noite))/i
};
var pt_BR_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn|^meia[-\s]noite/i,
    noon: /^md|^meio[-\s]dia/i,
    morning: /manh√£/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noite/i
  }
};
var pt_BR_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: pt_BR_lib_match_matchOrdinalNumberPattern,
    parsePattern: pt_BR_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_BR_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_BR_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_BR_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: pt_BR_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: pt_BR_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const pt_BR_lib_match = (pt_BR_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Portuguese locale (Brazil).
 * @language Portuguese
 * @iso-639-2 por
 * @author Lucas Duailibe [@duailibe]{@link https://github.com/duailibe}
 * @author Yago Carballo [@yagocarballo]{@link https://github.com/YagoCarballo}
 */
var pt_BR_locale = {
  code: 'pt-BR',
  formatDistance: pt_BR_lib_formatDistance,
  formatLong: pt_BR_lib_formatLong,
  formatRelative: pt_BR_lib_formatRelative,
  localize: pt_BR_lib_localize,
  match: pt_BR_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const pt_BR = (pt_BR_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/formatDistance/index.js
var ro_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mai pu»õin de o secundƒÉ',
    other: 'mai pu»õin de {{count}} secunde'
  },
  xSeconds: {
    one: '1 secundƒÉ',
    other: '{{count}} secunde'
  },
  halfAMinute: 'jumƒÉtate de minut',
  lessThanXMinutes: {
    one: 'mai pu»õin de un minut',
    other: 'mai pu»õin de {{count}} minute'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minute'
  },
  aboutXHours: {
    one: 'circa 1 orƒÉ',
    other: 'circa {{count}} ore'
  },
  xHours: {
    one: '1 orƒÉ',
    other: '{{count}} ore'
  },
  xDays: {
    one: '1 zi',
    other: '{{count}} zile'
  },
  aboutXWeeks: {
    one: 'circa o sƒÉptƒÉm√¢nƒÉ',
    other: 'circa {{count}} sƒÉptƒÉm√¢ni'
  },
  xWeeks: {
    one: '1 sƒÉptƒÉm√¢nƒÉ',
    other: '{{count}} sƒÉptƒÉm√¢ni'
  },
  aboutXMonths: {
    one: 'circa 1 lunƒÉ',
    other: 'circa {{count}} luni'
  },
  xMonths: {
    one: '1 lunƒÉ',
    other: '{{count}} luni'
  },
  aboutXYears: {
    one: 'circa 1 an',
    other: 'circa {{count}} ani'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ani'
  },
  overXYears: {
    one: 'peste 1 an',
    other: 'peste {{count}} ani'
  },
  almostXYears: {
    one: 'aproape 1 an',
    other: 'aproape {{count}} ani'
  }
};
var ro_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ro_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '√Æn ' + result;
    } else {
      return result + ' √Æn urmƒÉ';
    }
  }
  return result;
};
/* harmony default export */ const ro_lib_formatDistance = (ro_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/formatLong/index.js

var ro_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd.MM.yyyy'
};
var ro_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var ro_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'la' {{time}}",
  long: "{{date}} 'la' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ro_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ro_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ro_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ro_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ro_lib_formatLong = (ro_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/formatRelative/index.js
var ro_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'trecutƒÉ la' p",
  yesterday: "'ieri la' p",
  today: "'astƒÉzi la' p",
  tomorrow: "'m√¢ine la' p",
  nextWeek: "eeee 'viitoare la' p",
  other: 'P'
};
var ro_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ro_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ro_lib_formatRelative = (ro_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/localize/index.js

var ro_lib_localize_eraValues = {
  narrow: ['√é', 'D'],
  abbreviated: ['√é.d.C.', 'D.C.'],
  wide: ['√énainte de Cristos', 'DupƒÉ Cristos']
};
var ro_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['primul trimestru', 'al doilea trimestru', 'al treilea trimestru', 'al patrulea trimestru']
};
var ro_lib_localize_monthValues = {
  narrow: ['I', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['ian', 'feb', 'mar', 'apr', 'mai', 'iun', 'iul', 'aug', 'sep', 'oct', 'noi', 'dec'],
  wide: ['ianuarie', 'februarie', 'martie', 'aprilie', 'mai', 'iunie', 'iulie', 'august', 'septembrie', 'octombrie', 'noiembrie', 'decembrie']
};
var ro_lib_localize_dayValues = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['du', 'lu', 'ma', 'mi', 'jo', 'vi', 's√¢'],
  abbreviated: ['dum', 'lun', 'mar', 'mie', 'joi', 'vin', 's√¢m'],
  wide: ['duminicƒÉ', 'luni', 'mar»õi', 'miercuri', 'joi', 'vineri', 's√¢mbƒÉtƒÉ']
};
var ro_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'ami',
    morning: 'dim',
    afternoon: 'da',
    evening: 's',
    night: 'n'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'miezul nop»õii',
    noon: 'amiazƒÉ',
    morning: 'diminea»õƒÉ',
    afternoon: 'dupƒÉ-amiazƒÉ',
    evening: 'searƒÉ',
    night: 'noapte'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'miezul nop»õii',
    noon: 'amiazƒÉ',
    morning: 'diminea»õƒÉ',
    afternoon: 'dupƒÉ-amiazƒÉ',
    evening: 'searƒÉ',
    night: 'noapte'
  }
};
var ro_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'amiazƒÉ',
    morning: 'diminea»õƒÉ',
    afternoon: 'dupƒÉ-amiazƒÉ',
    evening: 'searƒÉ',
    night: 'noapte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'miezul nop»õii',
    noon: 'amiazƒÉ',
    morning: 'diminea»õƒÉ',
    afternoon: 'dupƒÉ-amiazƒÉ',
    evening: 'searƒÉ',
    night: 'noapte'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'miezul nop»õii',
    noon: 'amiazƒÉ',
    morning: 'diminea»õƒÉ',
    afternoon: 'dupƒÉ-amiazƒÉ',
    evening: 'searƒÉ',
    night: 'noapte'
  }
};
var ro_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ro_lib_localize_localize = {
  ordinalNumber: ro_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ro_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ro_lib_localize = (ro_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/match/index.js


var ro_lib_match_matchOrdinalNumberPattern = /^(\d+)?/i;
var ro_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ro_lib_match_matchEraPatterns = {
  narrow: /^(√é|D)/i,
  abbreviated: /^(√é\.?\s?d\.?\s?C\.?|√é\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
  wide: /^(√énainte de Cristos|√énaintea erei noastre|DupƒÉ Cristos|Era noastrƒÉ)/i
};
var ro_lib_match_parseEraPatterns = {
  any: [/^√éC/i, /^DC/i],
  wide: [/^(√énainte de Cristos|√énaintea erei noastre)/i, /^(DupƒÉ Cristos|Era noastrƒÉ)/i]
};
var ro_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^trimestrul [1234]/i
};
var ro_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ro_lib_match_matchMonthPatterns = {
  narrow: /^[ifmaasond]/i,
  abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
  wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
};
var ro_lib_match_parseMonthPatterns = {
  narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ia/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^iun/i, /^iul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var ro_lib_match_matchDayPatterns = {
  narrow: /^[dlmjvs]/i,
  short: /^(d|l|ma|mi|j|v|s)/i,
  abbreviated: /^(dum|lun|mar|mie|jo|vi|s√¢)/i,
  wide: /^(duminica|luni|mar≈£i|miercuri|joi|vineri|s√¢mbƒÉtƒÉ)/i
};
var ro_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
};
var ro_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|a|(diminea≈£a|dupƒÉ-amiaza|seara|noaptea))/i,
  any: /^([ap]\.?\s?m\.?|miezul nop»õii|amiaza|(diminea≈£a|dupƒÉ-amiaza|seara|noaptea))/i
};
var ro_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /amiaza/i,
    morning: /diminea≈£a/i,
    afternoon: /dupƒÉ-amiaza/i,
    evening: /seara/i,
    night: /noaptea/i
  }
};
var ro_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ro_lib_match_matchOrdinalNumberPattern,
    parsePattern: ro_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ro_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ro_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ro_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ro_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ro_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ro_lib_match = (ro_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Romanian locale.
 * @language Romanian
 * @iso-639-2 ron
 * @author Sergiu Munteanu [@jsergiu]{@link https://github.com/jsergiu}
 * @author Adrian Ocneanu [@aocneanu]{@link https://github.com/aocneanu}
 * @author Mihai Ocneanu [@gandesc]{@link https://github.com/gandesc}
 */
var ro_locale = {
  code: 'ro',
  formatDistance: ro_lib_formatDistance,
  formatLong: ro_lib_formatLong,
  formatRelative: ro_lib_formatRelative,
  localize: ro_lib_localize,
  match: ro_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ro = (ro_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/formatDistance/index.js
function ru_lib_formatDistance_declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function ru_lib_formatDistance_buildLocalizeTokenFn(scheme) {
  return function (count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return ru_lib_formatDistance_declension(scheme.future, count);
        } else {
          return '—á–µ—Ä–µ–∑ ' + ru_lib_formatDistance_declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return ru_lib_formatDistance_declension(scheme.past, count);
        } else {
          return ru_lib_formatDistance_declension(scheme.regular, count) + ' –Ω–∞–∑–∞–¥';
        }
      }
    } else {
      return ru_lib_formatDistance_declension(scheme.regular, count);
    }
  };
}
var ru_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã',
      singularNominative: '–º–µ–Ω—å—à–µ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      singularGenitive: '–º–µ–Ω—å—à–µ {{count}} —Å–µ–∫—É–Ω–¥',
      pluralGenitive: '–º–µ–Ω—å—à–µ {{count}} —Å–µ–∫—É–Ω–¥'
    },
    future: {
      one: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É',
      singularNominative: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  xSeconds: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥–∞',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥'
    },
    past: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—É –Ω–∞–∑–∞–¥',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥'
    },
    future: {
      singularNominative: '—á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '—á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã',
      pluralGenitive: '—á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  halfAMinute: function halfAMinute(_count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return '—á–µ—Ä–µ–∑ –ø–æ–ª–º–∏–Ω—É—Ç—ã';
      } else {
        return '–ø–æ–ª–º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥';
      }
    }
    return '–ø–æ–ª–º–∏–Ω—É—Ç—ã';
  },
  lessThanXMinutes: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã',
      singularNominative: '–º–µ–Ω—å—à–µ {{count}} –º–∏–Ω—É—Ç—ã',
      singularGenitive: '–º–µ–Ω—å—à–µ {{count}} –º–∏–Ω—É—Ç',
      pluralGenitive: '–º–µ–Ω—å—à–µ {{count}} –º–∏–Ω—É—Ç'
    },
    future: {
      one: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
      singularNominative: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—É',
      singularGenitive: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—ã',
      pluralGenitive: '–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç'
    }
  }),
  xMinutes: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º–∏–Ω—É—Ç–∞',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç—ã',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç'
    },
    past: {
      singularNominative: '{{count}} –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥',
      singularGenitive: '{{count}} –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥',
      pluralGenitive: '{{count}} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥'
    },
    future: {
      singularNominative: '—á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—É',
      singularGenitive: '—á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—ã',
      pluralGenitive: '—á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç'
    }
  }),
  aboutXHours: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–æ–∫–æ–ª–æ {{count}} —á–∞—Å–∞',
      singularGenitive: '–æ–∫–æ–ª–æ {{count}} —á–∞—Å–æ–≤',
      pluralGenitive: '–æ–∫–æ–ª–æ {{count}} —á–∞—Å–æ–≤'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} —á–∞—Å',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} —á–∞—Å–∞',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} —á–∞—Å–æ–≤'
    }
  }),
  xHours: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —á–∞—Å',
      singularGenitive: '{{count}} —á–∞—Å–∞',
      pluralGenitive: '{{count}} —á–∞—Å–æ–≤'
    }
  }),
  xDays: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –¥–µ–Ω—å',
      singularGenitive: '{{count}} –¥–Ω—è',
      pluralGenitive: '{{count}} –¥–Ω–µ–π'
    }
  }),
  aboutXWeeks: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–æ–∫–æ–ª–æ {{count}} –Ω–µ–¥–µ–ª–∏',
      singularGenitive: '–æ–∫–æ–ª–æ {{count}} –Ω–µ–¥–µ–ª—å',
      pluralGenitive: '–æ–∫–æ–ª–æ {{count}} –Ω–µ–¥–µ–ª—å'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –Ω–µ–¥–µ–ª—é',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –Ω–µ–¥–µ–ª–∏',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –Ω–µ–¥–µ–ª—å'
    }
  }),
  xWeeks: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –Ω–µ–¥–µ–ª—è',
      singularGenitive: '{{count}} –Ω–µ–¥–µ–ª–∏',
      pluralGenitive: '{{count}} –Ω–µ–¥–µ–ª—å'
    }
  }),
  aboutXMonths: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–æ–∫–æ–ª–æ {{count}} –º–µ—Å—è—Ü–∞',
      singularGenitive: '–æ–∫–æ–ª–æ {{count}} –º–µ—Å—è—Ü–µ–≤',
      pluralGenitive: '–æ–∫–æ–ª–æ {{count}} –º–µ—Å—è—Ü–µ–≤'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –º–µ—Å—è—Ü',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –º–µ—Å—è—Ü–∞',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –º–µ—Å—è—Ü–µ–≤'
    }
  }),
  xMonths: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º–µ—Å—è—Ü',
      singularGenitive: '{{count}} –º–µ—Å—è—Ü–∞',
      pluralGenitive: '{{count}} –º–µ—Å—è—Ü–µ–≤'
    }
  }),
  aboutXYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–æ–∫–æ–ª–æ {{count}} –≥–æ–¥–∞',
      singularGenitive: '–æ–∫–æ–ª–æ {{count}} –ª–µ—Ç',
      pluralGenitive: '–æ–∫–æ–ª–æ {{count}} –ª–µ—Ç'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥–∞',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –ª–µ—Ç'
    }
  }),
  xYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –≥–æ–¥',
      singularGenitive: '{{count}} –≥–æ–¥–∞',
      pluralGenitive: '{{count}} –ª–µ—Ç'
    }
  }),
  overXYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–æ–ª—å—à–µ {{count}} –≥–æ–¥–∞',
      singularGenitive: '–±–æ–ª—å—à–µ {{count}} –ª–µ—Ç',
      pluralGenitive: '–±–æ–ª—å—à–µ {{count}} –ª–µ—Ç'
    },
    future: {
      singularNominative: '–±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥–∞',
      pluralGenitive: '–±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –ª–µ—Ç'
    }
  }),
  almostXYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–ø–æ—á—Ç–∏ {{count}} –≥–æ–¥',
      singularGenitive: '–ø–æ—á—Ç–∏ {{count}} –≥–æ–¥–∞',
      pluralGenitive: '–ø–æ—á—Ç–∏ {{count}} –ª–µ—Ç'
    },
    future: {
      singularNominative: '–ø–æ—á—Ç–∏ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥',
      singularGenitive: '–ø–æ—á—Ç–∏ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥–∞',
      pluralGenitive: '–ø–æ—á—Ç–∏ —á–µ—Ä–µ–∑ {{count}} –ª–µ—Ç'
    }
  })
};
var ru_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  return ru_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const ru_lib_formatDistance = (ru_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/formatLong/index.js

var ru_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y '–≥.'",
  long: "d MMMM y '–≥.'",
  medium: "d MMM y '–≥.'",
  short: 'dd.MM.y'
};
var ru_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var ru_lib_formatLong_dateTimeFormats = {
  any: '{{date}}, {{time}}'
};
var ru_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ru_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ru_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ru_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const ru_lib_formatLong = (ru_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/formatRelative/index.js

var ru_lib_formatRelative_accusativeWeekdays = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É'];
function ru_lib_formatRelative_lastWeek(day) {
  var weekday = ru_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
      return "'–≤ –ø—Ä–æ—à–ª–æ–µ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
      return "'–≤ –ø—Ä–æ—à–ª—ã–π " + weekday + " –≤' p";
    case 3:
    case 5:
    case 6:
      return "'–≤ –ø—Ä–æ—à–ª—É—é " + weekday + " –≤' p";
  }
}
function ru_lib_formatRelative_thisWeek(day) {
  var weekday = ru_lib_formatRelative_accusativeWeekdays[day];
  if (day === 2 /* Tue */) {
    return "'–≤–æ " + weekday + " –≤' p";
  } else {
    return "'–≤ " + weekday + " –≤' p";
  }
}
function ru_lib_formatRelative_nextWeek(day) {
  var weekday = ru_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
      return "'–≤ —Å–ª–µ–¥—É—é—â–µ–µ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
      return "'–≤ —Å–ª–µ–¥—É—é—â–∏–π " + weekday + " –≤' p";
    case 3:
    case 5:
    case 6:
      return "'–≤ —Å–ª–µ–¥—É—é—â—É—é " + weekday + " –≤' p";
  }
}
var ru_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return ru_lib_formatRelative_thisWeek(day);
    } else {
      return ru_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'–≤—á–µ—Ä–∞ –≤' p",
  today: "'—Å–µ–≥–æ–¥–Ω—è –≤' p",
  tomorrow: "'–∑–∞–≤—Ç—Ä–∞ –≤' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return ru_lib_formatRelative_thisWeek(day);
    } else {
      return ru_lib_formatRelative_nextWeek(day);
    }
  },
  other: 'P'
};
var ru_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = ru_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const ru_lib_formatRelative = (ru_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/localize/index.js

var ru_lib_localize_eraValues = {
  narrow: ['–¥–æ –Ω.—ç.', '–Ω.—ç.'],
  abbreviated: ['–¥–æ –Ω. —ç.', '–Ω. —ç.'],
  wide: ['–¥–æ –Ω–∞—à–µ–π —ç—Ä—ã', '–Ω–∞—à–µ–π —ç—Ä—ã']
};
var ru_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-–π –∫–≤.', '2-–π –∫–≤.', '3-–π –∫–≤.', '4-–π –∫–≤.'],
  wide: ['1-–π –∫–≤–∞—Ä—Ç–∞–ª', '2-–π –∫–≤–∞—Ä—Ç–∞–ª', '3-–π –∫–≤–∞—Ä—Ç–∞–ª', '4-–π –∫–≤–∞—Ä—Ç–∞–ª']
};
var ru_lib_localize_monthValues = {
  narrow: ['–Ø', '–§', '–ú', '–ê', '–ú', '–ò', '–ò', '–ê', '–°', '–û', '–ù', '–î'],
  abbreviated: ['—è–Ω–≤.', '—Ñ–µ–≤.', '–º–∞—Ä—Ç', '–∞–ø—Ä.', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥.', '—Å–µ–Ω—Ç.', '–æ–∫—Ç.', '–Ω–æ—è–±.', '–¥–µ–∫.'],
  wide: ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
};
var ru_lib_localize_formattingMonthValues = {
  narrow: ['–Ø', '–§', '–ú', '–ê', '–ú', '–ò', '–ò', '–ê', '–°', '–û', '–ù', '–î'],
  abbreviated: ['—è–Ω–≤.', '—Ñ–µ–≤.', '–º–∞—Ä.', '–∞–ø—Ä.', '–º–∞—è', '–∏—é–Ω.', '–∏—é–ª.', '–∞–≤–≥.', '—Å–µ–Ω—Ç.', '–æ–∫—Ç.', '–Ω–æ—è–±.', '–¥–µ–∫.'],
  wide: ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
};
var ru_lib_localize_dayValues = {
  narrow: ['–í', '–ü', '–í', '–°', '–ß', '–ü', '–°'],
  short: ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'],
  abbreviated: ['–≤—Å–∫', '–ø–Ω–¥', '–≤—Ç—Ä', '—Å—Ä–¥', '—á—Ç–≤', '–ø—Ç–Ω', '—Å—É–±'],
  wide: ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']
};
var ru_lib_localize_dayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ–ª–Ω.',
    noon: '–ø–æ–ª–¥.',
    morning: '—É—Ç—Ä–æ',
    afternoon: '–¥–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—å'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ–ª–Ω.',
    noon: '–ø–æ–ª–¥.',
    morning: '—É—Ç—Ä–æ',
    afternoon: '–¥–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—å'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ–ª–Ω–æ—á—å',
    noon: '–ø–æ–ª–¥–µ–Ω—å',
    morning: '—É—Ç—Ä–æ',
    afternoon: '–¥–µ–Ω—å',
    evening: '–≤–µ—á–µ—Ä',
    night: '–Ω–æ—á—å'
  }
};
var ru_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ–ª–Ω.',
    noon: '–ø–æ–ª–¥.',
    morning: '—É—Ç—Ä–∞',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á–∏'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ–ª–Ω.',
    noon: '–ø–æ–ª–¥.',
    morning: '—É—Ç—Ä–∞',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á–∏'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø–æ–ª–Ω–æ—á—å',
    noon: '–ø–æ–ª–¥–µ–Ω—å',
    morning: '—É—Ç—Ä–∞',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á–µ—Ä–∞',
    night: '–Ω–æ—á–∏'
  }
};
var ru_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var suffix;
  if (unit === 'date') {
    suffix = '-–µ';
  } else if (unit === 'week' || unit === 'minute' || unit === 'second') {
    suffix = '-—è';
  } else {
    suffix = '-–π';
  }
  return number + suffix;
};
var ru_lib_localize_localize = {
  ordinalNumber: ru_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: ru_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_dayPeriodValues,
    defaultWidth: 'any',
    formattingValues: ru_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ru_lib_localize = (ru_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/match/index.js


var ru_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(–µ|—è|–π|–æ–µ|—å–µ|–∞—è|—å—è|—ã–π|–æ–π|–∏–π|—ã–π))?/i;
var ru_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ru_lib_match_matchEraPatterns = {
  narrow: /^((–¥–æ )?–Ω\.?\s?—ç\.?)/i,
  abbreviated: /^((–¥–æ )?–Ω\.?\s?—ç\.?)/i,
  wide: /^(–¥–æ –Ω–∞—à–µ–π —ç—Ä—ã|–Ω–∞—à–µ–π —ç—Ä—ã|–Ω–∞—à–∞ —ç—Ä–∞)/i
};
var ru_lib_match_parseEraPatterns = {
  any: [/^–¥/i, /^–Ω/i]
};
var ru_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[—ã–æ–∏]?–π?)? –∫–≤.?/i,
  wide: /^[1234](-?[—ã–æ–∏]?–π?)? –∫–≤–∞—Ä—Ç–∞–ª/i
};
var ru_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ru_lib_match_matchMonthPatterns = {
  narrow: /^[—è—Ñ–º–∞–∏—Å–æ–Ω–¥]/i,
  abbreviated: /^(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä—Ç?|–∞–ø—Ä|–º–∞[–π—è]|–∏—é–Ω[—å—è]?|–∏—é–ª[—å—è]?|–∞–≤–≥|—Å–µ–Ω—Ç?|–æ–∫—Ç|–Ω–æ—è–±?|–¥–µ–∫)\.?/i,
  wide: /^(—è–Ω–≤–∞—Ä[—å—è]|—Ñ–µ–≤—Ä–∞–ª[—å—è]|–º–∞—Ä—Ç–∞?|–∞–ø—Ä–µ–ª[—å—è]|–º–∞[–π—è]|–∏—é–Ω[—å—è]|–∏—é–ª[—å—è]|–∞–≤–≥—É—Å—Ç–∞?|—Å–µ–Ω—Ç—è–±—Ä[—å—è]|–æ–∫—Ç—è–±—Ä[—å—è]|–æ–∫—Ç—è–±—Ä[—å—è]|–Ω–æ—è–±—Ä[—å—è]|–¥–µ–∫–∞–±—Ä[—å—è])/i
};
var ru_lib_match_parseMonthPatterns = {
  narrow: [/^—è/i, /^—Ñ/i, /^–º/i, /^–∞/i, /^–º/i, /^–∏/i, /^–∏/i, /^–∞/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^—è/i],
  any: [/^—è/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞[–π—è]/i, /^–∏—é–Ω/i, /^–∏—é–ª/i, /^–∞–≤/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^–¥/i]
};
var ru_lib_match_matchDayPatterns = {
  narrow: /^[–≤–ø—Å—á]/i,
  short: /^(–≤—Å|–≤–æ|–ø–Ω|–ø–æ|–≤—Ç|—Å—Ä|—á—Ç|—á–µ|–ø—Ç|–ø—è|—Å–±|—Å—É)\.?/i,
  abbreviated: /^(–≤—Å–∫|–≤–æ—Å|–ø–Ω–¥|–ø–æ–Ω|–≤—Ç—Ä|–≤—Ç–æ|—Å—Ä–¥|—Å—Ä–µ|—á—Ç–≤|—á–µ—Ç|–ø—Ç–Ω|–ø—è—Ç|—Å—É–±).?/i,
  wide: /^(–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å[–µ—è]|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞?|–≤—Ç–æ—Ä–Ω–∏–∫–∞?|—Å—Ä–µ–¥[–∞—ã]|—á–µ—Ç–≤–µ—Ä–≥–∞?|–ø—è—Ç–Ω–∏—Ü[–∞—ã]|—Å—É–±–±–æ—Ç[–∞—ã])/i
};
var ru_lib_match_parseDayPatterns = {
  narrow: [/^–≤/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
  any: [/^–≤[–æ—Å]/i, /^–ø[–æ–Ω]/i, /^–≤/i, /^—Å—Ä/i, /^—á/i, /^–ø[—è—Ç]/i, /^—Å[—É–±]/i]
};
var ru_lib_match_matchDayPeriodPatterns = {
  narrow: /^([–¥–ø]–ø|–ø–æ–ª–Ω\.?|–ø–æ–ª–¥\.?|—É—Ç—Ä[–æ–∞]|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á[—å–∏])/i,
  abbreviated: /^([–¥–ø]–ø|–ø–æ–ª–Ω\.?|–ø–æ–ª–¥\.?|—É—Ç—Ä[–æ–∞]|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á[—å–∏])/i,
  wide: /^([–¥–ø]–ø|–ø–æ–ª–Ω–æ—á—å|–ø–æ–ª–¥–µ–Ω—å|—É—Ç—Ä[–æ–∞]|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á–µ—Ä–∞?|–Ω–æ—á[—å–∏])/i
};
var ru_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–¥–ø/i,
    pm: /^–ø–ø/i,
    midnight: /^–ø–æ–ª–Ω/i,
    noon: /^–ø–æ–ª–¥/i,
    morning: /^—É/i,
    afternoon: /^–¥[–µ–Ω]/i,
    evening: /^–≤/i,
    night: /^–Ω/i
  }
};
var ru_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ru_lib_match_matchOrdinalNumberPattern,
    parsePattern: ru_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ru_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ru_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ru_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ru_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ru_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ru_lib_match = (ru_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Russian locale.
 * @language Russian
 * @iso-639-2 rus
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var ru_locale = {
  code: 'ru',
  formatDistance: ru_lib_formatDistance,
  formatLong: ru_lib_formatLong,
  formatRelative: ru_lib_formatRelative,
  localize: ru_lib_localize,
  match: ru_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ru = (ru_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/formatDistance/index.js
function formatDistance_declensionGroup(scheme, count) {
  if (count === 1 && scheme.one) {
    return scheme.one;
  }
  if (count >= 2 && count <= 4 && scheme.twoFour) {
    return scheme.twoFour;
  }

  // if count === null || count === 0 || count >= 5
  return scheme.other;
}
function sk_lib_formatDistance_declension(scheme, count, time) {
  var group = formatDistance_declensionGroup(scheme, count);
  var finalText = group[time];
  return finalText.replace('{{count}}', String(count));
}
function extractPreposition(token) {
  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {
    return !!token.match(new RegExp('^' + preposition));
  });
  return result[0];
}
function prefixPreposition(preposition) {
  var translation = '';
  if (preposition === 'almost') {
    translation = 'takmer';
  }
  if (preposition === 'about') {
    translation = 'pribli≈æne';
  }
  return translation.length > 0 ? translation + ' ' : '';
}
function suffixPreposition(preposition) {
  var translation = '';
  if (preposition === 'lessThan') {
    translation = 'menej ne≈æ';
  }
  if (preposition === 'over') {
    translation = 'viac ne≈æ';
  }
  return translation.length > 0 ? translation + ' ' : '';
}
function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}
var sk_lib_formatDistance_formatDistanceLocale = {
  xSeconds: {
    one: {
      present: 'sekunda',
      past: 'sekundou',
      future: 'sekundu'
    },
    twoFour: {
      present: '{{count}} sekundy',
      past: '{{count}} sekundami',
      future: '{{count}} sekundy'
    },
    other: {
      present: '{{count}} sek√∫nd',
      past: '{{count}} sekundami',
      future: '{{count}} sek√∫nd'
    }
  },
  halfAMinute: {
    other: {
      present: 'pol min√∫ty',
      past: 'pol min√∫tou',
      future: 'pol min√∫ty'
    }
  },
  xMinutes: {
    one: {
      present: 'min√∫ta',
      past: 'min√∫tou',
      future: 'min√∫tu'
    },
    twoFour: {
      present: '{{count}} min√∫ty',
      past: '{{count}} min√∫tami',
      future: '{{count}} min√∫ty'
    },
    other: {
      present: '{{count}} min√∫t',
      past: '{{count}} min√∫tami',
      future: '{{count}} min√∫t'
    }
  },
  xHours: {
    one: {
      present: 'hodina',
      past: 'hodinou',
      future: 'hodinu'
    },
    twoFour: {
      present: '{{count}} hodiny',
      past: '{{count}} hodinami',
      future: '{{count}} hodiny'
    },
    other: {
      present: '{{count}} hod√≠n',
      past: '{{count}} hodinami',
      future: '{{count}} hod√≠n'
    }
  },
  xDays: {
    one: {
      present: 'de≈à',
      past: 'd≈àom',
      future: 'de≈à'
    },
    twoFour: {
      present: '{{count}} dni',
      past: '{{count}} d≈àami',
      future: '{{count}} dni'
    },
    other: {
      present: '{{count}} dn√≠',
      past: '{{count}} d≈àami',
      future: '{{count}} dn√≠'
    }
  },
  xWeeks: {
    one: {
      present: 't√Ω≈æde≈à',
      past: 't√Ω≈æd≈àom',
      future: 't√Ω≈æde≈à'
    },
    twoFour: {
      present: '{{count}} t√Ω≈ædne',
      past: '{{count}} t√Ω≈æd≈àami',
      future: '{{count}} t√Ω≈ædne'
    },
    other: {
      present: '{{count}} t√Ω≈æd≈àov',
      past: '{{count}} t√Ω≈æd≈àami',
      future: '{{count}} t√Ω≈æd≈àov'
    }
  },
  xMonths: {
    one: {
      present: 'mesiac',
      past: 'mesiacom',
      future: 'mesiac'
    },
    twoFour: {
      present: '{{count}} mesiace',
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiace'
    },
    other: {
      present: '{{count}} mesiacov',
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiacov'
    }
  },
  xYears: {
    one: {
      present: 'rok',
      past: 'rokom',
      future: 'rok'
    },
    twoFour: {
      present: '{{count}} roky',
      past: '{{count}} rokmi',
      future: '{{count}} roky'
    },
    other: {
      present: '{{count}} rokov',
      past: '{{count}} rokmi',
      future: '{{count}} rokov'
    }
  }
};
var sk_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var preposition = extractPreposition(token) || '';
  var key = lowercaseFirstLetter(token.substring(preposition.length));
  var scheme = sk_lib_formatDistance_formatDistanceLocale[key];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return prefixPreposition(preposition) + suffixPreposition(preposition) + sk_lib_formatDistance_declension(scheme, count, 'present');
  }
  if (options.comparison && options.comparison > 0) {
    return prefixPreposition(preposition) + 'o ' + suffixPreposition(preposition) + sk_lib_formatDistance_declension(scheme, count, 'future');
  } else {
    return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + sk_lib_formatDistance_declension(scheme, count, 'past');
  }
};
/* harmony default export */ const sk_lib_formatDistance = (sk_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/formatLong/index.js
 // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1986
var sk_lib_formatLong_dateFormats = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. M. y',
  short: 'd. M. y'
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#2149
var sk_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1994
var sk_lib_formatLong_dateTimeFormats = {
  full: '{{date}}, {{time}}',
  long: '{{date}}, {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}} {{time}}'
};
var sk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sk_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sk_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sk_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const sk_lib_formatLong = (sk_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/formatRelative/index.js

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
var sk_lib_formatRelative_accusativeWeekdays = ['nedeƒæu', 'pondelok', 'utorok', 'stredu', '≈°tvrtok', 'piatok', 'sobotu'];
function sk_lib_formatRelative_lastWeek(day) {
  var weekday = sk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0: /* Sun */
    case 3: /* Wed */
    case 6 /* Sat */:
      return "'minul√∫ " + weekday + " o' p";
    default:
      return "'minul√Ω' eeee 'o' p";
  }
}
function sk_lib_formatRelative_thisWeek(day) {
  var weekday = sk_lib_formatRelative_accusativeWeekdays[day];
  if (day === 4 /* Thu */) {
    return "'vo' eeee 'o' p";
  } else {
    return "'v " + weekday + " o' p";
  }
}
function sk_lib_formatRelative_nextWeek(day) {
  var weekday = sk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0: /* Sun */
    case 4: /* Wed */
    case 6 /* Sat */:
      return "'bud√∫cu " + weekday + " o' p";
    default:
      return "'bud√∫ci' eeee 'o' p";
  }
}
var sk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return sk_lib_formatRelative_thisWeek(day);
    } else {
      return sk_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'vƒçera o' p",
  today: "'dnes o' p",
  tomorrow: "'zajtra o' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return sk_lib_formatRelative_thisWeek(day);
    } else {
      return sk_lib_formatRelative_nextWeek(day);
    }
  },
  other: 'P'
};
var sk_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = sk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const sk_lib_formatRelative = (sk_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/localize/index.js
 // https://www.unicode.org/cldr/charts/32/summary/sk.html#1772
var sk_lib_localize_eraValues = {
  narrow: ['pred Kr.', 'po Kr.'],
  abbreviated: ['pred Kr.', 'po Kr.'],
  wide: ['pred Kristom', 'po Kristovi']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1780
var sk_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. ≈°tvr≈•rok', '2. ≈°tvr≈•rok', '3. ≈°tvr≈•rok', '4. ≈°tvr≈•rok']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1804
var sk_lib_localize_monthValues = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'm√°j', 'j√∫n', 'j√∫l', 'aug', 'sep', 'okt', 'nov', 'dec'],
  wide: ['janu√°r', 'febru√°r', 'marec', 'apr√≠l', 'm√°j', 'j√∫n', 'j√∫l', 'august', 'september', 'okt√≥ber', 'november', 'december']
};
var sk_lib_localize_formattingMonthValues = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'm√°j', 'j√∫n', 'j√∫l', 'aug', 'sep', 'okt', 'nov', 'dec'],
  wide: ['janu√°ra', 'febru√°ra', 'marca', 'apr√≠la', 'm√°ja', 'j√∫na', 'j√∫la', 'augusta', 'septembra', 'okt√≥bra', 'novembra', 'decembra']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1876
var sk_lib_localize_dayValues = {
  narrow: ['n', 'p', 'u', 's', '≈°', 'p', 's'],
  short: ['ne', 'po', 'ut', 'st', '≈°t', 'pi', 'so'],
  abbreviated: ['ne', 'po', 'ut', 'st', '≈°t', 'pi', 'so'],
  wide: ['nedeƒæa', 'pondelok', 'utorok', 'streda', '≈°tvrtok', 'piatok', 'sobota']
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1932
var sk_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'poln.',
    noon: 'pol.',
    morning: 'r√°no',
    afternoon: 'pop.',
    evening: 'veƒç.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'poln.',
    noon: 'pol.',
    morning: 'r√°no',
    afternoon: 'popol.',
    evening: 'veƒçer',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'polnoc',
    noon: 'poludnie',
    morning: 'r√°no',
    afternoon: 'popoludnie',
    evening: 'veƒçer',
    night: 'noc'
  }
};
var sk_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o poln.',
    noon: 'nap.',
    morning: 'r√°no',
    afternoon: 'pop.',
    evening: 'veƒç.',
    night: 'v n.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o poln.',
    noon: 'napol.',
    morning: 'r√°no',
    afternoon: 'popol.',
    evening: 'veƒçer',
    night: 'v noci'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o polnoci',
    noon: 'napoludnie',
    morning: 'r√°no',
    afternoon: 'popoludn√≠',
    evening: 'veƒçer',
    night: 'v noci'
  }
};
var sk_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var sk_lib_localize_localize = {
  ordinalNumber: sk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: sk_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: sk_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const sk_lib_localize = (sk_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/match/index.js


var sk_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var sk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sk_lib_match_matchEraPatterns = {
  narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(pred Kristom|pred na[≈°s][√≠i]m letopo[ƒçc]tom|po Kristovi|n[√°a][≈°s]ho letopo[ƒçc]tu)/i
};
var sk_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|n)/i]
};
var sk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\. [≈°s]tvr[≈•t]rok/i
};
var sk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sk_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|m[√°a]j|j[√∫u]n|j[√∫u]l|aug|sep|okt|nov|dec)/i,
  wide: /^(janu[√°a]ra?|febru[√°a]ra?|(marec|marca)|apr[√≠i]la?|m[√°a]ja?|j[√∫u]na?|j[√∫u]la?|augusta?|(september|septembra)|(okt[√≥o]ber|okt[√≥o]bra)|(november|novembra)|(december|decembra))/i
};
var sk_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^m[√°a]j/i, /^j[√∫u]n/i, /^j[√∫u]l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sk_lib_match_matchDayPatterns = {
  narrow: /^[npus≈°p]/i,
  short: /^(ne|po|ut|st|≈°t|pi|so)/i,
  abbreviated: /^(ne|po|ut|st|≈°t|pi|so)/i,
  wide: /^(nede[ƒæl]a|pondelok|utorok|streda|[≈°s]tvrtok|piatok|sobota])/i
};
var sk_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^≈°/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(≈°t|stv)/i, /^pi/i, /^so/i]
};
var sk_lib_match_matchDayPeriodPatterns = {
  narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[√°a]no|pop\.?|ve[ƒçc]\.?|(v n\.?|noc))/i,
  abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[√°a]no|pop\.?|ve[ƒçc]er|(v )?noci?)/i,
  any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[√°a]no|popoludn(ie|√≠|i)|ve[ƒçc]er|(v )?noci?)/i
};
var sk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /poln/i,
    noon: /^(nap|(na)?pol(\.|u))/i,
    morning: /^r[√°a]no/i,
    afternoon: /^pop/i,
    evening: /^ve[ƒçc]/i,
    night: /^(noc|v n\.)/i
  }
};
var sk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sk_lib_match_matchOrdinalNumberPattern,
    parsePattern: sk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sk_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sk_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sk_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sk_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: sk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const sk_lib_match = (sk_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Slovak locale.
 * @language Slovak
 * @iso-639-2 slk
 * @author Marek Suscak [@mareksuscak]{@link https://github.com/mareksuscak}
 */
var sk_locale = {
  code: 'sk',
  formatDistance: sk_lib_formatDistance,
  formatLong: sk_lib_formatLong,
  formatRelative: sk_lib_formatRelative,
  localize: sk_lib_localize,
  match: sk_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const sk = (sk_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/formatDistance/index.js
function isPluralType(val) {
  return val.one !== undefined;
}
var sl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    present: {
      one: 'manj kot {{count}} sekunda',
      two: 'manj kot {{count}} sekundi',
      few: 'manj kot {{count}} sekunde',
      other: 'manj kot {{count}} sekund'
    },
    past: {
      one: 'manj kot {{count}} sekundo',
      two: 'manj kot {{count}} sekundama',
      few: 'manj kot {{count}} sekundami',
      other: 'manj kot {{count}} sekundami'
    },
    future: {
      one: 'manj kot {{count}} sekundo',
      two: 'manj kot {{count}} sekundi',
      few: 'manj kot {{count}} sekunde',
      other: 'manj kot {{count}} sekund'
    }
  },
  xSeconds: {
    present: {
      one: '{{count}} sekunda',
      two: '{{count}} sekundi',
      few: '{{count}} sekunde',
      other: '{{count}} sekund'
    },
    past: {
      one: '{{count}} sekundo',
      two: '{{count}} sekundama',
      few: '{{count}} sekundami',
      other: '{{count}} sekundami'
    },
    future: {
      one: '{{count}} sekundo',
      two: '{{count}} sekundi',
      few: '{{count}} sekunde',
      other: '{{count}} sekund'
    }
  },
  halfAMinute: 'pol minute',
  lessThanXMinutes: {
    present: {
      one: 'manj kot {{count}} minuta',
      two: 'manj kot {{count}} minuti',
      few: 'manj kot {{count}} minute',
      other: 'manj kot {{count}} minut'
    },
    past: {
      one: 'manj kot {{count}} minuto',
      two: 'manj kot {{count}} minutama',
      few: 'manj kot {{count}} minutami',
      other: 'manj kot {{count}} minutami'
    },
    future: {
      one: 'manj kot {{count}} minuto',
      two: 'manj kot {{count}} minuti',
      few: 'manj kot {{count}} minute',
      other: 'manj kot {{count}} minut'
    }
  },
  xMinutes: {
    present: {
      one: '{{count}} minuta',
      two: '{{count}} minuti',
      few: '{{count}} minute',
      other: '{{count}} minut'
    },
    past: {
      one: '{{count}} minuto',
      two: '{{count}} minutama',
      few: '{{count}} minutami',
      other: '{{count}} minutami'
    },
    future: {
      one: '{{count}} minuto',
      two: '{{count}} minuti',
      few: '{{count}} minute',
      other: '{{count}} minut'
    }
  },
  aboutXHours: {
    present: {
      one: 'pribli≈æno {{count}} ura',
      two: 'pribli≈æno {{count}} uri',
      few: 'pribli≈æno {{count}} ure',
      other: 'pribli≈æno {{count}} ur'
    },
    past: {
      one: 'pribli≈æno {{count}} uro',
      two: 'pribli≈æno {{count}} urama',
      few: 'pribli≈æno {{count}} urami',
      other: 'pribli≈æno {{count}} urami'
    },
    future: {
      one: 'pribli≈æno {{count}} uro',
      two: 'pribli≈æno {{count}} uri',
      few: 'pribli≈æno {{count}} ure',
      other: 'pribli≈æno {{count}} ur'
    }
  },
  xHours: {
    present: {
      one: '{{count}} ura',
      two: '{{count}} uri',
      few: '{{count}} ure',
      other: '{{count}} ur'
    },
    past: {
      one: '{{count}} uro',
      two: '{{count}} urama',
      few: '{{count}} urami',
      other: '{{count}} urami'
    },
    future: {
      one: '{{count}} uro',
      two: '{{count}} uri',
      few: '{{count}} ure',
      other: '{{count}} ur'
    }
  },
  xDays: {
    present: {
      one: '{{count}} dan',
      two: '{{count}} dni',
      few: '{{count}} dni',
      other: '{{count}} dni'
    },
    past: {
      one: '{{count}} dnem',
      two: '{{count}} dnevoma',
      few: '{{count}} dnevi',
      other: '{{count}} dnevi'
    },
    future: {
      one: '{{count}} dan',
      two: '{{count}} dni',
      few: '{{count}} dni',
      other: '{{count}} dni'
    }
  },
  // no tenses for weeks?
  aboutXWeeks: {
    one: 'pribli≈æno {{count}} teden',
    two: 'pribli≈æno {{count}} tedna',
    few: 'pribli≈æno {{count}} tedne',
    other: 'pribli≈æno {{count}} tednov'
  },
  // no tenses for weeks?
  xWeeks: {
    one: '{{count}} teden',
    two: '{{count}} tedna',
    few: '{{count}} tedne',
    other: '{{count}} tednov'
  },
  aboutXMonths: {
    present: {
      one: 'pribli≈æno {{count}} mesec',
      two: 'pribli≈æno {{count}} meseca',
      few: 'pribli≈æno {{count}} mesece',
      other: 'pribli≈æno {{count}} mesecev'
    },
    past: {
      one: 'pribli≈æno {{count}} mesecem',
      two: 'pribli≈æno {{count}} mesecema',
      few: 'pribli≈æno {{count}} meseci',
      other: 'pribli≈æno {{count}} meseci'
    },
    future: {
      one: 'pribli≈æno {{count}} mesec',
      two: 'pribli≈æno {{count}} meseca',
      few: 'pribli≈æno {{count}} mesece',
      other: 'pribli≈æno {{count}} mesecev'
    }
  },
  xMonths: {
    present: {
      one: '{{count}} mesec',
      two: '{{count}} meseca',
      few: '{{count}} meseci',
      other: '{{count}} mesecev'
    },
    past: {
      one: '{{count}} mesecem',
      two: '{{count}} mesecema',
      few: '{{count}} meseci',
      other: '{{count}} meseci'
    },
    future: {
      one: '{{count}} mesec',
      two: '{{count}} meseca',
      few: '{{count}} mesece',
      other: '{{count}} mesecev'
    }
  },
  aboutXYears: {
    present: {
      one: 'pribli≈æno {{count}} leto',
      two: 'pribli≈æno {{count}} leti',
      few: 'pribli≈æno {{count}} leta',
      other: 'pribli≈æno {{count}} let'
    },
    past: {
      one: 'pribli≈æno {{count}} letom',
      two: 'pribli≈æno {{count}} letoma',
      few: 'pribli≈æno {{count}} leti',
      other: 'pribli≈æno {{count}} leti'
    },
    future: {
      one: 'pribli≈æno {{count}} leto',
      two: 'pribli≈æno {{count}} leti',
      few: 'pribli≈æno {{count}} leta',
      other: 'pribli≈æno {{count}} let'
    }
  },
  xYears: {
    present: {
      one: '{{count}} leto',
      two: '{{count}} leti',
      few: '{{count}} leta',
      other: '{{count}} let'
    },
    past: {
      one: '{{count}} letom',
      two: '{{count}} letoma',
      few: '{{count}} leti',
      other: '{{count}} leti'
    },
    future: {
      one: '{{count}} leto',
      two: '{{count}} leti',
      few: '{{count}} leta',
      other: '{{count}} let'
    }
  },
  overXYears: {
    present: {
      one: 'veƒç kot {{count}} leto',
      two: 'veƒç kot {{count}} leti',
      few: 'veƒç kot {{count}} leta',
      other: 'veƒç kot {{count}} let'
    },
    past: {
      one: 'veƒç kot {{count}} letom',
      two: 'veƒç kot {{count}} letoma',
      few: 'veƒç kot {{count}} leti',
      other: 'veƒç kot {{count}} leti'
    },
    future: {
      one: 'veƒç kot {{count}} leto',
      two: 'veƒç kot {{count}} leti',
      few: 'veƒç kot {{count}} leta',
      other: 'veƒç kot {{count}} let'
    }
  },
  almostXYears: {
    present: {
      one: 'skoraj {{count}} leto',
      two: 'skoraj {{count}} leti',
      few: 'skoraj {{count}} leta',
      other: 'skoraj {{count}} let'
    },
    past: {
      one: 'skoraj {{count}} letom',
      two: 'skoraj {{count}} letoma',
      few: 'skoraj {{count}} leti',
      other: 'skoraj {{count}} leti'
    },
    future: {
      one: 'skoraj {{count}} leto',
      two: 'skoraj {{count}} leti',
      few: 'skoraj {{count}} leta',
      other: 'skoraj {{count}} let'
    }
  }
};
function getFormFromCount(count) {
  switch (count % 100) {
    case 1:
      return 'one';
    case 2:
      return 'two';
    case 3:
    case 4:
      return 'few';
    default:
      return 'other';
  }
}
var sl_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result = '';
  var tense = 'present';
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      tense = 'future';
      result = 'ƒçez ';
    } else {
      tense = 'past';
      result = 'pred ';
    }
  }
  var tokenValue = sl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result += tokenValue;
  } else {
    var form = getFormFromCount(count);
    if (isPluralType(tokenValue)) {
      result += tokenValue[form].replace('{{count}}', String(count));
    } else {
      result += tokenValue[tense][form].replace('{{count}}', String(count));
    }
  }
  return result;
};
/* harmony default export */ const sl_lib_formatDistance = (sl_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/formatLong/index.js

var sl_lib_formatLong_dateFormats = {
  full: 'EEEE, dd. MMMM y',
  long: 'dd. MMMM y',
  medium: 'd. MMM y',
  short: 'd. MM. yy'
};
var sl_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var sl_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var sl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sl_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sl_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sl_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const sl_lib_formatLong = (sl_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/formatRelative/index.js
var sl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'prej≈°njo nedeljo ob' p";
      case 3:
        return "'prej≈°njo sredo ob' p";
      case 6:
        return "'prej≈°njo soboto ob' p";
      default:
        return "'prej≈°nji' EEEE 'ob' p";
    }
  },
  yesterday: "'vƒçeraj ob' p",
  today: "'danes ob' p",
  tomorrow: "'jutri ob' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'naslednjo nedeljo ob' p";
      case 3:
        return "'naslednjo sredo ob' p";
      case 6:
        return "'naslednjo soboto ob' p";
      default:
        return "'naslednji' EEEE 'ob' p";
    }
  },
  other: 'P'
};
var sl_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = sl_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const sl_lib_formatRelative = (sl_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/localize/index.js

var sl_lib_localize_eraValues = {
  narrow: ['pr. n. ≈°t.', 'po n. ≈°t.'],
  abbreviated: ['pr. n. ≈°t.', 'po n. ≈°t.'],
  wide: ['pred na≈°im ≈°tetjem', 'po na≈°em ≈°tetju']
};
var sl_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. ƒçet.', '2. ƒçet.', '3. ƒçet.', '4. ƒçet.'],
  wide: ['1. ƒçetrtletje', '2. ƒçetrtletje', '3. ƒçetrtletje', '4. ƒçetrtletje']
};
var sl_lib_localize_monthValues = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januar', 'februar', 'marec', 'april', 'maj', 'junij', 'julij', 'avgust', 'september', 'oktober', 'november', 'december']
};
var sl_lib_localize_dayValues = {
  narrow: ['n', 'p', 't', 's', 'ƒç', 'p', 's'],
  short: ['ned.', 'pon.', 'tor.', 'sre.', 'ƒçet.', 'pet.', 'sob.'],
  abbreviated: ['ned.', 'pon.', 'tor.', 'sre.', 'ƒçet.', 'pet.', 'sob.'],
  wide: ['nedelja', 'ponedeljek', 'torek', 'sreda', 'ƒçetrtek', 'petek', 'sobota']
};
var sl_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'd',
    pm: 'p',
    midnight: '24.00',
    noon: '12.00',
    morning: 'j',
    afternoon: 'p',
    evening: 'v',
    night: 'n'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'poln.',
    noon: 'pold.',
    morning: 'jut.',
    afternoon: 'pop.',
    evening: 'veƒç.',
    night: 'noƒç'
  },
  wide: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'polnoƒç',
    noon: 'poldne',
    morning: 'jutro',
    afternoon: 'popoldne',
    evening: 'veƒçer',
    night: 'noƒç'
  }
};
var sl_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'd',
    pm: 'p',
    midnight: '24.00',
    noon: '12.00',
    morning: 'zj',
    afternoon: 'p',
    evening: 'zv',
    night: 'po'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'opoln.',
    noon: 'opold.',
    morning: 'zjut.',
    afternoon: 'pop.',
    evening: 'zveƒç.',
    night: 'ponoƒçi'
  },
  wide: {
    am: 'dop.',
    pm: 'pop.',
    midnight: 'opolnoƒçi',
    noon: 'opoldne',
    morning: 'zjutraj',
    afternoon: 'popoldan',
    evening: 'zveƒçer',
    night: 'ponoƒçi'
  }
};
var sl_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var sl_lib_localize_localize = {
  ordinalNumber: sl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: sl_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const sl_lib_localize = (sl_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/match/index.js


var sl_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var sl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sl_lib_match_matchEraPatterns = {
  abbreviated: /^(pr\. n\. ≈°t\.|po n\. ≈°t\.)/i,
  wide: /^(pred Kristusom|pred na[s≈°]im [s≈°]tetjem|po Kristusu|po na[s≈°]em [s≈°]tetju|na[s≈°]ega [s≈°]tetja)/i
};
var sl_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|na[s≈°]em)/i]
};
var sl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?[ƒçc]et\.?/i,
  wide: /^[1234]\. [ƒçc]etrtletje/i
};
var sl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sl_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
  wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
};
var sl_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  abbreviated: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i],
  wide: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sl_lib_match_matchDayPatterns = {
  narrow: /^[nptsƒçc]/i,
  short: /^(ned\.|pon\.|tor\.|sre\.|[cƒç]et\.|pet\.|sob\.)/i,
  abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cƒç]et\.|pet\.|sob\.)/i,
  wide: /^(nedelja|ponedeljek|torek|sreda|[cƒç]etrtek|petek|sobota)/i
};
var sl_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cƒç]/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cƒç]/i, /^pe/i, /^so/i]
};
var sl_lib_match_matchDayPeriodPatterns = {
  narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
  any: /^(dop\.|pop\.|o?poln(\.|o[cƒç]i?)|o?pold(\.|ne)|z?ve[cƒç](\.|er)|(po)?no[cƒç]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
};
var sl_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^d/i,
    pm: /^p/i,
    midnight: /^24/i,
    noon: /^12/i,
    morning: /^(z?j)/i,
    afternoon: /^p/i,
    evening: /^(z?v)/i,
    night: /^(n|po)/i
  },
  any: {
    am: /^dop\./i,
    pm: /^pop\./i,
    midnight: /^o?poln/i,
    noon: /^o?pold/i,
    morning: /j/i,
    afternoon: /^pop\./i,
    evening: /^z?ve/i,
    night: /(po)?no/i
  }
};
var sl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sl_lib_match_matchOrdinalNumberPattern,
    parsePattern: sl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sl_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sl_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sl_lib_match_parseMonthPatterns,
    defaultParseWidth: 'wide'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sl_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: sl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const sl_lib_match = (sl_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Slovenian locale.
 * @language Slovenian
 * @iso-639-2 slv
 * @author Adam Stradovnik [@Neoglyph]{@link https://github.com/Neoglyph}
 * @author Mato ≈Ωgajner [@mzgajner]{@link https://github.com/mzgajner}
 */
var sl_locale = {
  code: 'sl',
  formatDistance: sl_lib_formatDistance,
  formatLong: sl_lib_formatLong,
  formatRelative: sl_lib_formatRelative,
  localize: sl_lib_localize,
  match: sl_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sl = (sl_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/formatDistance/index.js
var sq_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'm√´ pak se nj√´ sekond√´',
    other: 'm√´ pak se {{count}} sekonda'
  },
  xSeconds: {
    one: '1 sekond√´',
    other: '{{count}} sekonda'
  },
  halfAMinute: 'gjys√´m minuti',
  lessThanXMinutes: {
    one: 'm√´ pak se nj√´ minute',
    other: 'm√´ pak se {{count}} minuta'
  },
  xMinutes: {
    one: '1 minut√´',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: 'rreth 1 or√´',
    other: 'rreth {{count}} or√´'
  },
  xHours: {
    one: '1 or√´',
    other: '{{count}} or√´'
  },
  xDays: {
    one: '1 dit√´',
    other: '{{count}} dit√´'
  },
  aboutXWeeks: {
    one: 'rreth 1 jav√´',
    other: 'rreth {{count}} jav√´'
  },
  xWeeks: {
    one: '1 jav√´',
    other: '{{count}} jav√´'
  },
  aboutXMonths: {
    one: 'rreth 1 muaj',
    other: 'rreth {{count}} muaj'
  },
  xMonths: {
    one: '1 muaj',
    other: '{{count}} muaj'
  },
  aboutXYears: {
    one: 'rreth 1 vit',
    other: 'rreth {{count}} vite'
  },
  xYears: {
    one: '1 vit',
    other: '{{count}} vite'
  },
  overXYears: {
    one: 'mbi 1 vit',
    other: 'mbi {{count}} vite'
  },
  almostXYears: {
    one: 'pothuajse 1 vit',
    other: 'pothuajse {{count}} vite'
  }
};
var sq_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = sq_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'n√´ ' + result;
    } else {
      return result + ' m√´ par√´';
    }
  }
  return result;
};
/* harmony default export */ const sq_lib_formatDistance = (sq_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/formatLong/index.js

var sq_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var sq_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var sq_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'n√´' {{time}}",
  long: "{{date}} 'n√´' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var sq_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sq_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sq_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sq_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const sq_lib_formatLong = (sq_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/formatRelative/index.js
var sq_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'t√´' eeee 'e shkuar n√´' p",
  yesterday: "'dje n√´' p",
  today: "'sot n√´' p",
  tomorrow: "'nes√´r n√´' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
var sq_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return sq_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const sq_lib_formatRelative = (sq_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/localize/index.js

var sq_lib_localize_eraValues = {
  narrow: ['P', 'M'],
  abbreviated: ['PK', 'MK'],
  wide: ['Para Krishtit', 'Mbas Krishtit']
};
var sq_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['4-mujori I', '4-mujori II', '4-mujori III', '4-mujori IV']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var sq_lib_localize_monthValues = {
  narrow: ['J', 'S', 'M', 'P', 'M', 'Q', 'K', 'G', 'S', 'T', 'N', 'D'],
  abbreviated: ['Jan', 'Shk', 'Mar', 'Pri', 'Maj', 'Qer', 'Kor', 'Gus', 'Sht', 'Tet', 'N√´n', 'Dhj'],
  wide: ['Janar', 'Shkurt', 'Mars', 'Prill', 'Maj', 'Qershor', 'Korrik', 'Gusht', 'Shtator', 'Tetor', 'N√´ntor', 'Dhjetor']
};
var sq_lib_localize_dayValues = {
  narrow: ['D', 'H', 'M', 'M', 'E', 'P', 'S'],
  short: ['Di', 'H√´', 'Ma', 'M√´', 'En', 'Pr', 'Sh'],
  abbreviated: ['Die', 'H√´n', 'Mar', 'M√´r', 'Enj', 'Pre', 'Sht'],
  wide: ['Diel√´', 'H√´n√´', 'Mart√´', 'M√´rkur√´', 'Enjte', 'Premte', 'Shtun√´']
};
var sq_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'p',
    pm: 'm',
    midnight: 'm',
    noon: 'd',
    morning: 'm√´ngjes',
    afternoon: 'dite',
    evening: 'mbr√´mje',
    night: 'nat√´'
  },
  abbreviated: {
    am: 'PD',
    pm: 'MD',
    midnight: 'mesn√´t√´',
    noon: 'drek',
    morning: 'm√´ngjes',
    afternoon: 'mbasdite',
    evening: 'mbr√´mje',
    night: 'nat√´'
  },
  wide: {
    am: 'p.d.',
    pm: 'm.d.',
    midnight: 'mesn√´t√´',
    noon: 'drek',
    morning: 'm√´ngjes',
    afternoon: 'mbasdite',
    evening: 'mbr√´mje',
    night: 'nat√´'
  }
};
var sq_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'p',
    pm: 'm',
    midnight: 'm',
    noon: 'd',
    morning: 'n√´ m√´ngjes',
    afternoon: 'n√´ mbasdite',
    evening: 'n√´ mbr√´mje',
    night: 'n√´ mesnat√´'
  },
  abbreviated: {
    am: 'PD',
    pm: 'MD',
    midnight: 'mesnat√´',
    noon: 'drek',
    morning: 'n√´ m√´ngjes',
    afternoon: 'n√´ mbasdite',
    evening: 'n√´ mbr√´mje',
    night: 'n√´ mesnat√´'
  },
  wide: {
    am: 'p.d.',
    pm: 'm.d.',
    midnight: 'mesnat√´',
    noon: 'drek',
    morning: 'n√´ m√´ngjes',
    afternoon: 'n√´ mbasdite',
    evening: 'n√´ mbr√´mje',
    night: 'n√´ mesnat√´'
  }
};
var sq_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === 'hour') return String(number);
  if (number === 1) return number + '-r√´';
  if (number === 4) return number + 't';
  return number + '-t√´';
};
var sq_lib_localize_localize = {
  ordinalNumber: sq_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: sq_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const sq_lib_localize = (sq_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/match/index.js


var sq_lib_match_matchOrdinalNumberPattern = /^(\d+)(-r√´|-t√´|t|)?/i;
var sq_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sq_lib_match_matchEraPatterns = {
  narrow: /^(p|m)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(para krishtit|mbas krishtit)/i
};
var sq_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(p|m)/i]
};
var sq_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]-mujori (i{1,3}|iv)/i
};
var sq_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sq_lib_match_matchMonthPatterns = {
  narrow: /^[jsmpqkftnd]/i,
  abbreviated: /^(jan|shk|mar|pri|maj|qer|kor|gus|sht|tet|n√´n|dhj)/i,
  wide: /^(janar|shkurt|mars|prill|maj|qershor|korrik|gusht|shtator|tetor|n√´ntor|dhjetor)/i
};
var sq_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^s/i, /^m/i, /^p/i, /^m/i, /^q/i, /^k/i, /^g/i, /^s/i, /^t/i, /^n/i, /^d/i],
  any: [/^ja/i, /^shk/i, /^mar/i, /^pri/i, /^maj/i, /^qer/i, /^kor/i, /^gu/i, /^sht/i, /^tet/i, /^n/i, /^d/i]
};
var sq_lib_match_matchDayPatterns = {
  narrow: /^[dhmeps]/i,
  short: /^(di|h√´|ma|m√´|en|pr|sh)/i,
  abbreviated: /^(die|h√´n|mar|m√´r|enj|pre|sht)/i,
  wide: /^(diel√´|h√´n√´|mart√´|m√´rkur√´|enjte|premte|shtun√´)/i
};
var sq_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^h/i, /^m/i, /^m/i, /^e/i, /^p/i, /^s/i],
  any: [/^d/i, /^h/i, /^ma/i, /^m√´/i, /^e/i, /^p/i, /^s/i]
};
var sq_lib_match_matchDayPeriodPatterns = {
  narrow: /^(p|m|me|n√´ (m√´ngjes|mbasdite|mbr√´mje|mesnat√´))/i,
  any: /^([pm]\.?\s?d\.?|drek|n√´ (m√´ngjes|mbasdite|mbr√´mje|mesnat√´))/i
};
var sq_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^p/i,
    pm: /^m/i,
    midnight: /^me/i,
    noon: /^dr/i,
    morning: /m√´ngjes/i,
    afternoon: /mbasdite/i,
    evening: /mbr√´mje/i,
    night: /nat√´/i
  }
};
var sq_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sq_lib_match_matchOrdinalNumberPattern,
    parsePattern: sq_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sq_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sq_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sq_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sq_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: sq_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const sq_lib_match = (sq_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Albanian locale.
 * @language Shqip
 * @iso-639-2 sqi
 * @author Ardit Dine [@arditdine]{@link https://github.com/arditdine}
 */
var sq_locale = {
  code: 'sq',
  formatDistance: sq_lib_formatDistance,
  formatLong: sq_lib_formatLong,
  formatRelative: sq_lib_formatRelative,
  localize: sq_lib_localize,
  match: sq_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sq = (sq_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/formatDistance/index.js
var sr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: '–º–∞—ö–µ –æ–¥ 1 —Å–µ–∫—É–Ω–¥–µ',
      withPrepositionAgo: '–º–∞—ö–µ –æ–¥ 1 —Å–µ–∫—É–Ω–¥–µ',
      withPrepositionIn: '–º–∞—ö–µ –æ–¥ 1 —Å–µ–∫—É–Ω–¥—É'
    },
    dual: '–º–∞—ö–µ –æ–¥ {{count}} —Å–µ–∫—É–Ω–¥–µ',
    other: '–º–∞—ö–µ –æ–¥ {{count}} —Å–µ–∫—É–Ω–¥–∏'
  },
  xSeconds: {
    one: {
      standalone: '1 —Å–µ–∫—É–Ω–¥–∞',
      withPrepositionAgo: '1 —Å–µ–∫—É–Ω–¥–µ',
      withPrepositionIn: '1 —Å–µ–∫—É–Ω–¥—É'
    },
    dual: '{{count}} —Å–µ–∫—É–Ω–¥–µ',
    other: '{{count}} —Å–µ–∫—É–Ω–¥–∏'
  },
  halfAMinute: '–ø–æ–ª–∞ –º–∏–Ω—É—Ç–µ',
  lessThanXMinutes: {
    one: {
      standalone: '–º–∞—ö–µ –æ–¥ 1 –º–∏–Ω—É—Ç–µ',
      withPrepositionAgo: '–º–∞—ö–µ –æ–¥ 1 –º–∏–Ω—É—Ç–µ',
      withPrepositionIn: '–º–∞—ö–µ –æ–¥ 1 –º–∏–Ω—É—Ç—É'
    },
    dual: '–º–∞—ö–µ –æ–¥ {{count}} –º–∏–Ω—É—Ç–µ',
    other: '–º–∞—ö–µ –æ–¥ {{count}} –º–∏–Ω—É—Ç–∞'
  },
  xMinutes: {
    one: {
      standalone: '1 –º–∏–Ω—É—Ç–∞',
      withPrepositionAgo: '1 –º–∏–Ω—É—Ç–µ',
      withPrepositionIn: '1 –º–∏–Ω—É—Ç—É'
    },
    dual: '{{count}} –º–∏–Ω—É—Ç–µ',
    other: '{{count}} –º–∏–Ω—É—Ç–∞'
  },
  aboutXHours: {
    one: {
      standalone: '–æ–∫–æ 1 —Å–∞—Ç',
      withPrepositionAgo: '–æ–∫–æ 1 —Å–∞—Ç',
      withPrepositionIn: '–æ–∫–æ 1 —Å–∞—Ç'
    },
    dual: '–æ–∫–æ {{count}} —Å–∞—Ç–∞',
    other: '–æ–∫–æ {{count}} —Å–∞—Ç–∏'
  },
  xHours: {
    one: {
      standalone: '1 —Å–∞—Ç',
      withPrepositionAgo: '1 —Å–∞—Ç',
      withPrepositionIn: '1 —Å–∞—Ç'
    },
    dual: '{{count}} —Å–∞—Ç–∞',
    other: '{{count}} —Å–∞—Ç–∏'
  },
  xDays: {
    one: {
      standalone: '1 –¥–∞–Ω',
      withPrepositionAgo: '1 –¥–∞–Ω',
      withPrepositionIn: '1 –¥–∞–Ω'
    },
    dual: '{{count}} –¥–∞–Ω–∞',
    other: '{{count}} –¥–∞–Ω–∞'
  },
  aboutXWeeks: {
    one: {
      standalone: '–æ–∫–æ 1 –Ω–µ–¥–µ—ô—É',
      withPrepositionAgo: '–æ–∫–æ 1 –Ω–µ–¥–µ—ô—É',
      withPrepositionIn: '–æ–∫–æ 1 –Ω–µ–¥–µ—ô—É'
    },
    dual: '–æ–∫–æ {{count}} –Ω–µ–¥–µ—ô–µ',
    other: '–æ–∫–æ {{count}} –Ω–µ–¥–µ—ô–µ'
  },
  xWeeks: {
    one: {
      standalone: '1 –Ω–µ–¥–µ—ô—É',
      withPrepositionAgo: '1 –Ω–µ–¥–µ—ô—É',
      withPrepositionIn: '1 –Ω–µ–¥–µ—ô—É'
    },
    dual: '{{count}} –Ω–µ–¥–µ—ô–µ',
    other: '{{count}} –Ω–µ–¥–µ—ô–µ'
  },
  aboutXMonths: {
    one: {
      standalone: '–æ–∫–æ 1 –º–µ—Å–µ—Ü',
      withPrepositionAgo: '–æ–∫–æ 1 –º–µ—Å–µ—Ü',
      withPrepositionIn: '–æ–∫–æ 1 –º–µ—Å–µ—Ü'
    },
    dual: '–æ–∫–æ {{count}} –º–µ—Å–µ—Ü–∞',
    other: '–æ–∫–æ {{count}} –º–µ—Å–µ—Ü–∏'
  },
  xMonths: {
    one: {
      standalone: '1 –º–µ—Å–µ—Ü',
      withPrepositionAgo: '1 –º–µ—Å–µ—Ü',
      withPrepositionIn: '1 –º–µ—Å–µ—Ü'
    },
    dual: '{{count}} –º–µ—Å–µ—Ü–∞',
    other: '{{count}} –º–µ—Å–µ—Ü–∏'
  },
  aboutXYears: {
    one: {
      standalone: '–æ–∫–æ 1 –≥–æ–¥–∏–Ω—É',
      withPrepositionAgo: '–æ–∫–æ 1 –≥–æ–¥–∏–Ω—É',
      withPrepositionIn: '–æ–∫–æ 1 –≥–æ–¥–∏–Ω—É'
    },
    dual: '–æ–∫–æ {{count}} –≥–æ–¥–∏–Ω–µ',
    other: '–æ–∫–æ {{count}} –≥–æ–¥–∏–Ω–∞'
  },
  xYears: {
    one: {
      standalone: '1 –≥–æ–¥–∏–Ω–∞',
      withPrepositionAgo: '1 –≥–æ–¥–∏–Ω–µ',
      withPrepositionIn: '1 –≥–æ–¥–∏–Ω—É'
    },
    dual: '{{count}} –≥–æ–¥–∏–Ω–µ',
    other: '{{count}} –≥–æ–¥–∏–Ω–∞'
  },
  overXYears: {
    one: {
      standalone: '–ø—Ä–µ–∫–æ 1 –≥–æ–¥–∏–Ω—É',
      withPrepositionAgo: '–ø—Ä–µ–∫–æ 1 –≥–æ–¥–∏–Ω—É',
      withPrepositionIn: '–ø—Ä–µ–∫–æ 1 –≥–æ–¥–∏–Ω—É'
    },
    dual: '–ø—Ä–µ–∫–æ {{count}} –≥–æ–¥–∏–Ω–µ',
    other: '–ø—Ä–µ–∫–æ {{count}} –≥–æ–¥–∏–Ω–∞'
  },
  almostXYears: {
    one: {
      standalone: '–≥–æ—Ç–æ–≤–æ 1 –≥–æ–¥–∏–Ω—É',
      withPrepositionAgo: '–≥–æ—Ç–æ–≤–æ 1 –≥–æ–¥–∏–Ω—É',
      withPrepositionIn: '–≥–æ—Ç–æ–≤–æ 1 –≥–æ–¥–∏–Ω—É'
    },
    dual: '–≥–æ—Ç–æ–≤–æ {{count}} –≥–æ–¥–∏–Ω–µ',
    other: '–≥–æ—Ç–æ–≤–æ {{count}} –≥–æ–¥–∏–Ω–∞'
  }
};
var sr_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = sr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '–∑–∞ ' + result;
    } else {
      return '–ø—Ä–µ ' + result;
    }
  }
  return result;
};
/* harmony default export */ const sr_lib_formatDistance = (sr_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/formatLong/index.js

var sr_lib_formatLong_dateFormats = {
  full: 'EEEE, d. MMMM yyyy.',
  long: 'd. MMMM yyyy.',
  medium: 'd. MMM yy.',
  short: 'dd. MM. yy.'
};
var sr_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var sr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '—É' {{time}}",
  long: "{{date}} '—É' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var sr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const sr_lib_formatLong = (sr_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/formatRelative/index.js
var sr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'–ø—Ä–æ—à–ª–µ –Ω–µ–¥–µ—ô–µ —É' p";
      case 3:
        return "'–ø—Ä–æ—à–ª–µ —Å—Ä–µ–¥–µ —É' p";
      case 6:
        return "'–ø—Ä–æ—à–ª–µ —Å—É–±–æ—Ç–µ —É' p";
      default:
        return "'–ø—Ä–æ—à–ª–∏' EEEE '—É' p";
    }
  },
  yesterday: "'—ò—É—á–µ —É' p",
  today: "'–¥–∞–Ω–∞—Å —É' p",
  tomorrow: "'—Å—É—Ç—Ä–∞ —É' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'—Å–ª–µ–¥–µ—õ–µ –Ω–µ–¥–µ—ô–µ —É' p";
      case 3:
        return "'—Å–ª–µ–¥–µ—õ—É —Å—Ä–µ–¥—É —É' p";
      case 6:
        return "'—Å–ª–µ–¥–µ—õ—É —Å—É–±–æ—Ç—É —É' p";
      default:
        return "'—Å–ª–µ–¥–µ—õ–∏' EEEE '—É' p";
    }
  },
  other: 'P'
};
var sr_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = sr_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const sr_lib_formatRelative = (sr_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/localize/index.js

var sr_lib_localize_eraValues = {
  narrow: ['–ø—Ä.–Ω.–µ.', '–ê–î'],
  abbreviated: ['–ø—Ä. –•—Ä.', '–ø–æ. –•—Ä.'],
  wide: ['–ü—Ä–µ –•—Ä–∏—Å—Ç–∞', '–ü–æ—Å–ª–µ –•—Ä–∏—Å—Ç–∞']
};
var sr_lib_localize_quarterValues = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. –∫–≤.', '2. –∫–≤.', '3. –∫–≤.', '4. –∫–≤.'],
  wide: ['1. –∫–≤–∞—Ä—Ç–∞–ª', '2. –∫–≤–∞—Ä—Ç–∞–ª', '3. –∫–≤–∞—Ä—Ç–∞–ª', '4. –∫–≤–∞—Ä—Ç–∞–ª']
};
var sr_lib_localize_monthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['—ò–∞–Ω', '—Ñ–µ–±', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—ò', '—ò—É–Ω', '—ò—É–ª', '–∞–≤–≥', '—Å–µ–ø', '–æ–∫—Ç', '–Ω–æ–≤', '–¥–µ—Ü'],
  wide: ['—ò–∞–Ω—É–∞—Ä', '—Ñ–µ–±—Ä—É–∞—Ä', '–º–∞—Ä—Ç', '–∞–ø—Ä–∏–ª', '–º–∞—ò', '—ò—É–Ω', '—ò—É–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–ø—Ç–µ–º–±–∞—Ä', '–æ–∫—Ç–æ–±–∞—Ä', '–Ω–æ–≤–µ–º–±–∞—Ä', '–¥–µ—Ü–µ–º–±–∞—Ä']
};
var sr_lib_localize_formattingMonthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['—ò–∞–Ω', '—Ñ–µ–±', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—ò', '—ò—É–Ω', '—ò—É–ª', '–∞–≤–≥', '—Å–µ–ø', '–æ–∫—Ç', '–Ω–æ–≤', '–¥–µ—Ü'],
  wide: ['—ò–∞–Ω—É–∞—Ä', '—Ñ–µ–±—Ä—É–∞—Ä', '–º–∞—Ä—Ç', '–∞–ø—Ä–∏–ª', '–º–∞—ò', '—ò—É–Ω', '—ò—É–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–ø—Ç–µ–º–±–∞—Ä', '–æ–∫—Ç–æ–±–∞—Ä', '–Ω–æ–≤–µ–º–±–∞—Ä', '–¥–µ—Ü–µ–º–±–∞—Ä']
};
var sr_lib_localize_dayValues = {
  narrow: ['–ù', '–ü', '–£', '–°', '–ß', '–ü', '–°'],
  short: ['–Ω–µ–¥', '–ø–æ–Ω', '—É—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø–µ—Ç', '—Å—É–±'],
  abbreviated: ['–Ω–µ–¥', '–ø–æ–Ω', '—É—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø–µ—Ç', '—Å—É–±'],
  wide: ['–Ω–µ–¥–µ—ô–∞', '–ø–æ–Ω–µ–¥–µ—ô–∞–∫', '—É—Ç–æ—Ä–∞–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤—Ä—Ç–∞–∫', '–ø–µ—Ç–∞–∫', '—Å—É–±–æ—Ç–∞']
};
var sr_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '–ê–ú',
    pm: '–ü–ú',
    midnight: '–ø–æ–Ω–æ—õ',
    noon: '–ø–æ–¥–Ω–µ',
    morning: '—É—ò—É—Ç—Ä—É',
    afternoon: '–ø–æ–ø–æ–¥–Ω–µ',
    evening: '—É–≤–µ—á–µ',
    night: '–Ω–æ—õ—É'
  },
  abbreviated: {
    am: '–ê–ú',
    pm: '–ü–ú',
    midnight: '–ø–æ–Ω–æ—õ',
    noon: '–ø–æ–¥–Ω–µ',
    morning: '—É—ò—É—Ç—Ä—É',
    afternoon: '–ø–æ–ø–æ–¥–Ω–µ',
    evening: '—É–≤–µ—á–µ',
    night: '–Ω–æ—õ—É'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: '–ø–æ–Ω–æ—õ',
    noon: '–ø–æ–¥–Ω–µ',
    morning: '—É—ò—É—Ç—Ä—É',
    afternoon: '–ø–æ—Å–ª–µ –ø–æ–¥–Ω–µ',
    evening: '—É–≤–µ—á–µ',
    night: '–Ω–æ—õ—É'
  }
};
var sr_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: '–ø–æ–Ω–æ—õ',
    noon: '–ø–æ–¥–Ω–µ',
    morning: '—É—ò—É—Ç—Ä—É',
    afternoon: '–ø–æ–ø–æ–¥–Ω–µ',
    evening: '—É–≤–µ—á–µ',
    night: '–Ω–æ—õ—É'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: '–ø–æ–Ω–æ—õ',
    noon: '–ø–æ–¥–Ω–µ',
    morning: '—É—ò—É—Ç—Ä—É',
    afternoon: '–ø–æ–ø–æ–¥–Ω–µ',
    evening: '—É–≤–µ—á–µ',
    night: '–Ω–æ—õ—É'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: '–ø–æ–Ω–æ—õ',
    noon: '–ø–æ–¥–Ω–µ',
    morning: '—É—ò—É—Ç—Ä—É',
    afternoon: '–ø–æ—Å–ª–µ –ø–æ–¥–Ω–µ',
    evening: '—É–≤–µ—á–µ',
    night: '–Ω–æ—õ—É'
  }
};
var sr_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var sr_lib_localize_localize = {
  ordinalNumber: sr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: sr_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: sr_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const sr_lib_localize = (sr_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/match/index.js


var sr_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var sr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sr_lib_match_matchEraPatterns = {
  narrow: /^(–ø—Ä\.–Ω\.–µ\.|–ê–î)/i,
  abbreviated: /^(–ø—Ä\.\s?–•—Ä\.|–ø–æ\.\s?–•—Ä\.)/i,
  wide: /^(–ü—Ä–µ –•—Ä–∏—Å—Ç–∞|–ø—Ä–µ –Ω–æ–≤–µ –µ—Ä–µ|–ü–æ—Å–ª–µ –•—Ä–∏—Å—Ç–∞|–Ω–æ–≤–∞ –µ—Ä–∞)/i
};
var sr_lib_match_parseEraPatterns = {
  any: [/^–ø—Ä/i, /^(–ø–æ|–Ω–æ–≤–∞)/i]
};
var sr_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?–∫–≤\.?/i,
  wide: /^[1234]\. –∫–≤–∞—Ä—Ç–∞–ª/i
};
var sr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sr_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(—ò–∞–Ω|—Ñ–µ–±|–º–∞—Ä|–∞–ø—Ä|–º–∞—ò|—ò—É–Ω|—ò—É–ª|–∞–≤–≥|—Å–µ–ø|–æ–∫—Ç|–Ω–æ–≤|–¥–µ—Ü)/i,
  wide: /^((—ò–∞–Ω—É–∞—Ä|—ò–∞–Ω—É–∞—Ä–∞)|(—Ñ–µ–±—Ä—É–∞—Ä|—Ñ–µ–±—Ä—É–∞—Ä–∞)|(–º–∞—Ä—Ç|–º–∞—Ä—Ç–∞)|(–∞–ø—Ä–∏–ª|–∞–ø—Ä–∏–ª–∞)|(–º—ò–∞|–º–∞—ò–∞)|(—ò—É–Ω|—ò—É–Ω–∞)|(—ò—É–ª|—ò—É–ª–∞)|(–∞–≤–≥—É—Å—Ç|–∞–≤–≥—É—Å—Ç–∞)|(—Å–µ–ø—Ç–µ–º–±–∞—Ä|—Å–µ–ø—Ç–µ–º–±—Ä–∞)|(–æ–∫—Ç–æ–±–∞—Ä|–æ–∫—Ç–æ–±—Ä–∞)|(–Ω–æ–≤–µ–º–±–∞—Ä|–Ω–æ–≤–µ–º–±—Ä–∞)|(–¥–µ—Ü–µ–º–±–∞—Ä|–¥–µ—Ü–µ–º–±—Ä–∞))/i
};
var sr_lib_match_parseMonthPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^—ò–∞/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞—ò/i, /^—ò—É–Ω/i, /^—ò—É–ª/i, /^–∞–≤–≥/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^–¥/i]
};
var sr_lib_match_matchDayPatterns = {
  narrow: /^[–ø—É—Å—á–Ω]/i,
  short: /^(–Ω–µ–¥|–ø–æ–Ω|—É—Ç–æ|—Å—Ä–µ|—á–µ—Ç|–ø–µ—Ç|—Å—É–±)/i,
  abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|—É—Ç–æ|—Å—Ä–µ|—á–µ—Ç|–ø–µ—Ç|—Å—É–±)/i,
  wide: /^(–Ω–µ–¥–µ—ô–∞|–ø–æ–Ω–µ–¥–µ—ô–∞–∫|—É—Ç–æ—Ä–∞–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤—Ä—Ç–∞–∫|–ø–µ—Ç–∞–∫|—Å—É–±–æ—Ç–∞)/i
};
var sr_lib_match_parseDayPatterns = {
  narrow: [/^–ø/i, /^—É/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i, /^–Ω/i],
  any: [/^–Ω–µ–¥/i, /^–ø–æ–Ω/i, /^—É—Ç–æ/i, /^—Å—Ä–µ/i, /^—á–µ—Ç/i, /^–ø–µ—Ç/i, /^—Å—É–±/i]
};
var sr_lib_match_matchDayPeriodPatterns = {
  any: /^(–∞–º|–ø–º|–ø–æ–Ω–æ—õ|(–ø–æ)?–ø–æ–¥–Ω–µ|—É–≤–µ—á–µ|–Ω–æ—õ—É|–ø–æ—Å–ª–µ –ø–æ–¥–Ω–µ|—É—ò—É—Ç—Ä—É)/i
};
var sr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^–ø–æ–Ω–æ/i,
    noon: /^–ø–æ–¥/i,
    morning: /—É—ò—É—Ç—Ä—É/i,
    afternoon: /(–ø–æ—Å–ª–µ\s|–ø–æ)+–ø–æ–¥–Ω–µ/i,
    evening: /(—É–≤–µ—á–µ)/i,
    night: /(–Ω–æ—õ—É)/i
  }
};
var sr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sr_lib_match_matchOrdinalNumberPattern,
    parsePattern: sr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: sr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const sr_lib_match = (sr_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Serbian cyrillic locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor Radivojeviƒá [@rogyvoje]{@link https://github.com/rogyvoje}
 */
var sr_locale = {
  code: 'sr',
  formatDistance: sr_lib_formatDistance,
  formatLong: sr_lib_formatLong,
  formatRelative: sr_lib_formatRelative,
  localize: sr_lib_localize,
  match: sr_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sr = (sr_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/formatDistance/index.js
var sr_Latn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: 'manje od 1 sekunde',
      withPrepositionAgo: 'manje od 1 sekunde',
      withPrepositionIn: 'manje od 1 sekundu'
    },
    dual: 'manje od {{count}} sekunde',
    other: 'manje od {{count}} sekundi'
  },
  xSeconds: {
    one: {
      standalone: '1 sekunda',
      withPrepositionAgo: '1 sekunde',
      withPrepositionIn: '1 sekundu'
    },
    dual: '{{count}} sekunde',
    other: '{{count}} sekundi'
  },
  halfAMinute: 'pola minute',
  lessThanXMinutes: {
    one: {
      standalone: 'manje od 1 minute',
      withPrepositionAgo: 'manje od 1 minute',
      withPrepositionIn: 'manje od 1 minutu'
    },
    dual: 'manje od {{count}} minute',
    other: 'manje od {{count}} minuta'
  },
  xMinutes: {
    one: {
      standalone: '1 minuta',
      withPrepositionAgo: '1 minute',
      withPrepositionIn: '1 minutu'
    },
    dual: '{{count}} minute',
    other: '{{count}} minuta'
  },
  aboutXHours: {
    one: {
      standalone: 'oko 1 sat',
      withPrepositionAgo: 'oko 1 sat',
      withPrepositionIn: 'oko 1 sat'
    },
    dual: 'oko {{count}} sata',
    other: 'oko {{count}} sati'
  },
  xHours: {
    one: {
      standalone: '1 sat',
      withPrepositionAgo: '1 sat',
      withPrepositionIn: '1 sat'
    },
    dual: '{{count}} sata',
    other: '{{count}} sati'
  },
  xDays: {
    one: {
      standalone: '1 dan',
      withPrepositionAgo: '1 dan',
      withPrepositionIn: '1 dan'
    },
    dual: '{{count}} dana',
    other: '{{count}} dana'
  },
  aboutXWeeks: {
    one: {
      standalone: 'oko 1 nedelju',
      withPrepositionAgo: 'oko 1 nedelju',
      withPrepositionIn: 'oko 1 nedelju'
    },
    dual: 'oko {{count}} nedelje',
    other: 'oko {{count}} nedelje'
  },
  xWeeks: {
    one: {
      standalone: '1 nedelju',
      withPrepositionAgo: '1 nedelju',
      withPrepositionIn: '1 nedelju'
    },
    dual: '{{count}} nedelje',
    other: '{{count}} nedelje'
  },
  aboutXMonths: {
    one: {
      standalone: 'oko 1 mesec',
      withPrepositionAgo: 'oko 1 mesec',
      withPrepositionIn: 'oko 1 mesec'
    },
    dual: 'oko {{count}} meseca',
    other: 'oko {{count}} meseci'
  },
  xMonths: {
    one: {
      standalone: '1 mesec',
      withPrepositionAgo: '1 mesec',
      withPrepositionIn: '1 mesec'
    },
    dual: '{{count}} meseca',
    other: '{{count}} meseci'
  },
  aboutXYears: {
    one: {
      standalone: 'oko 1 godinu',
      withPrepositionAgo: 'oko 1 godinu',
      withPrepositionIn: 'oko 1 godinu'
    },
    dual: 'oko {{count}} godine',
    other: 'oko {{count}} godina'
  },
  xYears: {
    one: {
      standalone: '1 godina',
      withPrepositionAgo: '1 godine',
      withPrepositionIn: '1 godinu'
    },
    dual: '{{count}} godine',
    other: '{{count}} godina'
  },
  overXYears: {
    one: {
      standalone: 'preko 1 godinu',
      withPrepositionAgo: 'preko 1 godinu',
      withPrepositionIn: 'preko 1 godinu'
    },
    dual: 'preko {{count}} godine',
    other: 'preko {{count}} godina'
  },
  almostXYears: {
    one: {
      standalone: 'gotovo 1 godinu',
      withPrepositionAgo: 'gotovo 1 godinu',
      withPrepositionIn: 'gotovo 1 godinu'
    },
    dual: 'gotovo {{count}} godine',
    other: 'gotovo {{count}} godina'
  }
};
var sr_Latn_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = sr_Latn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 &&
  // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== '1' // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace('{{count}}', String(count));
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'za ' + result;
    } else {
      return 'pre ' + result;
    }
  }
  return result;
};
/* harmony default export */ const sr_Latn_lib_formatDistance = (sr_Latn_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/formatLong/index.js

var sr_Latn_lib_formatLong_dateFormats = {
  full: 'EEEE, d. MMMM yyyy.',
  long: 'd. MMMM yyyy.',
  medium: 'd. MMM yy.',
  short: 'dd. MM. yy.'
};
var sr_Latn_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss (zzzz)',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var sr_Latn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var sr_Latn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_Latn_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_Latn_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_Latn_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const sr_Latn_lib_formatLong = (sr_Latn_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/formatRelative/index.js
var sr_Latn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'pro≈°le nedelje u' p";
      case 3:
        return "'pro≈°le srede u' p";
      case 6:
        return "'pro≈°le subote u' p";
      default:
        return "'pro≈°li' EEEE 'u' p";
    }
  },
  yesterday: "'juƒçe u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'sledeƒáe nedelje u' p";
      case 3:
        return "'sledeƒáu sredu u' p";
      case 6:
        return "'sledeƒáu subotu u' p";
      default:
        return "'sledeƒái' EEEE 'u' p";
    }
  },
  other: 'P'
};
var sr_Latn_lib_formatRelative_formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = sr_Latn_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date);
  }
  return format;
};
/* harmony default export */ const sr_Latn_lib_formatRelative = (sr_Latn_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/localize/index.js

var sr_Latn_lib_localize_eraValues = {
  narrow: ['pr.n.e.', 'AD'],
  abbreviated: ['pr. Hr.', 'po. Hr.'],
  wide: ['Pre Hrista', 'Posle Hrista']
};
var sr_Latn_lib_localize_quarterValues = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. kv.', '2. kv.', '3. kv.', '4. kv.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var sr_Latn_lib_localize_monthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var sr_Latn_lib_localize_formattingMonthValues = {
  narrow: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar']
};
var sr_Latn_lib_localize_dayValues = {
  narrow: ['N', 'P', 'U', 'S', 'ƒå', 'P', 'S'],
  short: ['ned', 'pon', 'uto', 'sre', 'ƒçet', 'pet', 'sub'],
  abbreviated: ['ned', 'pon', 'uto', 'sre', 'ƒçet', 'pet', 'sub'],
  wide: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'ƒçetvrtak', 'petak', 'subota']
};
var sr_Latn_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'posle podne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  }
};
var sr_Latn_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'popodne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'ponoƒá',
    noon: 'podne',
    morning: 'ujutru',
    afternoon: 'posle podne',
    evening: 'uveƒçe',
    night: 'noƒáu'
  }
};
var sr_Latn_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var sr_Latn_lib_localize_localize = {
  ordinalNumber: sr_Latn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: sr_Latn_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: sr_Latn_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const sr_Latn_lib_localize = (sr_Latn_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/match/index.js


var sr_Latn_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var sr_Latn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sr_Latn_lib_match_matchEraPatterns = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
};
var sr_Latn_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|nova)/i]
};
var sr_Latn_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var sr_Latn_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sr_Latn_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
var sr_Latn_lib_match_parseMonthPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sr_Latn_lib_match_matchDayPatterns = {
  narrow: /^[npusƒçc]/i,
  short: /^(ned|pon|uto|sre|(ƒçet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(ƒçet|cet)|pet|sub)/i,
  wide: /^(nedelja|ponedeljak|utorak|sreda|(ƒçetvrtak|cetvrtak)|petak|subota)/i
};
var sr_Latn_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var sr_Latn_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|ponoc|ponoƒá|(po)?podne|uvece|uveƒçe|noƒáu|posle podne|ujutru)/i
};
var sr_Latn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(posle\s|po)+podne/i,
    evening: /(uvece|uveƒçe)/i,
    night: /(nocu|noƒáu)/i
  }
};
var sr_Latn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sr_Latn_lib_match_matchOrdinalNumberPattern,
    parsePattern: sr_Latn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_Latn_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_Latn_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_Latn_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sr_Latn_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: sr_Latn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const sr_Latn_lib_match = (sr_Latn_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Serbian latin locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor Radivojeviƒá [@rogyvoje]{@link https://github.com/rogyvoje}
 */
var sr_Latn_locale = {
  code: 'sr-Latn',
  formatDistance: sr_Latn_lib_formatDistance,
  formatLong: sr_Latn_lib_formatLong,
  formatRelative: sr_Latn_lib_formatRelative,
  localize: sr_Latn_lib_localize,
  match: sr_Latn_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sr_Latn = (sr_Latn_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/formatDistance/index.js
var sv_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'mindre √§n en sekund',
    other: 'mindre √§n {{count}} sekunder'
  },
  xSeconds: {
    one: 'en sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: 'en halv minut',
  lessThanXMinutes: {
    one: 'mindre √§n en minut',
    other: 'mindre √§n {{count}} minuter'
  },
  xMinutes: {
    one: 'en minut',
    other: '{{count}} minuter'
  },
  aboutXHours: {
    one: 'ungef√§r en timme',
    other: 'ungef√§r {{count}} timmar'
  },
  xHours: {
    one: 'en timme',
    other: '{{count}} timmar'
  },
  xDays: {
    one: 'en dag',
    other: '{{count}} dagar'
  },
  aboutXWeeks: {
    one: 'ungef√§r en vecka',
    other: 'ungef√§r {{count}} vecka'
  },
  xWeeks: {
    one: 'en vecka',
    other: '{{count}} vecka'
  },
  aboutXMonths: {
    one: 'ungef√§r en m√•nad',
    other: 'ungef√§r {{count}} m√•nader'
  },
  xMonths: {
    one: 'en m√•nad',
    other: '{{count}} m√•nader'
  },
  aboutXYears: {
    one: 'ungef√§r ett √•r',
    other: 'ungef√§r {{count}} √•r'
  },
  xYears: {
    one: 'ett √•r',
    other: '{{count}} √•r'
  },
  overXYears: {
    one: '√∂ver ett √•r',
    other: '√∂ver {{count}} √•r'
  },
  almostXYears: {
    one: 'n√§stan ett √•r',
    other: 'n√§stan {{count}} √•r'
  }
};
var formatDistance_wordMapping = ['noll', 'en', 'tv√•', 'tre', 'fyra', 'fem', 'sex', 'sju', '√•tta', 'nio', 'tio', 'elva', 'tolv'];
var sv_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = sv_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    if (options && options.onlyNumeric) {
      result = tokenValue.other.replace('{{count}}', String(count));
    } else {
      result = tokenValue.other.replace('{{count}}', count < 13 ? formatDistance_wordMapping[count] : String(count));
    }
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' sedan';
    }
  }
  return result;
};
/* harmony default export */ const sv_lib_formatDistance = (sv_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/formatLong/index.js

var sv_lib_formatLong_dateFormats = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'y-MM-dd'
};
var sv_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var sv_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var sv_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sv_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sv_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sv_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const sv_lib_formatLong = (sv_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/formatRelative/index.js
var sv_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'i' EEEE's kl.' p",
  yesterday: "'ig√•r kl.' p",
  today: "'idag kl.' p",
  tomorrow: "'imorgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
var sv_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return sv_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const sv_lib_formatRelative = (sv_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/localize/index.js

var sv_lib_localize_eraValues = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['f√∂re Kristus', 'efter Kristus']
};
var sv_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1:a kvartalet', '2:a kvartalet', '3:e kvartalet', '4:e kvartalet']
};
var sv_lib_localize_monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'maj', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december']
};
var sv_lib_localize_dayValues = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['s√∂', 'm√•', 'ti', 'on', 'to', 'fr', 'l√∂'],
  abbreviated: ['s√∂n', 'm√•n', 'tis', 'ons', 'tors', 'fre', 'l√∂r'],
  wide: ['s√∂ndag', 'm√•ndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'l√∂rdag']
};

// https://www.unicode.org/cldr/charts/32/summary/sv.html#1888
var sv_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morg.',
    afternoon: 'efterm.',
    evening: 'kv√§ll',
    night: 'natt'
  },
  abbreviated: {
    am: 'f.m.',
    pm: 'e.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morgon',
    afternoon: 'efterm.',
    evening: 'kv√§ll',
    night: 'natt'
  },
  wide: {
    am: 'f√∂rmiddag',
    pm: 'eftermiddag',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morgon',
    afternoon: 'eftermiddag',
    evening: 'kv√§ll',
    night: 'natt'
  }
};
var sv_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morg.',
    afternoon: 'p√• efterm.',
    evening: 'p√• kv√§llen',
    night: 'p√• natten'
  },
  abbreviated: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morg.',
    afternoon: 'p√• efterm.',
    evening: 'p√• kv√§llen',
    night: 'p√• natten'
  },
  wide: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'p√• morgonen',
    afternoon: 'p√• eftermiddagen',
    evening: 'p√• kv√§llen',
    night: 'p√• natten'
  }
};
var sv_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
      case 2:
        return number + ':a';
    }
  }
  return number + ':e';
};
var sv_lib_localize_localize = {
  ordinalNumber: sv_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: sv_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const sv_lib_localize = (sv_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/match/index.js


var sv_lib_match_matchOrdinalNumberPattern = /^(\d+)(:a|:e)?/i;
var sv_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sv_lib_match_matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  wide: /^(f√∂re Kristus|f√∂re v√•r tid|efter Kristus|v√•r tid)/i
};
var sv_lib_match_parseEraPatterns = {
  any: [/^f/i, /^[ev]/i]
};
var sv_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](:a|:e)? kvartalet/i
};
var sv_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sv_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
  wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
};
var sv_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sv_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(s√∂|m√•|ti|on|to|fr|l√∂)/i,
  abbreviated: /^(s√∂n|m√•n|tis|ons|tors|fre|l√∂r)/i,
  wide: /^(s√∂ndag|m√•ndag|tisdag|onsdag|torsdag|fredag|l√∂rdag)/i
};
var sv_lib_match_parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var sv_lib_match_matchDayPeriodPatterns = {
  any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(p√•) (morgonen|eftermiddagen|kv√§llen|natten))/i
};
var sv_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /eftermiddag/i,
    evening: /kv√§ll/i,
    night: /natt/i
  }
};
var sv_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sv_lib_match_matchOrdinalNumberPattern,
    parsePattern: sv_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sv_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sv_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sv_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: sv_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: sv_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const sv_lib_match = (sv_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Swedish locale.
 * @language Swedish
 * @iso-639-2 swe
 * @author Johannes Ul√©n [@ejulen]{@link https://github.com/ejulen}
 * @author Alexander Nanberg [@alexandernanberg]{@link https://github.com/alexandernanberg}
 * @author Henrik Andersson [@limelights]{@link https://github.com/limelights}
 */
var sv_locale = {
  code: 'sv',
  formatDistance: sv_lib_formatDistance,
  formatLong: sv_lib_formatLong,
  formatRelative: sv_lib_formatRelative,
  localize: sv_lib_localize,
  match: sv_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const sv = (sv_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/formatDistance/index.js
function formatDistance_isPluralType(val) {
  return val.one !== undefined;
}
var ta_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      default: '‡Æí‡Æ∞‡ØÅ ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï',
      in: '‡Æí‡Æ∞‡ØÅ ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç',
      ago: '‡Æí‡Æ∞‡ØÅ ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï',
      in: '{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç',
      ago: '{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  xSeconds: {
    one: {
      default: '1 ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø',
      in: '1 ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡ÆØ‡Æø‡Æ≤‡Øç',
      ago: '1 ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡Æµ‡Æø‡Æ®‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡Øç',
      in: '{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡Æµ‡Æø‡Æ®‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  halfAMinute: {
    default: '‡ÆÖ‡Æ∞‡Øà ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç',
    in: '‡ÆÖ‡Æ∞‡Øà ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
    ago: '‡ÆÖ‡Æ∞‡Øà ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
  },
  lessThanXMinutes: {
    one: {
      default: '‡Æí‡Æ∞‡ØÅ ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï',
      in: '‡Æí‡Æ∞‡ØÅ ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ‡Æ≥‡Øç',
      ago: '‡Æí‡Æ∞‡ØÅ ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï',
      in: '{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç',
      ago: '{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  xMinutes: {
    one: {
      default: '1 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç',
      in: '1 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '1 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç',
      in: '{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  aboutXHours: {
    one: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç'
    }
  },
  xHours: {
    one: {
      default: '1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç',
      in: '1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç',
      in: '{{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  xDays: {
    one: {
      default: '1 ‡Æ®‡Ææ‡Æ≥‡Øç',
      in: '1 ‡Æ®‡Ææ‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '1 ‡Æ®‡Ææ‡Æ≥‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡Øç',
      in: '{{count}} ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  aboutXWeeks: {
    one: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Ææ‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  xWeeks: {
    one: {
      default: '1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç',
      in: '1 ‡Æµ‡Ææ‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç',
      in: '{{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  aboutXMonths: {
    one: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  xMonths: {
    one: {
      default: '1 ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç',
      in: '1 ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç',
      ago: '1 ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç',
      in: '{{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  aboutXYears: {
    one: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÜ‡Æ£‡Øç‡Æü‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç',
      in: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  xYears: {
    one: {
      default: '1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç',
      in: '1 ‡ÆÜ‡Æ£‡Øç‡Æü‡Æø‡Æ≤‡Øç',
      ago: '1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç',
      in: '{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  overXYears: {
    one: {
      default: '1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡Øá‡Æ≤‡Øç',
      in: '1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æï',
      ago: '1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æï',
      in: '{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  },
  almostXYears: {
    one: {
      default: '‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç',
      in: '‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü 1 ‡ÆÜ‡Æ£‡Øç‡Æü‡Æø‡Æ≤‡Øç',
      ago: '‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    },
    other: {
      default: '‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç',
      in: '‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç',
      ago: '‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ'
    }
  }
};
var ta_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var tense = options !== null && options !== void 0 && options.addSuffix ? options.comparison && options.comparison > 0 ? 'in' : 'ago' : 'default';
  var tokenValue = ta_lib_formatDistance_formatDistanceLocale[token];
  if (!formatDistance_isPluralType(tokenValue)) return tokenValue[tense];
  if (count === 1) {
    return tokenValue.one[tense];
  } else {
    return tokenValue.other[tense].replace('{{count}}', String(count));
  }
};
/* harmony default export */ const ta_lib_formatDistance = (ta_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/formatLong/index.js
 // Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html
// CLDR #1846 - #1849
var ta_lib_formatLong_dateFormats = {
  full: 'EEEE, d MMMM, y',
  long: 'd MMMM, y',
  medium: 'd MMM, y',
  short: 'd/M/yy'
};

// CLDR #1850 - #1853
var ta_lib_formatLong_timeFormats = {
  full: 'a h:mm:ss zzzz',
  long: 'a h:mm:ss z',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var ta_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ta_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ta_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ta_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ta_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ta_lib_formatLong = (ta_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/formatRelative/index.js
var ta_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‡Æï‡Æü‡Æ®‡Øç‡Æ§' eeee p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
  yesterday: "'‡Æ®‡Øá‡Æ±‡Øç‡Æ±‡ØÅ ' p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
  today: "'‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ' p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
  tomorrow: "'‡Æ®‡Ææ‡Æ≥‡Øà ' p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
  nextWeek: "eeee p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
  other: 'P'
};
var ta_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ta_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ta_lib_formatRelative = (ta_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/localize/index.js
 // Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html
var ta_lib_localize_eraValues = {
  narrow: ['‡Æï‡Æø.‡ÆÆ‡ØÅ.', '‡Æï‡Æø.‡Æ™‡Æø.'],
  abbreviated: ['‡Æï‡Æø.‡ÆÆ‡ØÅ.', '‡Æï‡Æø.‡Æ™‡Æø.'],
  // CLDR #1624, #1626
  wide: ['‡Æï‡Æø‡Æ±‡Æø‡Æ∏‡Øç‡Æ§‡ØÅ‡Æµ‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç', '‡ÆÖ‡Æ©‡Øç‡Æ©‡Øã ‡Æü‡Øã‡ÆÆ‡Æø‡Æ©‡Æø'] // CLDR #1620, #1622
};

var ta_lib_localize_quarterValues = {
  // CLDR #1644 - #1647
  narrow: ['1', '2', '3', '4'],
  // CLDR #1636 - #1639
  abbreviated: ['‡Æï‡Ææ‡Æ≤‡Ææ.1', '‡Æï‡Ææ‡Æ≤‡Ææ.2', '‡Æï‡Ææ‡Æ≤‡Ææ.3', '‡Æï‡Ææ‡Æ≤‡Ææ.4'],
  // CLDR #1628 - #1631
  wide: ['‡Æí‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ', '‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ', '‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ', '‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ']
};
var ta_lib_localize_monthValues = {
  // CLDR #700 - #711
  narrow: ['‡Æú', '‡Æ™‡Æø', '‡ÆÆ‡Ææ', '‡Æè', '‡ÆÆ‡Øá', '‡Æú‡ØÇ', '‡Æú‡ØÇ', '‡ÆÜ', '‡Æö‡ØÜ', '‡ÆÖ', '‡Æ®', '‡Æü‡Æø'],
  // CLDR #1676 - #1687
  abbreviated: ['‡Æú‡Æ©.', '‡Æ™‡Æø‡Æ™‡Øç.', '‡ÆÆ‡Ææ‡Æ∞‡Øç.', '‡Æè‡Æ™‡Øç.', '‡ÆÆ‡Øá', '‡Æú‡ØÇ‡Æ©‡Øç', '‡Æú‡ØÇ‡Æ≤‡Øà', '‡ÆÜ‡Æï.', '‡Æö‡ØÜ‡Æ™‡Øç.', '‡ÆÖ‡Æï‡Øç.', '‡Æ®‡Æµ.', '‡Æü‡Æø‡Æö.'],
  // CLDR #1652 - #1663
  wide: ['‡Æú‡Æ©‡Æµ‡Æ∞‡Æø',
  // January
  '‡Æ™‡Æø‡Æ™‡Øç‡Æ∞‡Æµ‡Æ∞‡Æø',
  // February
  '‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æö‡Øç',
  // March
  '‡Æè‡Æ™‡Øç‡Æ∞‡Æ≤‡Øç',
  // April
  '‡ÆÆ‡Øá',
  // May
  '‡Æú‡ØÇ‡Æ©‡Øç',
  // June
  '‡Æú‡ØÇ‡Æ≤‡Øà',
  // July
  '‡ÆÜ‡Æï‡Æ∏‡Øç‡Æü‡Øç',
  // August
  '‡Æö‡ØÜ‡Æ™‡Øç‡Æü‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç',
  // September
  '‡ÆÖ‡Æï‡Øç‡Æü‡Øã‡Æ™‡Æ∞‡Øç',
  // October
  '‡Æ®‡Æµ‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç',
  // November
  '‡Æü‡Æø‡Æö‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç' // December
  ]
};

var ta_lib_localize_dayValues = {
  // CLDR #1766 - #1772
  narrow: ['‡Æû‡Ææ', '‡Æ§‡Æø', '‡Æö‡ØÜ', '‡Æ™‡ØÅ', '‡Æµ‡Æø', '‡Æµ‡ØÜ', '‡Æö'],
  // CLDR #1752 - #1758
  short: ['‡Æû‡Ææ', '‡Æ§‡Æø', '‡Æö‡ØÜ', '‡Æ™‡ØÅ', '‡Æµ‡Æø', '‡Æµ‡ØÜ', '‡Æö'],
  // CLDR #1738 - #1744
  abbreviated: ['‡Æû‡Ææ‡ÆØ‡Æø.', '‡Æ§‡Æø‡Æô‡Øç.', '‡Æö‡ØÜ‡Æµ‡Øç.', '‡Æ™‡ØÅ‡Æ§.', '‡Æµ‡Æø‡ÆØ‡Ææ.', '‡Æµ‡ØÜ‡Æ≥‡Øç.', '‡Æö‡Æ©‡Æø'],
  // CLDR #1724 - #1730
  wide: ['‡Æû‡Ææ‡ÆØ‡Æø‡Æ±‡ØÅ',
  // Sunday
  '‡Æ§‡Æø‡Æô‡Øç‡Æï‡Æ≥‡Øç',
  // Monday
  '‡Æö‡ØÜ‡Æµ‡Øç‡Æµ‡Ææ‡ÆØ‡Øç',
  // Tuesday
  '‡Æ™‡ØÅ‡Æ§‡Æ©‡Øç',
  // Wednesday
  '‡Æµ‡Æø‡ÆØ‡Ææ‡Æ¥‡Æ©‡Øç',
  // Thursday
  '‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Æø',
  // Friday
  '‡Æö‡Æ©‡Æø' // Saturday
  ]
};

// CLDR #1780 - #1845
var ta_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‡ÆÆ‡ØÅ.‡Æ™',
    pm: '‡Æ™‡Æø.‡Æ™',
    midnight: '‡Æ®‡Æ≥‡Øç.',
    noon: '‡Æ®‡Æ£‡Øç.',
    morning: '‡Æï‡Ææ.',
    afternoon: '‡ÆÆ‡Æ§‡Æø.',
    evening: '‡ÆÆ‡Ææ.',
    night: '‡Æá‡Æ∞.'
  },
  abbreviated: {
    am: '‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    pm: '‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    midnight: '‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ',
    noon: '‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    morning: '‡Æï‡Ææ‡Æ≤‡Øà',
    afternoon: '‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç',
    evening: '‡ÆÆ‡Ææ‡Æ≤‡Øà',
    night: '‡Æá‡Æ∞‡Æµ‡ØÅ'
  },
  wide: {
    am: '‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    pm: '‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    midnight: '‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ',
    noon: '‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    morning: '‡Æï‡Ææ‡Æ≤‡Øà',
    afternoon: '‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç',
    evening: '‡ÆÆ‡Ææ‡Æ≤‡Øà',
    night: '‡Æá‡Æ∞‡Æµ‡ØÅ'
  }
};

// CLDR #1780 - #1845
var ta_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‡ÆÆ‡ØÅ.‡Æ™',
    pm: '‡Æ™‡Æø.‡Æ™',
    midnight: '‡Æ®‡Æ≥‡Øç.',
    noon: '‡Æ®‡Æ£‡Øç.',
    morning: '‡Æï‡Ææ.',
    afternoon: '‡ÆÆ‡Æ§‡Æø.',
    evening: '‡ÆÆ‡Ææ.',
    night: '‡Æá‡Æ∞.'
  },
  abbreviated: {
    am: '‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    pm: '‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    midnight: '‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ',
    noon: '‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    morning: '‡Æï‡Ææ‡Æ≤‡Øà',
    afternoon: '‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç',
    evening: '‡ÆÆ‡Ææ‡Æ≤‡Øà',
    night: '‡Æá‡Æ∞‡Æµ‡ØÅ'
  },
  wide: {
    am: '‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    pm: '‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    midnight: '‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ',
    noon: '‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç',
    morning: '‡Æï‡Ææ‡Æ≤‡Øà',
    afternoon: '‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç',
    evening: '‡ÆÆ‡Ææ‡Æ≤‡Øà',
    night: '‡Æá‡Æ∞‡Æµ‡ØÅ'
  }
};
var ta_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ta_lib_localize_localize = {
  ordinalNumber: ta_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ta_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ta_lib_localize = (ta_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/match/index.js


var ta_lib_match_matchOrdinalNumberPattern = /^(\d+)(‡Æµ‡Æ§‡ØÅ)?/i;
var ta_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ta_lib_match_matchEraPatterns = {
  narrow: /^(‡Æï‡Æø.‡ÆÆ‡ØÅ.|‡Æï‡Æø.‡Æ™‡Æø.)/i,
  abbreviated: /^(‡Æï‡Æø\.?\s?‡ÆÆ‡ØÅ\.?|‡Æï‡Æø\.?\s?‡Æ™‡Æø\.?)/,
  wide: /^(‡Æï‡Æø‡Æ±‡Æø‡Æ∏‡Øç‡Æ§‡ØÅ‡Æµ‡ØÅ‡Æï‡Øç‡Æï‡ØÅ\s‡ÆÆ‡ØÅ‡Æ©‡Øç|‡ÆÖ‡Æ©‡Øç‡Æ©‡Øã\s‡Æü‡Øã‡ÆÆ‡Æø‡Æ©‡Æø)/i
};
var ta_lib_match_parseEraPatterns = {
  any: [/‡Æï‡Æø\.?\s?‡ÆÆ‡ØÅ\.?/, /‡Æï‡Æø\.?\s?‡Æ™‡Æø\.?/]
};
var ta_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^‡Æï‡Ææ‡Æ≤‡Ææ.[1234]/i,
  wide: /^(‡Æí‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç|‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç|‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç|‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡Ææ‡ÆÆ‡Øç) ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ/i
};
var ta_lib_match_parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/(1|‡Æï‡Ææ‡Æ≤‡Ææ.1|‡Æí‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç)/i, /(2|‡Æï‡Ææ‡Æ≤‡Ææ.2|‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç)/i, /(3|‡Æï‡Ææ‡Æ≤‡Ææ.3|‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç)/i, /(4|‡Æï‡Ææ‡Æ≤‡Ææ.4|‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡Ææ‡ÆÆ‡Øç)/i]
};
var ta_lib_match_matchMonthPatterns = {
  narrow: /^(‡Æú|‡Æ™‡Æø|‡ÆÆ‡Ææ|‡Æè|‡ÆÆ‡Øá|‡Æú‡ØÇ|‡ÆÜ|‡Æö‡ØÜ|‡ÆÖ|‡Æ®|‡Æü‡Æø)$/i,
  abbreviated: /^(‡Æú‡Æ©.|‡Æ™‡Æø‡Æ™‡Øç.|‡ÆÆ‡Ææ‡Æ∞‡Øç.|‡Æè‡Æ™‡Øç.|‡ÆÆ‡Øá|‡Æú‡ØÇ‡Æ©‡Øç|‡Æú‡ØÇ‡Æ≤‡Øà|‡ÆÜ‡Æï.|‡Æö‡ØÜ‡Æ™‡Øç.|‡ÆÖ‡Æï‡Øç.|‡Æ®‡Æµ.|‡Æü‡Æø‡Æö.)/i,
  wide: /^(‡Æú‡Æ©‡Æµ‡Æ∞‡Æø|‡Æ™‡Æø‡Æ™‡Øç‡Æ∞‡Æµ‡Æ∞‡Æø|‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æö‡Øç|‡Æè‡Æ™‡Øç‡Æ∞‡Æ≤‡Øç|‡ÆÆ‡Øá|‡Æú‡ØÇ‡Æ©‡Øç|‡Æú‡ØÇ‡Æ≤‡Øà|‡ÆÜ‡Æï‡Æ∏‡Øç‡Æü‡Øç|‡Æö‡ØÜ‡Æ™‡Øç‡Æü‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç|‡ÆÖ‡Æï‡Øç‡Æü‡Øã‡Æ™‡Æ∞‡Øç|‡Æ®‡Æµ‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç|‡Æü‡Æø‡Æö‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç)/i
};
var ta_lib_match_parseMonthPatterns = {
  narrow: [/^‡Æú$/i, /^‡Æ™‡Æø/i, /^‡ÆÆ‡Ææ/i, /^‡Æè/i, /^‡ÆÆ‡Øá/i, /^‡Æú‡ØÇ/i, /^‡Æú‡ØÇ/i, /^‡ÆÜ/i, /^‡Æö‡ØÜ/i, /^‡ÆÖ/i, /^‡Æ®/i, /^‡Æü‡Æø/i],
  any: [/^‡Æú‡Æ©/i, /^‡Æ™‡Æø/i, /^‡ÆÆ‡Ææ/i, /^‡Æè/i, /^‡ÆÆ‡Øá/i, /^‡Æú‡ØÇ‡Æ©‡Øç/i, /^‡Æú‡ØÇ‡Æ≤‡Øà/i, /^‡ÆÜ/i, /^‡Æö‡ØÜ/i, /^‡ÆÖ/i, /^‡Æ®/i, /^‡Æü‡Æø/i]
};
var ta_lib_match_matchDayPatterns = {
  narrow: /^(‡Æû‡Ææ|‡Æ§‡Æø|‡Æö‡ØÜ|‡Æ™‡ØÅ|‡Æµ‡Æø|‡Æµ‡ØÜ|‡Æö)/i,
  short: /^(‡Æû‡Ææ|‡Æ§‡Æø|‡Æö‡ØÜ|‡Æ™‡ØÅ|‡Æµ‡Æø|‡Æµ‡ØÜ|‡Æö)/i,
  abbreviated: /^(‡Æû‡Ææ‡ÆØ‡Æø.|‡Æ§‡Æø‡Æô‡Øç.|‡Æö‡ØÜ‡Æµ‡Øç.|‡Æ™‡ØÅ‡Æ§.|‡Æµ‡Æø‡ÆØ‡Ææ.|‡Æµ‡ØÜ‡Æ≥‡Øç.|‡Æö‡Æ©‡Æø)/i,
  wide: /^(‡Æû‡Ææ‡ÆØ‡Æø‡Æ±‡ØÅ|‡Æ§‡Æø‡Æô‡Øç‡Æï‡Æ≥‡Øç|‡Æö‡ØÜ‡Æµ‡Øç‡Æµ‡Ææ‡ÆØ‡Øç|‡Æ™‡ØÅ‡Æ§‡Æ©‡Øç|‡Æµ‡Æø‡ÆØ‡Ææ‡Æ¥‡Æ©‡Øç|‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Æø|‡Æö‡Æ©‡Æø)/i
};
var ta_lib_match_parseDayPatterns = {
  narrow: [/^‡Æû‡Ææ/i, /^‡Æ§‡Æø/i, /^‡Æö‡ØÜ/i, /^‡Æ™‡ØÅ/i, /^‡Æµ‡Æø/i, /^‡Æµ‡ØÜ/i, /^‡Æö/i],
  any: [/^‡Æû‡Ææ/i, /^‡Æ§‡Æø/i, /^‡Æö‡ØÜ/i, /^‡Æ™‡ØÅ/i, /^‡Æµ‡Æø/i, /^‡Æµ‡ØÜ/i, /^‡Æö/i]
};
var ta_lib_match_matchDayPeriodPatterns = {
  narrow: /^(‡ÆÆ‡ØÅ.‡Æ™|‡Æ™‡Æø.‡Æ™|‡Æ®‡Æ≥‡Øç|‡Æ®‡Æ£‡Øç|‡Æï‡Ææ‡Æ≤‡Øà|‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç|‡ÆÆ‡Ææ‡Æ≤‡Øà|‡Æá‡Æ∞‡Æµ‡ØÅ)/i,
  any: /^(‡ÆÆ‡ØÅ.‡Æ™|‡Æ™‡Æø.‡Æ™|‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç|‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç|‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ|‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç|‡Æï‡Ææ‡Æ≤‡Øà|‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç|‡ÆÆ‡Ææ‡Æ≤‡Øà|‡Æá‡Æ∞‡Æµ‡ØÅ)/i
};
var ta_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‡ÆÆ‡ØÅ/i,
    pm: /^‡Æ™‡Æø/i,
    midnight: /^‡Æ®‡Æ≥‡Øç/i,
    noon: /^‡Æ®‡Æ£‡Øç/i,
    morning: /‡Æï‡Ææ‡Æ≤‡Øà/i,
    afternoon: /‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç/i,
    evening: /‡ÆÆ‡Ææ‡Æ≤‡Øà/i,
    night: /‡Æá‡Æ∞‡Æµ‡ØÅ/i
  }
};
var ta_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ta_lib_match_matchOrdinalNumberPattern,
    parsePattern: ta_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ta_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ta_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ta_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ta_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ta_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ta_lib_match = (ta_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Tamil locale (India).
 * @language Tamil
 * @iso-639-2 tam
 * @author Sibiraj [@sibiraj-s]{@link https://github.com/sibiraj-s}
 */
var ta_locale = {
  code: 'ta',
  formatDistance: ta_lib_formatDistance,
  formatLong: ta_lib_formatLong,
  formatRelative: ta_lib_formatRelative,
  localize: ta_lib_localize,
  match: ta_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const ta = (ta_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/formatDistance/index.js
// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

var te_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: '‡∞∏‡±Ü‡∞ï‡∞®‡±Å ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ',
      other: '{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤ ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ'
    },
    withPreposition: {
      one: '‡∞∏‡±Ü‡∞ï‡∞®‡±Å',
      other: '{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤'
    }
  },
  xSeconds: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞∏‡±Ü‡∞ï‡∞®‡±Å',
      // CLDR #1314
      other: '{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞∏‡±Ü‡∞ï‡∞®‡±Å',
      other: '{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤'
    }
  },
  halfAMinute: {
    standalone: '‡∞Ö‡∞∞ ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç',
    withPreposition: '‡∞Ö‡∞∞ ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç'
  },
  lessThanXMinutes: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ',
      other: '{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤ ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç',
      other: '{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤'
    }
  },
  xMinutes: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç',
      // CLDR #1311
      other: '{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç',
      // CLDR #1311
      other: '{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤'
    }
  },
  aboutXHours: {
    standalone: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤'
    }
  },
  xHours: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü',
      // CLDR #1308
      other: '{{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü',
      other: '{{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤'
    }
  },
  xDays: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞∞‡±ã‡∞ú‡±Å',
      // CLDR #1292
      other: '{{count}} ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞∞‡±ã‡∞ú‡±Å',
      other: '{{count}} ‡∞∞‡±ã‡∞ú‡±Å‡∞≤'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡∞≤'
    }
  },
  xWeeks: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç',
      other: '{{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç',
      other: '{{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡∞≤'
    }
  },
  aboutXMonths: {
    standalone: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞®‡±Ü‡∞≤',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞®‡±Ü‡∞≤‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞®‡±Ü‡∞≤',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞®‡±Ü‡∞≤‡∞≤'
    }
  },
  xMonths: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞®‡±Ü‡∞≤',
      // CLDR #1281
      other: '{{count}} ‡∞®‡±Ü‡∞≤‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞®‡±Ü‡∞≤',
      other: '{{count}} ‡∞®‡±Ü‡∞≤‡∞≤'
    }
  },
  aboutXYears: {
    standalone: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      other: '‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤'
    }
  },
  xYears: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      // CLDR #1275
      other: '{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      other: '{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤'
    }
  },
  overXYears: {
    standalone: {
      one: '‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç ‡∞™‡±à‡∞ó‡∞æ',
      other: '{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞™‡±à‡∞ó‡∞æ'
    },
    withPreposition: {
      one: '‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      other: '{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤'
    }
  },
  almostXYears: {
    standalone: {
      one: '‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      other: '‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å'
    },
    withPreposition: {
      one: '‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç',
      other: '‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤'
    }
  }
};
var te_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = options !== null && options !== void 0 && options.addSuffix ? te_lib_formatDistance_formatDistanceLocale[token].withPreposition : te_lib_formatDistance_formatDistanceLocale[token].standalone;
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '‡∞≤‡±ã';
    } else {
      return result + ' ‡∞ï‡±ç‡∞∞‡∞ø‡∞§‡∞Ç';
    }
  }
  return result;
};
/* harmony default export */ const te_lib_formatDistance = (te_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/formatLong/index.js
 // Source: https://www.unicode.org/cldr/charts/32/summary/te.html
// CLDR #1807 - #1811
var te_lib_formatLong_dateFormats = {
  full: 'd, MMMM y, EEEE',
  long: 'd MMMM, y',
  medium: 'd MMM, y',
  short: 'dd-MM-yy'
};

// CLDR #1807 - #1811
var te_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};

// CLDR #1815 - #1818
var te_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}'‡∞ï‡∞ø'",
  long: "{{date}} {{time}}'‡∞ï‡∞ø'",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var te_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: te_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: te_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: te_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const te_lib_formatLong = (te_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/formatRelative/index.js
// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

var te_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‡∞ó‡∞§' eeee p",
  // CLDR #1384
  yesterday: "'‡∞®‡∞ø‡∞®‡±ç‡∞®' p",
  // CLDR #1393
  today: "'‡∞à ‡∞∞‡±ã‡∞ú‡±Å' p",
  // CLDR #1394
  tomorrow: "'‡∞∞‡±á‡∞™‡±Å' p",
  // CLDR #1395
  nextWeek: "'‡∞§‡∞¶‡±Å‡∞™‡∞∞‡∞ø' eeee p",
  // CLDR #1386
  other: 'P'
};
var te_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return te_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const te_lib_formatRelative = (te_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/localize/index.js
 // Source: https://www.unicode.org/cldr/charts/32/summary/te.html
// Source: https://dsal.uchicago.edu/dictionaries/brown/
// CLDR #1605 - #1608
var te_lib_localize_eraValues = {
  narrow: ['‡∞ï‡±ç‡∞∞‡±Ä.‡∞™‡±Ç.', '‡∞ï‡±ç‡∞∞‡±Ä.‡∞∂.'],
  abbreviated: ['‡∞ï‡±ç‡∞∞‡±Ä.‡∞™‡±Ç.', '‡∞ï‡±ç‡∞∞‡±Ä.‡∞∂.'],
  wide: ['‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞Ç', '‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å‡∞∂‡∞ï‡∞Ç']
};

// CLDR #1613 - #1628
var te_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['‡∞§‡±ç‡∞∞‡±à1', '‡∞§‡±ç‡∞∞‡±à2', '‡∞§‡±ç‡∞∞‡±à3', '‡∞§‡±ç‡∞∞‡±à4'],
  wide: ['1‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç', '2‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç', '3‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç', '4‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç']
};

// CLDR #1637 - #1708
var te_lib_localize_monthValues = {
  narrow: ['‡∞ú', '‡∞´‡∞ø', '‡∞Æ‡∞æ', '‡∞è', '‡∞Æ‡±á', '‡∞ú‡±Ç', '‡∞ú‡±Å', '‡∞Ü', '‡∞∏‡±Ü', '‡∞Ö', '‡∞®', '‡∞°‡∞ø'],
  abbreviated: ['‡∞ú‡∞®', '‡∞´‡∞ø‡∞¨‡±ç‡∞∞', '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø', '‡∞è‡∞™‡±ç‡∞∞‡∞ø', '‡∞Æ‡±á', '‡∞ú‡±Ç‡∞®‡±ç', '‡∞ú‡±Å‡∞≤‡±à', '‡∞Ü‡∞ó', '‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç', '‡∞Ö‡∞ï‡±ç‡∞ü‡±ã', '‡∞®‡∞µ‡∞Ç', '‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç'],
  wide: ['‡∞ú‡∞®‡∞µ‡∞∞‡∞ø', '‡∞´‡∞ø‡∞¨‡±ç‡∞∞‡∞µ‡∞∞‡∞ø', '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø', '‡∞è‡∞™‡±ç‡∞∞‡∞ø‡∞≤‡±ç', '‡∞Æ‡±á', '‡∞ú‡±Ç‡∞®‡±ç', '‡∞ú‡±Å‡∞≤‡±à', '‡∞Ü‡∞ó‡∞∏‡±ç‡∞ü‡±Å', '‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç', '‡∞Ö‡∞ï‡±ç‡∞ü‡±ã‡∞¨‡∞∞‡±ç', '‡∞®‡∞µ‡∞Ç‡∞¨‡∞∞‡±ç', '‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç']
};

// CLDR #1709 - #1764
var te_lib_localize_dayValues = {
  narrow: ['‡∞Ü', '‡∞∏‡±ã', '‡∞Æ', '‡∞¨‡±Å', '‡∞ó‡±Å', '‡∞∂‡±Å', '‡∞∂'],
  short: ['‡∞Ü‡∞¶‡∞ø', '‡∞∏‡±ã‡∞Æ', '‡∞Æ‡∞Ç‡∞ó‡∞≥', '‡∞¨‡±Å‡∞ß', '‡∞ó‡±Å‡∞∞‡±Å', '‡∞∂‡±Å‡∞ï‡±ç‡∞∞', '‡∞∂‡∞®‡∞ø'],
  abbreviated: ['‡∞Ü‡∞¶‡∞ø', '‡∞∏‡±ã‡∞Æ', '‡∞Æ‡∞Ç‡∞ó‡∞≥', '‡∞¨‡±Å‡∞ß', '‡∞ó‡±Å‡∞∞‡±Å', '‡∞∂‡±Å‡∞ï‡±ç‡∞∞', '‡∞∂‡∞®‡∞ø'],
  wide: ['‡∞Ü‡∞¶‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç', '‡∞∏‡±ã‡∞Æ‡∞µ‡∞æ‡∞∞‡∞Ç', '‡∞Æ‡∞Ç‡∞ó‡∞≥‡∞µ‡∞æ‡∞∞‡∞Ç', '‡∞¨‡±Å‡∞ß‡∞µ‡∞æ‡∞∞‡∞Ç', '‡∞ó‡±Å‡∞∞‡±Å‡∞µ‡∞æ‡∞∞‡∞Ç', '‡∞∂‡±Å‡∞ï‡±ç‡∞∞‡∞µ‡∞æ‡∞∞‡∞Ç', '‡∞∂‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç']
};

// CLDR #1767 - #1806
var te_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    pm: '‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    midnight: '‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø',
    noon: '‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    morning: '‡∞â‡∞¶‡∞Ø‡∞Ç',
    afternoon: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    evening: '‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç',
    night: '‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø'
  },
  abbreviated: {
    am: '‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    pm: '‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    midnight: '‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø',
    noon: '‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    morning: '‡∞â‡∞¶‡∞Ø‡∞Ç',
    afternoon: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    evening: '‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç',
    night: '‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø'
  },
  wide: {
    am: '‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    pm: '‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    midnight: '‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø',
    noon: '‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    morning: '‡∞â‡∞¶‡∞Ø‡∞Ç',
    afternoon: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    evening: '‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç',
    night: '‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø'
  }
};
var te_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    pm: '‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    midnight: '‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø',
    noon: '‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    morning: '‡∞â‡∞¶‡∞Ø‡∞Ç',
    afternoon: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    evening: '‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç',
    night: '‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø'
  },
  abbreviated: {
    am: '‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    pm: '‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    midnight: '‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø',
    noon: '‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    morning: '‡∞â‡∞¶‡∞Ø‡∞Ç',
    afternoon: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    evening: '‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç',
    night: '‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø'
  },
  wide: {
    am: '‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    pm: '‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    midnight: '‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø',
    noon: '‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    morning: '‡∞â‡∞¶‡∞Ø‡∞Ç',
    afternoon: '‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç',
    evening: '‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç',
    night: '‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø'
  }
};
var te_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '‡∞µ';
};
var te_lib_localize_localize = {
  ordinalNumber: te_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: te_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const te_lib_localize = (te_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/match/index.js


var te_lib_match_matchOrdinalNumberPattern = /^(\d+)(‡∞µ)?/i;
var te_lib_match_parseOrdinalNumberPattern = /\d+/i;
var te_lib_match_matchEraPatterns = {
  narrow: /^(‡∞ï‡±ç‡∞∞‡±Ä\.‡∞™‡±Ç\.|‡∞ï‡±ç‡∞∞‡±Ä\.‡∞∂\.)/i,
  abbreviated: /^(‡∞ï‡±ç‡∞∞‡±Ä\.?\s?‡∞™‡±Ç\.?|‡∞™‡±ç‡∞∞\.?\s?‡∞∂\.?\s?‡∞™‡±Ç\.?|‡∞ï‡±ç‡∞∞‡±Ä\.?\s?‡∞∂\.?|‡∞∏‡∞æ\.?\s?‡∞∂\.?)/i,
  wide: /^(‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞Ç|‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∂‡∞ï‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞Ç|‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å ‡∞∂‡∞ï‡∞Ç|‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∂‡∞ï‡∞Ç)/i
};
var te_lib_match_parseEraPatterns = {
  any: [/^(‡∞™‡±Ç|‡∞∂)/i, /^‡∞∏‡∞æ/i]
};
var te_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^‡∞§‡±ç‡∞∞‡±à[1234]/i,
  wide: /^[1234](‡∞µ)? ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç/i
};
var te_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var te_lib_match_matchMonthPatterns = {
  narrow: /^(‡∞ú‡±Ç|‡∞ú‡±Å|‡∞ú|‡∞´‡∞ø|‡∞Æ‡∞æ|‡∞è|‡∞Æ‡±á|‡∞Ü|‡∞∏‡±Ü|‡∞Ö|‡∞®|‡∞°‡∞ø)/i,
  abbreviated: /^(‡∞ú‡∞®|‡∞´‡∞ø‡∞¨‡±ç‡∞∞|‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø|‡∞è‡∞™‡±ç‡∞∞‡∞ø|‡∞Æ‡±á|‡∞ú‡±Ç‡∞®‡±ç|‡∞ú‡±Å‡∞≤‡±à|‡∞Ü‡∞ó|‡∞∏‡±Ü‡∞™‡±ç|‡∞Ö‡∞ï‡±ç‡∞ü‡±ã|‡∞®‡∞µ|‡∞°‡∞ø‡∞∏‡±Ü)/i,
  wide: /^(‡∞ú‡∞®‡∞µ‡∞∞‡∞ø|‡∞´‡∞ø‡∞¨‡±ç‡∞∞‡∞µ‡∞∞‡∞ø|‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø|‡∞è‡∞™‡±ç‡∞∞‡∞ø‡∞≤‡±ç|‡∞Æ‡±á|‡∞ú‡±Ç‡∞®‡±ç|‡∞ú‡±Å‡∞≤‡±à|‡∞Ü‡∞ó‡∞∏‡±ç‡∞ü‡±Å|‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç|‡∞Ö‡∞ï‡±ç‡∞ü‡±ã‡∞¨‡∞∞‡±ç|‡∞®‡∞µ‡∞Ç‡∞¨‡∞∞‡±ç|‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç)/i
};
var te_lib_match_parseMonthPatterns = {
  narrow: [/^‡∞ú/i, /^‡∞´‡∞ø/i, /^‡∞Æ‡∞æ/i, /^‡∞è/i, /^‡∞Æ‡±á/i, /^‡∞ú‡±Ç/i, /^‡∞ú‡±Å/i, /^‡∞Ü/i, /^‡∞∏‡±Ü/i, /^‡∞Ö/i, /^‡∞®/i, /^‡∞°‡∞ø/i],
  any: [/^‡∞ú‡∞®/i, /^‡∞´‡∞ø/i, /^‡∞Æ‡∞æ/i, /^‡∞è/i, /^‡∞Æ‡±á/i, /^‡∞ú‡±Ç‡∞®‡±ç/i, /^‡∞ú‡±Å‡∞≤‡±à/i, /^‡∞Ü‡∞ó/i, /^‡∞∏‡±Ü/i, /^‡∞Ö/i, /^‡∞®/i, /^‡∞°‡∞ø/i]
};
var te_lib_match_matchDayPatterns = {
  narrow: /^(‡∞Ü|‡∞∏‡±ã|‡∞Æ|‡∞¨‡±Å|‡∞ó‡±Å|‡∞∂‡±Å|‡∞∂)/i,
  short: /^(‡∞Ü‡∞¶‡∞ø|‡∞∏‡±ã‡∞Æ|‡∞Æ‡∞Ç|‡∞¨‡±Å‡∞ß|‡∞ó‡±Å‡∞∞‡±Å|‡∞∂‡±Å‡∞ï‡±ç‡∞∞|‡∞∂‡∞®‡∞ø)/i,
  abbreviated: /^(‡∞Ü‡∞¶‡∞ø|‡∞∏‡±ã‡∞Æ|‡∞Æ‡∞Ç|‡∞¨‡±Å‡∞ß|‡∞ó‡±Å‡∞∞‡±Å|‡∞∂‡±Å‡∞ï‡±ç‡∞∞|‡∞∂‡∞®‡∞ø)/i,
  wide: /^(‡∞Ü‡∞¶‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞∏‡±ã‡∞Æ‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞Æ‡∞Ç‡∞ó‡∞≥‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞¨‡±Å‡∞ß‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞ó‡±Å‡∞∞‡±Å‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞∂‡±Å‡∞ï‡±ç‡∞∞‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞∂‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç)/i
};
var te_lib_match_parseDayPatterns = {
  narrow: [/^‡∞Ü/i, /^‡∞∏‡±ã/i, /^‡∞Æ/i, /^‡∞¨‡±Å/i, /^‡∞ó‡±Å/i, /^‡∞∂‡±Å/i, /^‡∞∂/i],
  any: [/^‡∞Ü‡∞¶‡∞ø/i, /^‡∞∏‡±ã‡∞Æ/i, /^‡∞Æ‡∞Ç/i, /^‡∞¨‡±Å‡∞ß/i, /^‡∞ó‡±Å‡∞∞‡±Å/i, /^‡∞∂‡±Å‡∞ï‡±ç‡∞∞/i, /^‡∞∂‡∞®‡∞ø/i]
};
var te_lib_match_matchDayPeriodPatterns = {
  narrow: /^(‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø|‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞â‡∞¶‡∞Ø‡∞Ç|‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç|‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø)/i,
  any: /^(‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø|‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞â‡∞¶‡∞Ø‡∞Ç|‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç|‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø)/i
};
var te_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç/i,
    pm: /^‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç/i,
    midnight: /^‡∞Ö‡∞∞‡±ç‡∞ß/i,
    noon: /^‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü/i,
    morning: /‡∞â‡∞¶‡∞Ø‡∞Ç/i,
    afternoon: /‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç/i,
    evening: /‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç/i,
    night: /‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø/i
  }
};
var te_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: te_lib_match_matchOrdinalNumberPattern,
    parsePattern: te_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: te_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: te_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: te_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: te_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: te_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const te_lib_match = (te_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Telugu locale
 * @language Telugu
 * @iso-639-2 tel
 * @author Kranthi Lakum [@kranthilakum]{@link https://github.com/kranthilakum}
 */
var te_locale = {
  code: 'te',
  formatDistance: te_lib_formatDistance,
  formatLong: te_lib_formatLong,
  formatRelative: te_lib_formatRelative,
  localize: te_lib_localize,
  match: te_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const te = (te_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/formatDistance/index.js
var th_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
    other: '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ {{count}} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'
  },
  xSeconds: {
    one: '1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
    other: '{{count}} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'
  },
  halfAMinute: '‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ô‡∏≤‡∏ó‡∏µ',
  lessThanXMinutes: {
    one: '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ',
    other: '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ {{count}} ‡∏ô‡∏≤‡∏ó‡∏µ'
  },
  xMinutes: {
    one: '1 ‡∏ô‡∏≤‡∏ó‡∏µ',
    other: '{{count}} ‡∏ô‡∏≤‡∏ó‡∏µ'
  },
  aboutXHours: {
    one: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
    other: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'
  },
  xHours: {
    one: '1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
    other: '{{count}} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'
  },
  xDays: {
    one: '1 ‡∏ß‡∏±‡∏ô',
    other: '{{count}} ‡∏ß‡∏±‡∏ô'
  },
  aboutXWeeks: {
    one: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
    other: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå'
  },
  xWeeks: {
    one: '1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
    other: '{{count}} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå'
  },
  aboutXMonths: {
    one: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    other: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
  },
  xMonths: {
    one: '1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    other: '{{count}} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
  },
  aboutXYears: {
    one: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏õ‡∏µ',
    other: '‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡∏õ‡∏µ'
  },
  xYears: {
    one: '1 ‡∏õ‡∏µ',
    other: '{{count}} ‡∏õ‡∏µ'
  },
  overXYears: {
    one: '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ',
    other: '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {{count}} ‡∏õ‡∏µ'
  },
  almostXYears: {
    one: '‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö 1 ‡∏õ‡∏µ',
    other: '‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö {{count}} ‡∏õ‡∏µ'
  }
};
var th_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = th_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (token === 'halfAMinute') {
        return '‡πÉ‡∏ô' + result;
      } else {
        return '‡πÉ‡∏ô ' + result;
      }
    } else {
      return result + '‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤';
    }
  }
  return result;
};
/* harmony default export */ const th_lib_formatDistance = (th_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/formatLong/index.js

var th_lib_formatLong_dateFormats = {
  full: '‡∏ß‡∏±‡∏ôEEEE‡∏ó‡∏µ‡πà do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var th_lib_formatLong_timeFormats = {
  full: 'H:mm:ss ‡∏ô. zzzz',
  long: 'H:mm:ss ‡∏ô. z',
  medium: 'H:mm:ss ‡∏ô.',
  short: 'H:mm ‡∏ô.'
};
var th_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '‡πÄ‡∏ß‡∏•‡∏≤' {{time}}",
  long: "{{date}} '‡πÄ‡∏ß‡∏•‡∏≤' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var th_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: th_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: th_lib_formatLong_timeFormats,
    defaultWidth: 'medium'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: th_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const th_lib_formatLong = (th_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/formatRelative/index.js
var th_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee'‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤' p",
  yesterday: "'‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤' p",
  today: "'‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤' p",
  tomorrow: "'‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤' p",
  nextWeek: "eeee '‡πÄ‡∏ß‡∏•‡∏≤' p",
  other: 'P'
};
var th_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return th_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const th_lib_formatRelative = (th_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/localize/index.js

var th_lib_localize_eraValues = {
  narrow: ['B', '‡∏Ñ‡∏®'],
  abbreviated: ['BC', '‡∏Ñ.‡∏®.'],
  wide: ['‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•', '‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä']
};
var th_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡πÅ‡∏£‡∏Å', '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á', '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°', '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà']
};
var th_lib_localize_dayValues = {
  narrow: ['‡∏≠‡∏≤.', '‡∏à.', '‡∏≠.', '‡∏û.', '‡∏û‡∏§.', '‡∏®.', '‡∏™.'],
  short: ['‡∏≠‡∏≤.', '‡∏à.', '‡∏≠.', '‡∏û.', '‡∏û‡∏§.', '‡∏®.', '‡∏™.'],
  abbreviated: ['‡∏≠‡∏≤.', '‡∏à.', '‡∏≠.', '‡∏û.', '‡∏û‡∏§.', '‡∏®.', '‡∏™.'],
  wide: ['‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå']
};
var th_lib_localize_monthValues = {
  narrow: ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'],
  abbreviated: ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'],
  wide: ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
};
var th_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    pm: '‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    midnight: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô',
    noon: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    morning: '‡πÄ‡∏ä‡πâ‡∏≤',
    afternoon: '‡∏ö‡πà‡∏≤‡∏¢',
    evening: '‡πÄ‡∏¢‡πá‡∏ô',
    night: '‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'
  },
  abbreviated: {
    am: '‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    pm: '‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    midnight: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô',
    noon: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    morning: '‡πÄ‡∏ä‡πâ‡∏≤',
    afternoon: '‡∏ö‡πà‡∏≤‡∏¢',
    evening: '‡πÄ‡∏¢‡πá‡∏ô',
    night: '‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'
  },
  wide: {
    am: '‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    pm: '‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    midnight: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô',
    noon: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    morning: '‡πÄ‡∏ä‡πâ‡∏≤',
    afternoon: '‡∏ö‡πà‡∏≤‡∏¢',
    evening: '‡πÄ‡∏¢‡πá‡∏ô',
    night: '‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'
  }
};
var th_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    pm: '‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    midnight: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô',
    noon: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    morning: '‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤',
    afternoon: '‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
    evening: '‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô',
    night: '‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'
  },
  abbreviated: {
    am: '‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    pm: '‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    midnight: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô',
    noon: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    morning: '‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤',
    afternoon: '‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
    evening: '‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô',
    night: '‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'
  },
  wide: {
    am: '‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    pm: '‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    midnight: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô',
    noon: '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
    morning: '‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤',
    afternoon: '‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',
    evening: '‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô',
    night: '‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'
  }
};
var th_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var th_lib_localize_localize = {
  ordinalNumber: th_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: th_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const th_lib_localize = (th_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/match/index.js


var th_lib_match_matchOrdinalNumberPattern = /^\d+/i;
var th_lib_match_parseOrdinalNumberPattern = /\d+/i;
var th_lib_match_matchEraPatterns = {
  narrow: /^([bB]|[aA]|‡∏Ñ‡∏®)/i,
  abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|‡∏Ñ\.?‡∏®\.?)/i,
  wide: /^(‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•)/i
};
var th_lib_match_parseEraPatterns = {
  any: [/^[bB]/i, /^(^[aA]|‡∏Ñ\.?‡∏®\.?|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä|)/i]
};
var th_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™(‡∏ó‡∏µ‡πà)? ?[1234]/i
};
var th_lib_match_parseQuarterPatterns = {
  any: [/(1|‡πÅ‡∏£‡∏Å|‡∏´‡∏ô‡∏∂‡πà‡∏á)/i, /(2|‡∏™‡∏≠‡∏á)/i, /(3|‡∏™‡∏≤‡∏°)/i, /(4|‡∏™‡∏µ‡πà)/i]
};
var th_lib_match_matchMonthPatterns = {
  narrow: /^(‡∏°\.?‡∏Ñ\.?|‡∏Å\.?‡∏û\.?|‡∏°‡∏µ\.?‡∏Ñ\.?|‡πÄ‡∏°\.?‡∏¢\.?|‡∏û\.?‡∏Ñ\.?|‡∏°‡∏¥\.?‡∏¢\.?|‡∏Å\.?‡∏Ñ\.?|‡∏™\.?‡∏Ñ\.?|‡∏Å\.?‡∏¢\.?|‡∏ï\.?‡∏Ñ\.?|‡∏û\.?‡∏¢\.?|‡∏ò\.?‡∏Ñ\.?)/i,
  abbreviated: /^(‡∏°\.?‡∏Ñ\.?|‡∏Å\.?‡∏û\.?|‡∏°‡∏µ\.?‡∏Ñ\.?|‡πÄ‡∏°\.?‡∏¢\.?|‡∏û\.?‡∏Ñ\.?|‡∏°‡∏¥\.?‡∏¢\.?|‡∏Å\.?‡∏Ñ\.?|‡∏™\.?‡∏Ñ\.?|‡∏Å\.?‡∏¢\.?|‡∏ï\.?‡∏Ñ\.?|‡∏û\.?‡∏¢\.?|‡∏ò\.?‡∏Ñ\.?')/i,
  wide: /^(‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°|‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå|‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°|‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô|‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°|‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô|‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°|‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°|‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô|‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°|‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô|‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)/i
};
var th_lib_match_parseMonthPatterns = {
  wide: [/^‡∏°‡∏Å/i, /^‡∏Å‡∏∏‡∏°/i, /^‡∏°‡∏µ/i, /^‡πÄ‡∏°/i, /^‡∏û‡∏§‡∏©/i, /^‡∏°‡∏¥/i, /^‡∏Å‡∏£‡∏Å/i, /^‡∏™/i, /^‡∏Å‡∏±‡∏ô/i, /^‡∏ï/i, /^‡∏û‡∏§‡∏®/i, /^‡∏ò/i],
  any: [/^‡∏°\.?‡∏Ñ\.?/i, /^‡∏Å\.?‡∏û\.?/i, /^‡∏°‡∏µ\.?‡∏Ñ\.?/i, /^‡πÄ‡∏°\.?‡∏¢\.?/i, /^‡∏û\.?‡∏Ñ\.?/i, /^‡∏°‡∏¥\.?‡∏¢\.?/i, /^‡∏Å\.?‡∏Ñ\.?/i, /^‡∏™\.?‡∏Ñ\.?/i, /^‡∏Å\.?‡∏¢\.?/i, /^‡∏ï\.?‡∏Ñ\.?/i, /^‡∏û\.?‡∏¢\.?/i, /^‡∏ò\.?‡∏Ñ\.?/i]
};
var th_lib_match_matchDayPatterns = {
  narrow: /^(‡∏≠‡∏≤\.?|‡∏à\.?|‡∏≠\.?|‡∏û‡∏§\.?|‡∏û\.?|‡∏®\.?|‡∏™\.?)/i,
  short: /^(‡∏≠‡∏≤\.?|‡∏à\.?|‡∏≠\.?|‡∏û‡∏§\.?|‡∏û\.?|‡∏®\.?|‡∏™\.?)/i,
  abbreviated: /^(‡∏≠‡∏≤\.?|‡∏à\.?|‡∏≠\.?|‡∏û‡∏§\.?|‡∏û\.?|‡∏®\.?|‡∏™\.?)/i,
  wide: /^(‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå|‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå|‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£|‡∏û‡∏∏‡∏ò|‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ|‡∏®‡∏∏‡∏Å‡∏£‡πå|‡πÄ‡∏™‡∏≤‡∏£‡πå)/i
};
var th_lib_match_parseDayPatterns = {
  wide: [/^‡∏≠‡∏≤/i, /^‡∏à‡∏±/i, /^‡∏≠‡∏±/i, /^‡∏û‡∏∏‡∏ò/i, /^‡∏û‡∏§/i, /^‡∏®/i, /^‡πÄ‡∏™/i],
  any: [/^‡∏≠‡∏≤/i, /^‡∏à/i, /^‡∏≠/i, /^‡∏û(?!‡∏§)/i, /^‡∏û‡∏§/i, /^‡∏®/i, /^‡∏™/i]
};
var th_lib_match_matchDayPeriodPatterns = {
  any: /^(‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô|‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|(‡∏ï‡∏≠‡∏ô.*?)?.*(‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|‡πÄ‡∏ä‡πâ‡∏≤|‡∏ö‡πà‡∏≤‡∏¢|‡πÄ‡∏¢‡πá‡∏ô|‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô))/i
};
var th_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á/i,
    pm: /^‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á/i,
    midnight: /^‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô/i,
    noon: /^‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á/i,
    morning: /‡πÄ‡∏ä‡πâ‡∏≤/i,
    afternoon: /‡∏ö‡πà‡∏≤‡∏¢/i,
    evening: /‡πÄ‡∏¢‡πá‡∏ô/i,
    night: /‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô/i
  }
};
var th_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: th_lib_match_matchOrdinalNumberPattern,
    parsePattern: th_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: th_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: th_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: th_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: th_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: th_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const th_lib_match = (th_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Thai locale.
 * @language Thai
 * @iso-639-2 tha
 * @author Athiwat Hirunworawongkun [@athivvat]{@link https://github.com/athivvat}
 * @author [@hawkup]{@link https://github.com/hawkup}
 * @author  Jirawat I. [@nodtem66]{@link https://github.com/nodtem66}
 */
var th_locale = {
  code: 'th',
  formatDistance: th_lib_formatDistance,
  formatLong: th_lib_formatLong,
  formatRelative: th_lib_formatRelative,
  localize: th_lib_localize,
  match: th_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const th = (th_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/formatDistance/index.js
var tr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'bir saniyeden az',
    other: '{{count}} saniyeden az'
  },
  xSeconds: {
    one: '1 saniye',
    other: '{{count}} saniye'
  },
  halfAMinute: 'yarƒ±m dakika',
  lessThanXMinutes: {
    one: 'bir dakikadan az',
    other: '{{count}} dakikadan az'
  },
  xMinutes: {
    one: '1 dakika',
    other: '{{count}} dakika'
  },
  aboutXHours: {
    one: 'yakla≈üƒ±k 1 saat',
    other: 'yakla≈üƒ±k {{count}} saat'
  },
  xHours: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  xDays: {
    one: '1 g√ºn',
    other: '{{count}} g√ºn'
  },
  aboutXWeeks: {
    one: 'yakla≈üƒ±k 1 hafta',
    other: 'yakla≈üƒ±k {{count}} hafta'
  },
  xWeeks: {
    one: '1 hafta',
    other: '{{count}} hafta'
  },
  aboutXMonths: {
    one: 'yakla≈üƒ±k 1 ay',
    other: 'yakla≈üƒ±k {{count}} ay'
  },
  xMonths: {
    one: '1 ay',
    other: '{{count}} ay'
  },
  aboutXYears: {
    one: 'yakla≈üƒ±k 1 yƒ±l',
    other: 'yakla≈üƒ±k {{count}} yƒ±l'
  },
  xYears: {
    one: '1 yƒ±l',
    other: '{{count}} yƒ±l'
  },
  overXYears: {
    one: '1 yƒ±ldan fazla',
    other: '{{count}} yƒ±ldan fazla'
  },
  almostXYears: {
    one: 'neredeyse 1 yƒ±l',
    other: 'neredeyse {{count}} yƒ±l'
  }
};
var tr_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = tr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' sonra';
    } else {
      return result + ' √∂nce';
    }
  }
  return result;
};
/* harmony default export */ const tr_lib_formatDistance = (tr_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/formatLong/index.js

var tr_lib_formatLong_dateFormats = {
  full: 'd MMMM y EEEE',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.yyyy'
};
var tr_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var tr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'saat' {{time}}",
  long: "{{date}} 'saat' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var tr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: tr_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: tr_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: tr_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const tr_lib_formatLong = (tr_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/formatRelative/index.js
var tr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ge√ßen hafta' eeee 'saat' p",
  yesterday: "'d√ºn saat' p",
  today: "'bug√ºn saat' p",
  tomorrow: "'yarƒ±n saat' p",
  nextWeek: "eeee 'saat' p",
  other: 'P'
};
var tr_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return tr_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const tr_lib_formatRelative = (tr_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/localize/index.js

var tr_lib_localize_eraValues = {
  narrow: ['M√ñ', 'MS'],
  abbreviated: ['M√ñ', 'MS'],
  wide: ['Milattan √ñnce', 'Milattan Sonra']
};
var tr_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1√á', '2√á', '3√á', '4√á'],
  wide: ['ƒ∞lk √ßeyrek', 'ƒ∞kinci √áeyrek', '√ú√ß√ºnc√º √ßeyrek', 'Son √ßeyrek']
};
var tr_lib_localize_monthValues = {
  narrow: ['O', '≈û', 'M', 'N', 'M', 'H', 'T', 'A', 'E', 'E', 'K', 'A'],
  abbreviated: ['Oca', '≈ûub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Aƒüu', 'Eyl', 'Eki', 'Kas', 'Ara'],
  wide: ['Ocak', '≈ûubat', 'Mart', 'Nisan', 'Mayƒ±s', 'Haziran', 'Temmuz', 'Aƒüustos', 'Eyl√ºl', 'Ekim', 'Kasƒ±m', 'Aralƒ±k']
};
var tr_lib_localize_dayValues = {
  narrow: ['P', 'P', 'S', '√á', 'P', 'C', 'C'],
  short: ['Pz', 'Pt', 'Sa', '√áa', 'Pe', 'Cu', 'Ct'],
  abbreviated: ['Paz', 'Pzt', 'Sal', '√áar', 'Per', 'Cum', 'Cts'],
  wide: ['Pazar', 'Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cuma', 'Cumartesi']
};
var tr_lib_localize_dayPeriodValues = {
  narrow: {
    am: '√∂√∂',
    pm: '√∂s',
    midnight: 'gy',
    noon: '√∂',
    morning: 'sa',
    afternoon: '√∂s',
    evening: 'ak',
    night: 'ge'
  },
  abbreviated: {
    am: '√ñ√ñ',
    pm: '√ñS',
    midnight: 'gece yarƒ±sƒ±',
    noon: '√∂ƒüle',
    morning: 'sabah',
    afternoon: '√∂ƒüleden sonra',
    evening: 'ak≈üam',
    night: 'gece'
  },
  wide: {
    am: '√ñ.√ñ.',
    pm: '√ñ.S.',
    midnight: 'gece yarƒ±sƒ±',
    noon: '√∂ƒüle',
    morning: 'sabah',
    afternoon: '√∂ƒüleden sonra',
    evening: 'ak≈üam',
    night: 'gece'
  }
};
var tr_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '√∂√∂',
    pm: '√∂s',
    midnight: 'gy',
    noon: '√∂',
    morning: 'sa',
    afternoon: '√∂s',
    evening: 'ak',
    night: 'ge'
  },
  abbreviated: {
    am: '√ñ√ñ',
    pm: '√ñS',
    midnight: 'gece yarƒ±sƒ±',
    noon: '√∂ƒülen',
    morning: 'sabahleyin',
    afternoon: '√∂ƒüleden sonra',
    evening: 'ak≈üamleyin',
    night: 'geceleyin'
  },
  wide: {
    am: '√∂.√∂.',
    pm: '√∂.s.',
    midnight: 'gece yarƒ±sƒ±',
    noon: '√∂ƒülen',
    morning: 'sabahleyin',
    afternoon: '√∂ƒüleden sonra',
    evening: 'ak≈üamleyin',
    night: 'geceleyin'
  }
};
var tr_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + '.';
};
var tr_lib_localize_localize = {
  ordinalNumber: tr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: tr_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const tr_lib_localize = (tr_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/match/index.js


var tr_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var tr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var tr_lib_match_matchEraPatterns = {
  narrow: /^(m√∂|ms)/i,
  abbreviated: /^(m√∂|ms)/i,
  wide: /^(milattan √∂nce|milattan sonra)/i
};
var tr_lib_match_parseEraPatterns = {
  any: [/(^m√∂|^milattan √∂nce)/i, /(^ms|^milattan sonra)/i]
};
var tr_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]√ß/i,
  wide: /^((i|ƒ∞)lk|(i|ƒ∞)kinci|√º√ß√ºnc√º|son) √ßeyrek/i
};
var tr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i],
  abbreviated: [/1√ß/i, /2√ß/i, /3√ß/i, /4√ß/i],
  wide: [/^(i|ƒ∞)lk √ßeyrek/i, /(i|ƒ∞)kinci √ßeyrek/i, /√º√ß√ºnc√º √ßeyrek/i, /son √ßeyrek/i]
};
var tr_lib_match_matchMonthPatterns = {
  narrow: /^[o≈ümnhtaek]/i,
  abbreviated: /^(oca|≈üub|mar|nis|may|haz|tem|aƒüu|eyl|eki|kas|ara)/i,
  wide: /^(ocak|≈üubat|mart|nisan|mayƒ±s|haziran|temmuz|aƒüustos|eyl√ºl|ekim|kasƒ±m|aralƒ±k)/i
};
var tr_lib_match_parseMonthPatterns = {
  narrow: [/^o/i, /^≈ü/i, /^m/i, /^n/i, /^m/i, /^h/i, /^t/i, /^a/i, /^e/i, /^e/i, /^k/i, /^a/i],
  any: [/^o/i, /^≈ü/i, /^mar/i, /^n/i, /^may/i, /^h/i, /^t/i, /^aƒü/i, /^ey/i, /^ek/i, /^k/i, /^ar/i]
};
var tr_lib_match_matchDayPatterns = {
  narrow: /^[ps√ßc]/i,
  short: /^(pz|pt|sa|√ßa|pe|cu|ct)/i,
  abbreviated: /^(paz|pzt|sal|√ßar|per|cum|cts)/i,
  wide: /^(pazar(?!tesi)|pazartesi|salƒ±|√ßar≈üamba|per≈üembe|cuma(?!rtesi)|cumartesi)/i
};
var tr_lib_match_parseDayPatterns = {
  narrow: [/^p/i, /^p/i, /^s/i, /^√ß/i, /^p/i, /^c/i, /^c/i],
  any: [/^pz/i, /^pt/i, /^sa/i, /^√ßa/i, /^pe/i, /^cu/i, /^ct/i],
  wide: [/^pazar(?!tesi)/i, /^pazartesi/i, /^salƒ±/i, /^√ßar≈üamba/i, /^per≈üembe/i, /^cuma(?!rtesi)/i, /^cumartesi/i]
};
var tr_lib_match_matchDayPeriodPatterns = {
  narrow: /^(√∂√∂|√∂s|gy|√∂|sa|√∂s|ak|ge)/i,
  any: /^(√∂\.?\s?[√∂s]\.?|√∂ƒüleden sonra|gece yarƒ±sƒ±|√∂ƒüle|(sabah|√∂ƒü|ak≈üam|gece)(leyin))/i
};
var tr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^√∂\.?√∂\.?/i,
    pm: /^√∂\.?s\.?/i,
    midnight: /^(gy|gece yarƒ±sƒ±)/i,
    noon: /^√∂ƒü/i,
    morning: /^sa/i,
    afternoon: /^√∂ƒüleden sonra/i,
    evening: /^ak/i,
    night: /^ge/i
  }
};
var tr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: tr_lib_match_matchOrdinalNumberPattern,
    parsePattern: tr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: tr_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: tr_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: tr_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: tr_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: tr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const tr_lib_match = (tr_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Turkish locale.
 * @language Turkish
 * @iso-639-2 tur
 * @author Alpcan Aydƒ±n [@alpcanaydin]{@link https://github.com/alpcanaydin}
 * @author Berkay Sargƒ±n [@berkaey]{@link https://github.com/berkaey}
 * @author Fatih Bulut [@bulutfatih]{@link https://github.com/bulutfatih}
 * @author Ismail Demirbilek [@dbtek]{@link https://github.com/dbtek}
 * @author ƒ∞smail Kayar [@ikayar]{@link https://github.com/ikayar}
 *
 *
 */
var tr_locale = {
  code: 'tr',
  formatDistance: tr_lib_formatDistance,
  formatLong: tr_lib_formatLong,
  formatRelative: tr_lib_formatRelative,
  localize: tr_lib_localize,
  match: tr_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const tr = (tr_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/formatDistance/index.js
var ug_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'ÿ®Ÿâÿ± ÿ≥ŸâŸÉ€áŸÜÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï',
    other: 'ÿ≥ŸâŸÉ€áŸÜÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï {{count}}'
  },
  xSeconds: {
    one: 'ÿ®Ÿâÿ± ÿ≥ŸâŸÉ€áŸÜÿ™',
    other: 'ÿ≥ŸâŸÉ€áŸÜÿ™ {{count}}'
  },
  halfAMinute: 'ŸäŸâÿ±ŸâŸÖ ŸÖŸâŸÜ€áÿ™',
  lessThanXMinutes: {
    one: 'ÿ®Ÿâÿ± ŸÖŸâŸÜ€áÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï',
    other: 'ŸÖŸâŸÜ€áÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï {{count}}'
  },
  xMinutes: {
    one: 'ÿ®Ÿâÿ± ŸÖŸâŸÜ€áÿ™',
    other: 'ŸÖŸâŸÜ€áÿ™ {{count}}'
  },
  aboutXHours: {
    one: 'ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ± ÿ≥ÿßÿ¶€ïÿ™',
    other: 'ÿ≥ÿßÿ¶€ïÿ™ {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ'
  },
  xHours: {
    one: 'ÿ®Ÿâÿ± ÿ≥ÿßÿ¶€ïÿ™',
    other: 'ÿ≥ÿßÿ¶€ïÿ™ {{count}}'
  },
  xDays: {
    one: 'ÿ®Ÿâÿ± ŸÉ€àŸÜ',
    other: 'ŸÉ€àŸÜ {{count}}'
  },
  aboutXWeeks: {
    one: 'ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ±⁄æ€ïŸæÿ™€ï',
    other: '⁄æ€ïŸæÿ™€ï {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ'
  },
  xWeeks: {
    one: 'ÿ®Ÿâÿ±⁄æ€ïŸæÿ™€ï',
    other: '⁄æ€ïŸæÿ™€ï {{count}}'
  },
  aboutXMonths: {
    one: 'ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ± ÿ¶ÿßŸä',
    other: 'ÿ¶ÿßŸä {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ'
  },
  xMonths: {
    one: 'ÿ®Ÿâÿ± ÿ¶ÿßŸä',
    other: 'ÿ¶ÿßŸä {{count}}'
  },
  aboutXYears: {
    one: 'ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ± ŸäŸâŸÑ',
    other: 'ŸäŸâŸÑ {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ'
  },
  xYears: {
    one: 'ÿ®Ÿâÿ± ŸäŸâŸÑ',
    other: 'ŸäŸâŸÑ {{count}}'
  },
  overXYears: {
    one: 'ÿ®Ÿâÿ± ŸäŸâŸÑÿØŸâŸÜ ÿ¶ÿßÿ±ÿ™€áŸÇ',
    other: 'ŸäŸâŸÑÿØŸâŸÜ ÿ¶ÿßÿ±ÿ™€áŸÇ {{count}}'
  },
  almostXYears: {
    one: 'ÿ¶ÿßÿ≥ÿßÿ≥€ïŸÜ ÿ®Ÿâÿ± ŸäŸâŸÑ',
    other: 'ŸäŸâŸÑ {{count}} ÿ¶ÿßÿ≥ÿßÿ≥€ïŸÜ'
  }
};
var ug_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = ug_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result;
    } else {
      return result + ' ÿ®ŸàŸÑÿØŸâ';
    }
  }
  return result;
};
/* harmony default export */ const ug_lib_formatDistance = (ug_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/formatLong/index.js

var ug_lib_formatLong_dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var ug_lib_formatLong_timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var ug_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'ÿØ€ï' {{time}}",
  long: "{{date}} 'ÿØ€ï' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var ug_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ug_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ug_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ug_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const ug_lib_formatLong = (ug_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/formatRelative/index.js
var ug_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ÿ¶‚Äç€Üÿ™ŸÉ€ïŸÜ' eeee 'ÿØ€ï' p",
  yesterday: "'ÿ™€àŸÜ€à⁄Ø€àŸÜ ÿØ€ï' p",
  today: "'ÿ®€à⁄Ø€àŸÜ ÿØ€ï' p",
  tomorrow: "'ÿ¶€ïÿ™€ï ÿØ€ï' p",
  nextWeek: "eeee 'ÿØ€ï' p",
  other: 'P'
};
var ug_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return ug_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ug_lib_formatRelative = (ug_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/localize/index.js

var ug_lib_localize_eraValues = {
  narrow: ['ÿ®', 'ŸÉ'],
  abbreviated: ['ÿ®', 'ŸÉ'],
  wide: ['ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ÿ®€áÿ±€áŸÜ', 'ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ŸÉŸâŸäŸâŸÜ']
};
var ug_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1', '2', '3', '4'],
  wide: ['ÿ®Ÿâÿ±ŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ', 'ÿ¶ŸâŸÉŸÉŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ', 'ÿ¶€à⁄ÜŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ', 'ÿ™€Üÿ™ŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var ug_lib_localize_monthValues = {
  narrow: ['Ÿä', 'ŸÅ', 'ŸÖ', 'ÿß', 'ŸÖ', 'Ÿâ', 'Ÿâ', 'ÿß', 'ÿ≥', '€Ü', 'ŸÜ', 'ÿØ'],
  abbreviated: ['ŸäÿßŸÜ€ãÿßÿ±', 'ŸÅ€ê€ãŸâÿ±ÿßŸÑ', 'ŸÖÿßÿ±ÿ™', 'ÿ¶ÿßŸæÿ±ŸâŸÑ', 'ŸÖÿßŸä', 'ÿ¶ŸâŸä€áŸÜ', 'ÿ¶ŸâŸäŸàŸÑ', 'ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™', 'ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±', 'ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±', 'ŸÜŸàŸäÿßÿ®Ÿâÿ±', 'ÿØŸâŸÉÿßÿ®Ÿâÿ±'],
  wide: ['ŸäÿßŸÜ€ãÿßÿ±', 'ŸÅ€ê€ãŸâÿ±ÿßŸÑ', 'ŸÖÿßÿ±ÿ™', 'ÿ¶ÿßŸæÿ±ŸâŸÑ', 'ŸÖÿßŸä', 'ÿ¶ŸâŸä€áŸÜ', 'ÿ¶ŸâŸäŸàŸÑ', 'ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™', 'ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±', 'ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±', 'ŸÜŸàŸäÿßÿ®Ÿâÿ±', 'ÿØŸâŸÉÿßÿ®Ÿâÿ±']
};
var ug_lib_localize_dayValues = {
  narrow: ['Ÿä', 'ÿØ', 'ÿ≥', '⁄Ü', 'Ÿæ', 'ÿ¨', 'ÿ¥'],
  short: ['Ÿä', 'ÿØ', 'ÿ≥', '⁄Ü', 'Ÿæ', 'ÿ¨', 'ÿ¥'],
  abbreviated: ['Ÿä€ïŸÉÿ¥€ïŸÜÿ®€ï', 'ÿØ€àÿ¥€ïŸÜÿ®€ï', 'ÿ≥€ïŸäÿ¥€ïŸÜÿ®€ï', '⁄Üÿßÿ±ÿ¥€ïŸÜÿ®€ï', 'Ÿæ€ïŸäÿ¥€ïŸÜÿ®€ï', 'ÿ¨€àŸÖ€ï', 'ÿ¥€ïŸÜÿ®€ï'],
  wide: ['Ÿä€ïŸÉÿ¥€ïŸÜÿ®€ï', 'ÿØ€àÿ¥€ïŸÜÿ®€ï', 'ÿ≥€ïŸäÿ¥€ïŸÜÿ®€ï', '⁄Üÿßÿ±ÿ¥€ïŸÜÿ®€ï', 'Ÿæ€ïŸäÿ¥€ïŸÜÿ®€ï', 'ÿ¨€àŸÖ€ï', 'ÿ¥€ïŸÜÿ®€ï']
};
var ug_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'ÿ¶€ï',
    pm: '⁄Ü',
    midnight: 'ŸÉ',
    noon: '⁄Ü',
    morning: 'ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ',
    afternoon: '⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ',
    evening: 'ÿ¶ÿßÿÆÿ¥ŸâŸÖ',
    night: 'ŸÉŸâ⁄Ü€ï'
  },
  abbreviated: {
    am: 'ÿ¶€ï',
    pm: '⁄Ü',
    midnight: 'ŸÉ',
    noon: '⁄Ü',
    morning: 'ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ',
    afternoon: '⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ',
    evening: 'ÿ¶ÿßÿÆÿ¥ŸâŸÖ',
    night: 'ŸÉŸâ⁄Ü€ï'
  },
  wide: {
    am: 'ÿ¶€ï',
    pm: '⁄Ü',
    midnight: 'ŸÉ',
    noon: '⁄Ü',
    morning: 'ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ',
    afternoon: '⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ',
    evening: 'ÿ¶ÿßÿÆÿ¥ŸâŸÖ',
    night: 'ŸÉŸâ⁄Ü€ï'
  }
};
var ug_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'ÿ¶€ï',
    pm: '⁄Ü',
    midnight: 'ŸÉ',
    noon: '⁄Ü',
    morning: 'ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜÿØ€ï',
    afternoon: '⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ',
    evening: 'ÿ¶ÿßÿÆÿ¥ÿßŸÖÿØÿß',
    night: 'ŸÉŸâ⁄ÜŸâÿØ€ï'
  },
  abbreviated: {
    am: 'ÿ¶€ï',
    pm: '⁄Ü',
    midnight: 'ŸÉ',
    noon: '⁄Ü',
    morning: 'ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜÿØ€ï',
    afternoon: '⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ',
    evening: 'ÿ¶ÿßÿÆÿ¥ÿßŸÖÿØÿß',
    night: 'ŸÉŸâ⁄ÜŸâÿØ€ï'
  },
  wide: {
    am: 'ÿ¶€ï',
    pm: '⁄Ü',
    midnight: 'ŸÉ',
    noon: '⁄Ü',
    morning: 'ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜÿØ€ï',
    afternoon: '⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ',
    evening: 'ÿ¶ÿßÿÆÿ¥ÿßŸÖÿØÿß',
    night: 'ŸÉŸâ⁄ÜŸâÿØ€ï'
  }
};
var ug_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ug_lib_localize_localize = {
  ordinalNumber: ug_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: ug_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const ug_lib_localize = (ug_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/match/index.js


var ug_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ug_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ug_lib_match_matchEraPatterns = {
  narrow: /^(ÿ®|ŸÉ)/i,
  wide: /^(ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ÿ®€áÿ±€áŸÜ|ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ŸÉŸâŸäŸâŸÜ)/i
};
var ug_lib_match_parseEraPatterns = {
  any: [/^ÿ®€áÿ±€áŸÜ/i, /^ŸÉŸâŸäŸâŸÜ/i]
};
var ug_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^⁄Ü[1234]/i,
  wide: /^⁄Üÿßÿ±€ïŸÉ [1234]/i
};
var ug_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ug_lib_match_matchMonthPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[ŸäŸÅŸÖÿ¶ÿßŸÖÿ¶‚Äçÿ¶ÿßÿ≥€ÜŸÜÿØ]/i,
  abbreviated: /^(ŸäÿßŸÜ€ãÿßÿ±|ŸÅ€ê€ãŸâÿ±ÿßŸÑ|ŸÖÿßÿ±ÿ™|ÿ¶ÿßŸæÿ±ŸâŸÑ|ŸÖÿßŸä|ÿ¶ŸâŸä€áŸÜ|ÿ¶ŸâŸäŸàŸÑ|ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™|ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±|ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±|ŸÜŸàŸäÿßÿ®Ÿâÿ±|ÿØŸâŸÉÿßÿ®Ÿâÿ±)/i,
  wide: /^(ŸäÿßŸÜ€ãÿßÿ±|ŸÅ€ê€ãŸâÿ±ÿßŸÑ|ŸÖÿßÿ±ÿ™|ÿ¶ÿßŸæÿ±ŸâŸÑ|ŸÖÿßŸä|ÿ¶ŸâŸä€áŸÜ|ÿ¶ŸâŸäŸàŸÑ|ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™|ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±|ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±|ŸÜŸàŸäÿßÿ®Ÿâÿ±|ÿØŸâŸÉÿßÿ®Ÿâÿ±)/i
};
var ug_lib_match_parseMonthPatterns = {
  narrow: [/^Ÿä/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿß/i, /^ŸÖ/i, /^Ÿâ‚Äç/i, /^Ÿâ‚Äç/i, /^ÿß‚Äç/i, /^ÿ≥/i, /^€Ü/i, /^ŸÜ/i, /^ÿØ/i],
  any: [/^ŸäÿßŸÜ/i, /^ŸÅ€ê€ã/i, /^ŸÖÿßÿ±/i, /^ÿ¶ÿßŸæ/i, /^ŸÖÿßŸä/i, /^ÿ¶ŸâŸä€áŸÜ/i, /^ÿ¶ŸâŸäŸàŸÑ/i, /^ÿ¶ÿß€ã/i, /^ÿ≥ŸâŸÜ/i, /^ÿ¶€ÜŸÉ/i, /^ŸÜŸàŸä/i, /^ÿØŸâŸÉ/i]
};
var ug_lib_match_matchDayPatterns = {
  narrow: /^[ÿØÿ≥⁄ÜŸæÿ¨ÿ¥Ÿä]/i,
  short: /^(Ÿä€ï|ÿØ€à|ÿ≥€ï|⁄Üÿß|Ÿæ€ï|ÿ¨€à|ÿ¥€ï)/i,
  abbreviated: /^(Ÿä€ï|ÿØ€à|ÿ≥€ï|⁄Üÿß|Ÿæ€ï|ÿ¨€à|ÿ¥€ï)/i,
  wide: /^(Ÿä€ïŸÉÿ¥€ïŸÜÿ®€ï|ÿØ€àÿ¥€ïŸÜÿ®€ï|ÿ≥€ïŸäÿ¥€ïŸÜÿ®€ï|⁄Üÿßÿ±ÿ¥€ïŸÜÿ®€ï|Ÿæ€ïŸäÿ¥€ïŸÜÿ®€ï|ÿ¨€àŸÖ€ï|ÿ¥€ïŸÜÿ®€ï)/i
};
var ug_lib_match_parseDayPatterns = {
  narrow: [/^Ÿä/i, /^ÿØ/i, /^ÿ≥/i, /^⁄Ü/i, /^Ÿæ/i, /^ÿ¨/i, /^ÿ¥/i],
  any: [/^Ÿä/i, /^ÿØ/i, /^ÿ≥/i, /^⁄Ü/i, /^Ÿæ/i, /^ÿ¨/i, /^ÿ¥/i]
};
var ug_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ÿ¶€ï|⁄Ü|ŸÉ|⁄Ü|(ÿØ€ï|ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ) ( ÿ¶€ï‚Äç|⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ|ÿ¶ÿßÿÆÿ¥ŸâŸÖ|ŸÉŸâ⁄Ü€ï))/i,
  any: /^(ÿ¶€ï|⁄Ü|ŸÉ|⁄Ü|(ÿØ€ï|ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ) ( ÿ¶€ï‚Äç|⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ|ÿ¶ÿßÿÆÿ¥ŸâŸÖ|ŸÉŸâ⁄Ü€ï))/i
};
var ug_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ÿ¶€ï/i,
    pm: /^⁄Ü/i,
    midnight: /^ŸÉ/i,
    noon: /^⁄Ü/i,
    morning: /ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ/i,
    afternoon: /⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ/i,
    evening: /ÿ¶ÿßÿÆÿ¥ŸâŸÖ/i,
    night: /ŸÉŸâ⁄Ü€ï/i
  }
};
var ug_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ug_lib_match_matchOrdinalNumberPattern,
    parsePattern: ug_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ug_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ug_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ug_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: ug_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: ug_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const ug_lib_match = (ug_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Uighur locale
 * @language Uighur
 * @iso-639-2 uig
 * @author Abduwaly M. [@abduwaly]{@link https://github.com/abduwaly}
 */
var ug_locale = {
  code: 'ug',
  formatDistance: ug_lib_formatDistance,
  formatLong: ug_lib_formatLong,
  formatRelative: ug_lib_formatRelative,
  localize: ug_lib_localize,
  match: ug_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ug = (ug_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/formatDistance/index.js
function uk_lib_formatDistance_declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', String(count));
  }
}
function uk_lib_formatDistance_buildLocalizeTokenFn(scheme) {
  return function (count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return uk_lib_formatDistance_declension(scheme.future, count);
        } else {
          return '–∑–∞ ' + uk_lib_formatDistance_declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return uk_lib_formatDistance_declension(scheme.past, count);
        } else {
          return uk_lib_formatDistance_declension(scheme.regular, count) + ' —Ç–æ–º—É';
        }
      }
    } else {
      return uk_lib_formatDistance_declension(scheme.regular, count);
    }
  };
}
var halfAtMinute = function halfAtMinute(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return '–∑–∞ –ø—ñ–≤—Ö–≤–∏–ª–∏–Ω–∏';
    } else {
      return '–ø—ñ–≤—Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É';
    }
  }
  return '–ø—ñ–≤—Ö–≤–∏–ª–∏–Ω–∏';
};
var uk_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—à–µ —Å–µ–∫—É–Ω–¥–∏',
      singularNominative: '–º–µ–Ω—à–µ {{count}} —Å–µ–∫—É–Ω–¥–∏',
      singularGenitive: '–º–µ–Ω—à–µ {{count}} —Å–µ–∫—É–Ω–¥',
      pluralGenitive: '–º–µ–Ω—à–µ {{count}} —Å–µ–∫—É–Ω–¥'
    },
    future: {
      one: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ —Å–µ–∫—É–Ω–¥—É',
      singularNominative: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥–∏',
      pluralGenitive: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  xSeconds: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥–∞',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥–∏',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥'
    },
    past: {
      singularNominative: '{{count}} —Å–µ–∫—É–Ω–¥—É —Ç–æ–º—É',
      singularGenitive: '{{count}} —Å–µ–∫—É–Ω–¥–∏ —Ç–æ–º—É',
      pluralGenitive: '{{count}} —Å–µ–∫—É–Ω–¥ —Ç–æ–º—É'
    },
    future: {
      singularNominative: '–∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É',
      singularGenitive: '–∑–∞ {{count}} —Å–µ–∫—É–Ω–¥–∏',
      pluralGenitive: '–∑–∞ {{count}} —Å–µ–∫—É–Ω–¥'
    }
  }),
  halfAMinute: halfAtMinute,
  lessThanXMinutes: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: '–º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏',
      singularNominative: '–º–µ–Ω—à–µ {{count}} —Ö–≤–∏–ª–∏–Ω–∏',
      singularGenitive: '–º–µ–Ω—à–µ {{count}} —Ö–≤–∏–ª–∏–Ω',
      pluralGenitive: '–º–µ–Ω—à–µ {{count}} —Ö–≤–∏–ª–∏–Ω'
    },
    future: {
      one: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É',
      singularNominative: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω—É',
      singularGenitive: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω–∏',
      pluralGenitive: '–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω'
    }
  }),
  xMinutes: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Ö–≤–∏–ª–∏–Ω–∞',
      singularGenitive: '{{count}} —Ö–≤–∏–ª–∏–Ω–∏',
      pluralGenitive: '{{count}} —Ö–≤–∏–ª–∏–Ω'
    },
    past: {
      singularNominative: '{{count}} —Ö–≤–∏–ª–∏–Ω—É —Ç–æ–º—É',
      singularGenitive: '{{count}} —Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É',
      pluralGenitive: '{{count}} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É'
    },
    future: {
      singularNominative: '–∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω—É',
      singularGenitive: '–∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω–∏',
      pluralGenitive: '–∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω'
    }
  }),
  aboutXHours: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–ª–∏–∑—å–∫–æ {{count}} –≥–æ–¥–∏–Ω–∏',
      singularGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} –≥–æ–¥–∏–Ω',
      pluralGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} –≥–æ–¥–∏–Ω'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –≥–æ–¥–∏–Ω—É',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –≥–æ–¥–∏–Ω–∏',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –≥–æ–¥–∏–Ω'
    }
  }),
  xHours: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –≥–æ–¥–∏–Ω—É',
      singularGenitive: '{{count}} –≥–æ–¥–∏–Ω–∏',
      pluralGenitive: '{{count}} –≥–æ–¥–∏–Ω'
    }
  }),
  xDays: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –¥–µ–Ω—å',
      singularGenitive: '{{count}} –¥–Ωi',
      pluralGenitive: '{{count}} –¥–Ω—ñ–≤'
    }
  }),
  aboutXWeeks: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–ª–∏–∑—å–∫–æ {{count}} —Ç–∏–∂–Ω—è',
      singularGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} —Ç–∏–∂–Ω—ñ–≤',
      pluralGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} —Ç–∏–∂–Ω—ñ–≤'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ç–∏–∂–¥–µ–Ω—å',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ç–∏–∂–Ω—ñ',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ç–∏–∂–Ω—ñ–≤'
    }
  }),
  xWeeks: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Ç–∏–∂–¥–µ–Ω—å',
      singularGenitive: '{{count}} —Ç–∏–∂–Ω—ñ',
      pluralGenitive: '{{count}} —Ç–∏–∂–Ω—ñ–≤'
    }
  }),
  aboutXMonths: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–ª–∏–∑—å–∫–æ {{count}} –º—ñ—Å—è—Ü—è',
      singularGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} –º—ñ—Å—è—Ü—ñ–≤',
      pluralGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} –º—ñ—Å—è—Ü—ñ–≤'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –º—ñ—Å—è—Ü—å',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –º—ñ—Å—è—Ü—ñ',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –º—ñ—Å—è—Ü—ñ–≤'
    }
  }),
  xMonths: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} –º—ñ—Å—è—Ü—å',
      singularGenitive: '{{count}} –º—ñ—Å—è—Ü—ñ',
      pluralGenitive: '{{count}} –º—ñ—Å—è—Ü—ñ–≤'
    }
  }),
  aboutXYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±–ª–∏–∑—å–∫–æ {{count}} —Ä–æ–∫—É',
      singularGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} —Ä–æ–∫—ñ–≤',
      pluralGenitive: '–±–ª–∏–∑—å–∫–æ {{count}} —Ä–æ–∫—ñ–≤'
    },
    future: {
      singularNominative: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ä—ñ–∫',
      singularGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ä–æ–∫–∏',
      pluralGenitive: '–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ä–æ–∫—ñ–≤'
    }
  }),
  xYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} —Ä—ñ–∫',
      singularGenitive: '{{count}} —Ä–æ–∫–∏',
      pluralGenitive: '{{count}} —Ä–æ–∫—ñ–≤'
    }
  }),
  overXYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–±—ñ–ª—å—à–µ {{count}} —Ä–æ–∫—É',
      singularGenitive: '–±—ñ–ª—å—à–µ {{count}} —Ä–æ–∫—ñ–≤',
      pluralGenitive: '–±—ñ–ª—å—à–µ {{count}} —Ä–æ–∫—ñ–≤'
    },
    future: {
      singularNominative: '–±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ä—ñ–∫',
      singularGenitive: '–±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ä–æ–∫–∏',
      pluralGenitive: '–±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ä–æ–∫—ñ–≤'
    }
  }),
  almostXYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: '–º–∞–π–∂–µ {{count}} —Ä—ñ–∫',
      singularGenitive: '–º–∞–π–∂–µ {{count}} —Ä–æ–∫–∏',
      pluralGenitive: '–º–∞–π–∂–µ {{count}} —Ä–æ–∫—ñ–≤'
    },
    future: {
      singularNominative: '–º–∞–π–∂–µ –∑–∞ {{count}} —Ä—ñ–∫',
      singularGenitive: '–º–∞–π–∂–µ –∑–∞ {{count}} —Ä–æ–∫–∏',
      pluralGenitive: '–º–∞–π–∂–µ –∑–∞ {{count}} —Ä–æ–∫—ñ–≤'
    }
  })
};
var uk_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  options = options || {};
  return uk_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const uk_lib_formatDistance = (uk_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/formatLong/index.js

var uk_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y '—Ä.'",
  long: "do MMMM y '—Ä.'",
  medium: "d MMM y '—Ä.'",
  short: 'dd.MM.y'
};
var uk_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var uk_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '–æ' {{time}}",
  long: "{{date}} '–æ' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var uk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: uk_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: uk_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: uk_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const uk_lib_formatLong = (uk_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/formatRelative/index.js


var uk_lib_formatRelative_accusativeWeekdays = ['–Ω–µ–¥—ñ–ª—é', '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä', '–ø‚Äô—è—Ç–Ω–∏—Ü—é', '—Å—É–±–æ—Ç—É'];
function uk_lib_formatRelative_lastWeek(day) {
  var weekday = uk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –º–∏–Ω—É–ª—É " + weekday + " –æ' p";
    case 1:
    case 2:
    case 4:
      return "'—É –º–∏–Ω—É–ª–∏–π " + weekday + " –æ' p";
  }
}
function uk_lib_formatRelative_thisWeek(day) {
  var weekday = uk_lib_formatRelative_accusativeWeekdays[day];
  return "'—É " + weekday + " –æ' p";
}
function uk_lib_formatRelative_nextWeek(day) {
  var weekday = uk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—É " + weekday + " –æ' p";
    case 1:
    case 2:
    case 4:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω–∏–π " + weekday + " –æ' p";
  }
}
var _lib_formatRelative_lastWeekFormat = function lastWeekFormat(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return uk_lib_formatRelative_thisWeek(day);
  } else {
    return uk_lib_formatRelative_lastWeek(day);
  }
};
var _lib_formatRelative_nextWeekFormat = function nextWeekFormat(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return uk_lib_formatRelative_thisWeek(day);
  } else {
    return uk_lib_formatRelative_nextWeek(day);
  }
};
var uk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: _lib_formatRelative_lastWeekFormat,
  yesterday: "'–≤—á–æ—Ä–∞ –æ' p",
  today: "'—Å—å–æ–≥–æ–¥–Ω—ñ –æ' p",
  tomorrow: "'–∑–∞–≤—Ç—Ä–∞ –æ' p",
  nextWeek: _lib_formatRelative_nextWeekFormat,
  other: 'P'
};
var uk_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = uk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const uk_lib_formatRelative = (uk_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/localize/index.js

var uk_lib_localize_eraValues = {
  narrow: ['–¥–æ –Ω.–µ.', '–Ω.–µ.'],
  abbreviated: ['–¥–æ –Ω. –µ.', '–Ω. –µ.'],
  wide: ['–¥–æ –Ω–∞—à–æ—ó –µ—Ä–∏', '–Ω–∞—à–æ—ó –µ—Ä–∏']
};
var uk_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-–π –∫–≤.', '2-–π –∫–≤.', '3-–π –∫–≤.', '4-–π –∫–≤.'],
  wide: ['1-–π –∫–≤–∞—Ä—Ç–∞–ª', '2-–π –∫–≤–∞—Ä—Ç–∞–ª', '3-–π –∫–≤–∞—Ä—Ç–∞–ª', '4-–π –∫–≤–∞—Ä—Ç–∞–ª']
};
var uk_lib_localize_monthValues = {
  // –î–°–¢–£ 3582:2013
  narrow: ['–°', '–õ', '–ë', '–ö', '–¢', '–ß', '–õ', '–°', '–í', '–ñ', '–õ', '–ì'],
  abbreviated: ['—Å—ñ—á.', '–ª—é—Ç.', '–±–µ—Ä–µ–∑.', '–∫–≤—ñ—Ç.', '—Ç—Ä–∞–≤.', '—á–µ—Ä–≤.', '–ª–∏–ø.', '—Å–µ—Ä–ø.', '–≤–µ—Ä–µ—Å.', '–∂–æ–≤—Ç.', '–ª–∏—Å—Ç–æ–ø.', '–≥—Ä—É–¥.'],
  wide: ['—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å', '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å']
};
var uk_lib_localize_formattingMonthValues = {
  narrow: ['–°', '–õ', '–ë', '–ö', '–¢', '–ß', '–õ', '–°', '–í', '–ñ', '–õ', '–ì'],
  abbreviated: ['—Å—ñ—á.', '–ª—é—Ç.', '–±–µ—Ä–µ–∑.', '–∫–≤—ñ—Ç.', '—Ç—Ä–∞–≤.', '—á–µ—Ä–≤.', '–ª–∏–ø.', '—Å–µ—Ä–ø.', '–≤–µ—Ä–µ—Å.', '–∂–æ–≤—Ç.', '–ª–∏—Å—Ç–æ–ø.', '–≥—Ä—É–¥.'],
  wide: ['—Å—ñ—á–Ω—è', '–ª—é—Ç–æ–≥–æ', '–±–µ—Ä–µ–∑–Ω—è', '–∫–≤—ñ—Ç–Ω—è', '—Ç—Ä–∞–≤–Ω—è', '—á–µ—Ä–≤–Ω—è', '–ª–∏–ø–Ω—è', '—Å–µ—Ä–ø–Ω—è', '–≤–µ—Ä–µ—Å–Ω—è', '–∂–æ–≤—Ç–Ω—è', '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–≥—Ä—É–¥–Ω—è']
};
var uk_lib_localize_dayValues = {
  narrow: ['–ù', '–ü', '–í', '–°', '–ß', '–ü', '–°'],
  short: ['–Ω–¥', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'],
  abbreviated: ['–Ω–µ–¥', '–ø–æ–Ω', '–≤—ñ–≤', '—Å–µ—Ä', '—á—Ç–≤', '–ø—Ç–Ω', '—Å—É–±'],
  wide: ['–Ω–µ–¥—ñ–ª—è', '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä', '–ø‚Äô—è—Ç–Ω–∏—Ü—è', '—Å—É–±–æ—Ç–∞']
};
var uk_lib_localize_dayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø—ñ–≤–Ω.',
    noon: '–ø–æ–ª.',
    morning: '—Ä–∞–Ω–æ–∫',
    afternoon: '–¥–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω—ñ—á'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø—ñ–≤–Ω.',
    noon: '–ø–æ–ª.',
    morning: '—Ä–∞–Ω–æ–∫',
    afternoon: '–¥–µ–Ω—å',
    evening: '–≤–µ—á.',
    night: '–Ω—ñ—á'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø—ñ–≤–Ω—ñ—á',
    noon: '–ø–æ–ª—É–¥–µ–Ω—å',
    morning: '—Ä–∞–Ω–æ–∫',
    afternoon: '–¥–µ–Ω—å',
    evening: '–≤–µ—á—ñ—Ä',
    night: '–Ω—ñ—á'
  }
};
var uk_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø—ñ–≤–Ω.',
    noon: '–ø–æ–ª.',
    morning: '—Ä–∞–Ω–∫—É',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ñ'
  },
  abbreviated: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø—ñ–≤–Ω.',
    noon: '–ø–æ–ª.',
    morning: '—Ä–∞–Ω–∫—É',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ñ'
  },
  wide: {
    am: '–î–ü',
    pm: '–ü–ü',
    midnight: '–ø—ñ–≤–Ω—ñ—á',
    noon: '–ø–æ–ª—É–¥–µ–Ω—å',
    morning: '—Ä–∞–Ω–∫—É',
    afternoon: '–¥–Ω—è',
    evening: '–≤–µ—á.',
    night: '–Ω–æ—á—ñ'
  }
};
var uk_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;
  if (unit === 'date') {
    if (number === 3 || number === 23) {
      suffix = '-—î';
    } else {
      suffix = '-–µ';
    }
  } else if (unit === 'minute' || unit === 'second' || unit === 'hour') {
    suffix = '-–∞';
  } else {
    suffix = '-–π';
  }
  return number + suffix;
};
var uk_lib_localize_localize = {
  ordinalNumber: uk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: uk_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_dayPeriodValues,
    defaultWidth: 'any',
    formattingValues: uk_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const uk_lib_localize = (uk_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/match/index.js


var uk_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(–µ|–π|—î|–∞|—è))?/i;
var uk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var uk_lib_match_matchEraPatterns = {
  narrow: /^((–¥–æ )?–Ω\.?\s?–µ\.?)/i,
  abbreviated: /^((–¥–æ )?–Ω\.?\s?–µ\.?)/i,
  wide: /^(–¥–æ –Ω–∞—à–æ—ó –µ—Ä–∏|–Ω–∞—à–æ—ó –µ—Ä–∏|–Ω–∞—à–∞ –µ—Ä–∞)/i
};
var uk_lib_match_parseEraPatterns = {
  any: [/^–¥/i, /^–Ω/i]
};
var uk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[–∏—ñ]?–π?)? –∫–≤.?/i,
  wide: /^[1234](-?[–∏—ñ]?–π?)? –∫–≤–∞—Ä—Ç–∞–ª/i
};
var uk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var uk_lib_match_matchMonthPatterns = {
  narrow: /^[—Å–ª–±–∫—Ç—á–≤–∂–≥]/i,
  abbreviated: /^(—Å—ñ—á|–ª—é—Ç|–±–µ—Ä(–µ–∑)?|–∫–≤—ñ—Ç|—Ç—Ä–∞–≤|—á–µ—Ä–≤|–ª–∏–ø|—Å–µ—Ä–ø|–≤–µ—Ä(–µ—Å)?|–∂–æ–≤—Ç|–ª–∏—Å(—Ç–æ–ø)?|–≥—Ä—É–¥)\.?/i,
  wide: /^(—Å—ñ—á–µ–Ω—å|—Å—ñ—á–Ω—è|–ª—é—Ç–∏–π|–ª—é—Ç–æ–≥–æ|–±–µ—Ä–µ–∑–µ–Ω—å|–±–µ—Ä–µ–∑–Ω—è|–∫–≤—ñ—Ç–µ–Ω—å|–∫–≤—ñ—Ç–Ω—è|—Ç—Ä–∞–≤–µ–Ω—å|—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è|—á–µ—Ä–≤–µ–Ω—å|–ª–∏–ø–µ–Ω—å|–ª–∏–ø–Ω—è|—Å–µ—Ä–ø–µ–Ω—å|—Å–µ—Ä–ø–Ω—è|–≤–µ—Ä–µ—Å–µ–Ω—å|–≤–µ—Ä–µ—Å–Ω—è|–∂–æ–≤—Ç–µ–Ω—å|–∂–æ–≤—Ç–Ω—è|–ª–∏—Å—Ç–æ–ø–∞–¥[–∞]?|–≥—Ä—É–¥–µ–Ω—å|–≥—Ä—É–¥–Ω—è)/i
};
var uk_lib_match_parseMonthPatterns = {
  narrow: [/^—Å/i, /^–ª/i, /^–±/i, /^–∫/i, /^—Ç/i, /^—á/i, /^–ª/i, /^—Å/i, /^–≤/i, /^–∂/i, /^–ª/i, /^–≥/i],
  any: [/^—Å—ñ/i, /^–ª—é/i, /^–±/i, /^–∫/i, /^—Ç/i, /^—á/i, /^–ª–∏–ø/i, /^—Å–µ/i, /^–≤/i, /^–∂/i, /^–ª–∏—Å/i, /^–≥/i]
};
var uk_lib_match_matchDayPatterns = {
  narrow: /^[–Ω–ø–≤—Å—á]/i,
  short: /^(–Ω–¥|–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±)\.?/i,
  abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|–≤—ñ–≤|—Å–µ—Ä|—á–µ?—Ç–≤|–ø—Ç–Ω?|—Å—É–±)\.?/i,
  wide: /^(–Ω–µ–¥—ñ–ª[—è—ñ]|–ø–æ–Ω–µ–¥—ñ–ª[–æ–∫][–∫–∞]|–≤—ñ–≤—Ç–æ—Ä[–æ–∫][–∫–∞]|—Å–µ—Ä–µ–¥[–∞–∏]|—á–µ—Ç–≤–µ—Ä(–≥–∞)?|–ø\W*?—è—Ç–Ω–∏—Ü[—è—ñ]|—Å—É–±–æ—Ç[–∞–∏])/i
};
var uk_lib_match_parseDayPatterns = {
  narrow: [/^–Ω/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
  any: [/^–Ω/i, /^–ø[–æ–Ω]/i, /^–≤/i, /^—Å[–µ—Ä]/i, /^—á/i, /^–ø\W*?[—è—Ç]/i, /^—Å[—É–±]/i]
};
var uk_lib_match_matchDayPeriodPatterns = {
  narrow: /^([–¥–ø]–ø|–ø—ñ–≤–Ω\.?|–ø–æ–ª\.?|—Ä–∞–Ω–æ–∫|—Ä–∞–Ω–∫—É|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω—ñ—á|–Ω–æ—á—ñ)/i,
  abbreviated: /^([–¥–ø]–ø|–ø—ñ–≤–Ω\.?|–ø–æ–ª\.?|—Ä–∞–Ω–æ–∫|—Ä–∞–Ω–∫—É|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω—ñ—á|–Ω–æ—á—ñ)/i,
  wide: /^([–¥–ø]–ø|–ø—ñ–≤–Ω—ñ—á|–ø–æ–ª—É–¥–µ–Ω—å|—Ä–∞–Ω–æ–∫|—Ä–∞–Ω–∫—É|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á—ñ—Ä|–≤–µ—á–æ—Ä–∞|–Ω—ñ—á|–Ω–æ—á—ñ)/i
};
var uk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–¥–ø/i,
    pm: /^–ø–ø/i,
    midnight: /^–ø—ñ–≤–Ω/i,
    noon: /^–ø–æ–ª/i,
    morning: /^—Ä/i,
    afternoon: /^–¥[–µ–Ω]/i,
    evening: /^–≤/i,
    night: /^–Ω/i
  }
};
var uk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: uk_lib_match_matchOrdinalNumberPattern,
    parsePattern: uk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uk_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uk_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uk_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uk_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const uk_lib_match = (uk_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Ukrainian locale.
 * @language Ukrainian
 * @iso-639-2 ukr
 * @author Andrii Korzh [@korzhyk]{@link https://github.com/korzhyk}
 * @author Andriy Shcherbyak [@shcherbyakdev]{@link https://github.com/shcherbyakdev}
 */
var uk_locale = {
  code: 'uk',
  formatDistance: uk_lib_formatDistance,
  formatLong: uk_lib_formatLong,
  formatRelative: uk_lib_formatRelative,
  localize: uk_lib_localize,
  match: uk_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const uk = (uk_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/formatDistance/index.js
var uz_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'sekunddan kam',
    other: '{{count}} sekunddan kam'
  },
  xSeconds: {
    one: '1 sekund',
    other: '{{count}} sekund'
  },
  halfAMinute: 'yarim minut',
  lessThanXMinutes: {
    one: 'bir minutdan kam',
    other: '{{count}} minutdan kam'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: 'tahminan 1 soat',
    other: 'tahminan {{count}} soat'
  },
  xHours: {
    one: '1 soat',
    other: '{{count}} soat'
  },
  xDays: {
    one: '1 kun',
    other: '{{count}} kun'
  },
  aboutXWeeks: {
    one: 'tahminan 1 hafta',
    other: 'tahminan {{count}} hafta'
  },
  xWeeks: {
    one: '1 hafta',
    other: '{{count}} hafta'
  },
  aboutXMonths: {
    one: 'tahminan 1 oy',
    other: 'tahminan {{count}} oy'
  },
  xMonths: {
    one: '1 oy',
    other: '{{count}} oy'
  },
  aboutXYears: {
    one: 'tahminan 1 yil',
    other: 'tahminan {{count}} yil'
  },
  xYears: {
    one: '1 yil',
    other: '{{count}} yil'
  },
  overXYears: {
    one: "1 yildan ko'p",
    other: "{{count}} yildan ko'p"
  },
  almostXYears: {
    one: 'deyarli 1 yil',
    other: 'deyarli {{count}} yil'
  }
};
var uz_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = uz_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' dan keyin';
    } else {
      return result + ' oldin';
    }
  }
  return result;
};
/* harmony default export */ const uz_lib_formatDistance = (uz_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/formatLong/index.js

var uz_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM, y',
  long: 'do MMMM, y',
  medium: 'd MMM, y',
  short: 'dd/MM/yyyy'
};
var uz_lib_formatLong_timeFormats = {
  full: 'h:mm:ss zzzz',
  long: 'h:mm:ss z',
  medium: 'h:mm:ss',
  short: 'h:mm'
};
var uz_lib_formatLong_dateTimeFormats = {
  any: '{{date}}, {{time}}'
};
var uz_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const uz_lib_formatLong = (uz_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/formatRelative/index.js
var uz_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'oldingi' eeee p 'da'",
  yesterday: "'kecha' p 'da'",
  today: "'bugun' p 'da'",
  tomorrow: "'ertaga' p 'da'",
  nextWeek: "eeee p 'da'",
  other: 'P'
};
var uz_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return uz_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const uz_lib_formatRelative = (uz_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/localize/index.js

var uz_lib_localize_eraValues = {
  narrow: ['M.A', 'M.'],
  abbreviated: ['M.A', 'M.'],
  wide: ['Miloddan Avvalgi', 'Milodiy']
};
var uz_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['CH.1', 'CH.2', 'CH.3', 'CH.4'],
  wide: ['1-chi chorak', '2-chi chorak', '3-chi chorak', '4-chi chorak']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var uz_lib_localize_monthValues = {
  narrow: ['Y', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'Iyun', 'Iyul', 'Avg', 'Sen', 'Okt', 'Noy', 'Dek'],
  wide: ['Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'Iyun', 'Iyul', 'Avgust', 'Sentabr', 'Oktabr', 'Noyabr', 'Dekabr']
};
var uz_lib_localize_dayValues = {
  narrow: ['Y', 'D', 'S', 'CH', 'P', 'J', 'SH'],
  short: ['Ya', 'Du', 'Se', 'Cho', 'Pa', 'Ju', 'Sha'],
  abbreviated: ['Yak', 'Dush', 'Sesh', 'Chor', 'Pay', 'Jum', 'Shan'],
  wide: ['Yakshanba', 'Dushanba', 'Seshanba', 'Chorshanba', 'Payshanba', 'Juma', 'Shanba']
};
var uz_lib_localize_dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'y.t',
    noon: 'p.',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  }
};
var uz_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'y.t',
    noon: 'p.',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'yarim tun',
    noon: 'peshin',
    morning: 'ertalab',
    afternoon: 'tushdan keyin',
    evening: 'kechqurun',
    night: 'tun'
  }
};
var uz_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var uz_lib_localize_localize = {
  ordinalNumber: uz_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: uz_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const uz_lib_localize = (uz_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/match/index.js


var uz_lib_match_matchOrdinalNumberPattern = /^(\d+)(chi)?/i;
var uz_lib_match_parseOrdinalNumberPattern = /\d+/i;
var uz_lib_match_matchEraPatterns = {
  narrow: /^(m\.a|m\.)/i,
  abbreviated: /^(m\.a\.?\s?m\.?)/i,
  wide: /^(miloddan avval|miloddan keyin)/i
};
var uz_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var uz_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](chi)? chorak/i
};
var uz_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var uz_lib_match_matchMonthPatterns = {
  narrow: /^[yfmasond]/i,
  abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
  wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i
};
var uz_lib_match_parseMonthPatterns = {
  narrow: [/^y/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ya/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^iyun/i, /^iyul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var uz_lib_match_matchDayPatterns = {
  narrow: /^[ydschj]/i,
  short: /^(ya|du|se|cho|pa|ju|sha)/i,
  abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
  wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i
};
var uz_lib_match_parseDayPatterns = {
  narrow: [/^y/i, /^d/i, /^s/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
  any: [/^ya/i, /^d/i, /^se/i, /^ch/i, /^p/i, /^j/i, /^sh/i]
};
var uz_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
  any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i
};
var uz_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^y\.t/i,
    noon: /^pe/i,
    morning: /ertalab/i,
    afternoon: /tushdan keyin/i,
    evening: /kechqurun/i,
    night: /tun/i
  }
};
var uz_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: uz_lib_match_matchOrdinalNumberPattern,
    parsePattern: uz_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: uz_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const uz_lib_match = (uz_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Uzbek locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Mukhammadali [@mukhammadali]{@link https://github.com/Mukhammadali}
 */
var uz_locale = {
  code: 'uz',
  formatDistance: uz_lib_formatDistance,
  formatLong: uz_lib_formatLong,
  formatRelative: uz_lib_formatRelative,
  localize: uz_lib_localize,
  match: uz_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const uz = (uz_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/formatDistance/index.js
var uz_Cyrl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '1 —Å–æ–Ω–∏—è–¥–∞–Ω –∫–∞–º',
    other: '{{count}} —Å–æ–Ω–∏—è–¥–∞–Ω –∫–∞–º'
  },
  xSeconds: {
    one: '1 —Å–æ–Ω–∏—è',
    other: '{{count}} —Å–æ–Ω–∏—è'
  },
  halfAMinute: '—è—Ä–∏–º –¥–∞“õ–∏“õ–∞',
  lessThanXMinutes: {
    one: '1 –¥–∞“õ–∏“õ–∞–¥–∞–Ω –∫–∞–º',
    other: '{{count}} –¥–∞“õ–∏“õ–∞–¥–∞–Ω –∫–∞–º'
  },
  xMinutes: {
    one: '1 –¥–∞“õ–∏“õ–∞',
    other: '{{count}} –¥–∞“õ–∏“õ–∞'
  },
  aboutXHours: {
    one: '—Ç–∞—Ö–º–∏–Ω–∞–Ω 1 —Å–æ–∞—Ç',
    other: '—Ç–∞—Ö–º–∏–Ω–∞–Ω {{count}} —Å–æ–∞—Ç'
  },
  xHours: {
    one: '1 —Å–æ–∞—Ç',
    other: '{{count}} —Å–æ–∞—Ç'
  },
  xDays: {
    one: '1 –∫—É–Ω',
    other: '{{count}} –∫—É–Ω'
  },
  aboutXWeeks: {
    one: '—Ç–∞—Ö–º–∏–Ω–∞–Ω 1 —Ö–∞—Ñ—Ç–∞',
    other: '—Ç–∞—Ö–º–∏–Ω–∞–Ω {{count}} —Ö–∞—Ñ—Ç–∞'
  },
  xWeeks: {
    one: '1 —Ö–∞—Ñ—Ç–∞',
    other: '{{count}} —Ö–∞—Ñ—Ç–∞'
  },
  aboutXMonths: {
    one: '—Ç–∞—Ö–º–∏–Ω–∞–Ω 1 –æ–π',
    other: '—Ç–∞—Ö–º–∏–Ω–∞–Ω {{count}} –æ–π'
  },
  xMonths: {
    one: '1 –æ–π',
    other: '{{count}} –æ–π'
  },
  aboutXYears: {
    one: '—Ç–∞—Ö–º–∏–Ω–∞–Ω 1 –π–∏–ª',
    other: '—Ç–∞—Ö–º–∏–Ω–∞–Ω {{count}} –π–∏–ª'
  },
  xYears: {
    one: '1 –π–∏–ª',
    other: '{{count}} –π–∏–ª'
  },
  overXYears: {
    one: '1 –π–∏–ª–¥–∞–Ω –∫—û–ø',
    other: '{{count}} –π–∏–ª–¥–∞–Ω –∫—û–ø'
  },
  almostXYears: {
    one: '–¥–µ—è—Ä–ª–∏ 1 –π–∏–ª',
    other: '–¥–µ—è—Ä–ª–∏ {{count}} –π–∏–ª'
  }
};
var uz_Cyrl_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = uz_Cyrl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + '–¥–∞–Ω –∫–µ–π–∏–Ω';
    } else {
      return result + ' –æ–ª–¥–∏–Ω';
    }
  }
  return result;
};
/* harmony default export */ const uz_Cyrl_lib_formatDistance = (uz_Cyrl_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/formatLong/index.js

var uz_Cyrl_lib_formatLong_dateFormats = {
  full: 'EEEE, do MMMM, y',
  long: 'do MMMM, y',
  medium: 'd MMM, y',
  short: 'dd/MM/yyyy'
};
var uz_Cyrl_lib_formatLong_timeFormats = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var uz_Cyrl_lib_formatLong_dateTimeFormats = {
  any: '{{date}}, {{time}}'
};
var uz_Cyrl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_Cyrl_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_Cyrl_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_Cyrl_lib_formatLong_dateTimeFormats,
    defaultWidth: 'any'
  })
};
/* harmony default export */ const uz_Cyrl_lib_formatLong = (uz_Cyrl_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/formatRelative/index.js
var uz_Cyrl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'—û—Ç–≥–∞–Ω' eeee p '–¥–∞'",
  yesterday: "'–∫–µ—á–∞' p '–¥–∞'",
  today: "'–±—É–≥—É–Ω' p '–¥–∞'",
  tomorrow: "'—ç—Ä—Ç–∞–≥–∞' p '–¥–∞'",
  nextWeek: "eeee p '–¥–∞'",
  other: 'P'
};
var uz_Cyrl_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return uz_Cyrl_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const uz_Cyrl_lib_formatRelative = (uz_Cyrl_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/localize/index.js

var uz_Cyrl_lib_localize_eraValues = {
  narrow: ['–ú.–ê', '–ú'],
  abbreviated: ['–ú.–ê', '–ú'],
  wide: ['–ú–∏–ª–æ–¥–¥–∞–Ω –ê–≤–≤–∞–ª–≥–∏', '–ú–∏–ª–æ–¥–∏–π']
};
var uz_Cyrl_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-—á–æ—Ä.', '2-—á–æ—Ä.', '3-—á–æ—Ä.', '4-—á–æ—Ä.'],
  wide: ['1-—á–æ—Ä–∞–∫', '2-—á–æ—Ä–∞–∫', '3-—á–æ—Ä–∞–∫', '4-—á–æ—Ä–∞–∫']
};
var uz_Cyrl_lib_localize_monthValues = {
  narrow: ['–Ø', '–§', '–ú', '–ê', '–ú', '–ò', '–ò', '–ê', '–°', '–û', '–ù', '–î'],
  abbreviated: ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'],
  wide: ['—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç–∞–±—Ä', '–æ–∫—Ç–∞–±—Ä', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä']
};
var uz_Cyrl_lib_localize_dayValues = {
  narrow: ['–Ø', '–î', '–°', '–ß', '–ü', '–ñ', '–®'],
  short: ['—è–∫', '–¥—É', '—Å–µ', '—á–æ', '–ø–∞', '–∂—É', '—à–∞'],
  abbreviated: ['—è–∫—à', '–¥—É—à', '—Å–µ—à', '—á–æ—Ä', '–ø–∞–π', '–∂—É–º', '—à–∞–Ω'],
  wide: ['—è–∫—à–∞–Ω–±–∞', '–¥—É—à–∞–Ω–±–∞', '—Å–µ—à–∞–Ω–±–∞', '—á–æ—Ä—à–∞–Ω–±–∞', '–ø–∞–π—à–∞–Ω–±–∞', '–∂—É–º–∞', '—à–∞–Ω–±–∞']
};
var uz_Cyrl_lib_localize_dayPeriodValues = {
  any: {
    am: '–ü.–û.',
    pm: '–ü.–ö.',
    midnight: '—è—Ä–∏–º —Ç—É–Ω',
    noon: '–ø–µ—à–∏–Ω',
    morning: '—ç—Ä—Ç–∞–ª–∞–±',
    afternoon: '–ø–µ—à–∏–Ω–¥–∞–Ω –∫–µ–π–∏–Ω',
    evening: '–∫–µ—á–∞—Å–∏',
    night: '—Ç—É–Ω'
  }
};
var uz_Cyrl_lib_localize_formattingDayPeriodValues = {
  any: {
    am: '–ü.–û.',
    pm: '–ü.–ö.',
    midnight: '—è—Ä–∏–º —Ç—É–Ω',
    noon: '–ø–µ—à–∏–Ω',
    morning: '—ç—Ä—Ç–∞–ª–∞–±',
    afternoon: '–ø–µ—à–∏–Ω–¥–∞–Ω –∫–µ–π–∏–Ω',
    evening: '–∫–µ—á–∞—Å–∏',
    night: '—Ç—É–Ω'
  }
};
var uz_Cyrl_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var uz_Cyrl_lib_localize_localize = {
  ordinalNumber: uz_Cyrl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_dayPeriodValues,
    defaultWidth: 'any',
    formattingValues: uz_Cyrl_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'any'
  })
};
/* harmony default export */ const uz_Cyrl_lib_localize = (uz_Cyrl_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/match/index.js


var uz_Cyrl_lib_match_matchOrdinalNumberPattern = /^(\d+)(—á–∏)?/i;
var uz_Cyrl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var uz_Cyrl_lib_match_matchEraPatterns = {
  narrow: /^(–º\.–∞|–º\.)/i,
  abbreviated: /^(–º\.–∞|–º\.)/i,
  wide: /^(–º–∏–ª–æ–¥–¥–∞–Ω –∞–≤–≤–∞–ª|–º–∏–ª–æ–¥–¥–∞–Ω –∫–µ–π–∏–Ω)/i
};
var uz_Cyrl_lib_match_parseEraPatterns = {
  any: [/^–º/i, /^–∞/i]
};
var uz_Cyrl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-—á–æ—Ä./i,
  wide: /^[1234]-—á–æ—Ä–∞–∫/i
};
var uz_Cyrl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var uz_Cyrl_lib_match_matchMonthPatterns = {
  narrow: /^[—è—Ñ–º–∞–º–∏–∏–∞—Å–æ–Ω–¥]/i,
  abbreviated: /^(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫)/i,
  wide: /^(—è–Ω–≤–∞—Ä|—Ñ–µ–≤—Ä–∞–ª|–º–∞—Ä—Ç|–∞–ø—Ä–µ–ª|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥—É—Å—Ç|—Å–µ–Ω—Ç–∞–±—Ä|–æ–∫—Ç–∞–±—Ä|–Ω–æ—è–±—Ä|–¥–µ–∫–∞–±—Ä)/i
};
var uz_Cyrl_lib_match_parseMonthPatterns = {
  narrow: [/^—è/i, /^—Ñ/i, /^–º/i, /^–∞/i, /^–º/i, /^–∏/i, /^–∏/i, /^–∞/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^–¥/i],
  any: [/^—è/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞–π/i, /^–∏—é–Ω/i, /^–∏—é–ª/i, /^–∞–≤/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^–¥/i]
};
var uz_Cyrl_lib_match_matchDayPatterns = {
  narrow: /^[—è–¥—Å—á–ø–∂—à]/i,
  short: /^(—è–∫|–¥—É|—Å–µ|—á–æ|–ø–∞|–∂—É|—à–∞)/i,
  abbreviated: /^(—è–∫—à|–¥—É—à|—Å–µ—à|—á–æ—Ä|–ø–∞–π|–∂—É–º|—à–∞–Ω)/i,
  wide: /^(—è–∫—à–∞–Ω–±–∞|–¥—É—à–∞–Ω–±–∞|—Å–µ—à–∞–Ω–±–∞|—á–æ—Ä—à–∞–Ω–±–∞|–ø–∞–π—à–∞–Ω–±–∞|–∂—É–º–∞|—à–∞–Ω–±–∞)/i
};
var uz_Cyrl_lib_match_parseDayPatterns = {
  narrow: [/^—è/i, /^–¥/i, /^—Å/i, /^—á/i, /^–ø/i, /^–∂/i, /^—à/i],
  any: [/^—è–∫/i, /^–¥—É/i, /^—Å–µ/i, /^—á–æ—Ä/i, /^–ø–∞–π/i, /^–∂—É/i, /^—à–∞–Ω/i]
};
var uz_Cyrl_lib_match_matchDayPeriodPatterns = {
  any: /^(–ø\.–æ\.|–ø\.–∫\.|—è—Ä–∏–º —Ç—É–Ω|–ø–µ—à–∏–Ω–¥–∞–Ω –∫–µ–π–∏–Ω|(—ç—Ä—Ç–∞–ª–∞–±|–ø–µ—à–∏–Ω–¥–∞–Ω –∫–µ–π–∏–Ω|–∫–µ—á–∞—Å–∏|—Ç—É–Ω))/i
};
var uz_Cyrl_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^–ø\.–æ\./i,
    pm: /^–ø\.–∫\./i,
    midnight: /^—è—Ä–∏–º —Ç—É–Ω/i,
    noon: /^–ø–µ—à–∏–Ω–¥–∞–Ω –∫–µ–π–∏–Ω/i,
    morning: /—ç—Ä—Ç–∞–ª–∞–±/i,
    afternoon: /–ø–µ—à–∏–Ω–¥–∞–Ω –∫–µ–π–∏–Ω/i,
    evening: /–∫–µ—á–∞—Å–∏/i,
    night: /—Ç—É–Ω/i
  }
};
var uz_Cyrl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: uz_Cyrl_lib_match_matchOrdinalNumberPattern,
    parsePattern: uz_Cyrl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_Cyrl_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_Cyrl_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_Cyrl_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: uz_Cyrl_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: uz_Cyrl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const uz_Cyrl_lib_match = (uz_Cyrl_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Uzbek Cyrillic locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Kamronbek Shodmonov [@kamronbek28]{@link https://github.com/kamronbek28}
 */
var uz_Cyrl_locale = {
  code: 'uz-Cyrl',
  formatDistance: uz_Cyrl_lib_formatDistance,
  formatLong: uz_Cyrl_lib_formatLong,
  formatRelative: uz_Cyrl_lib_formatRelative,
  localize: uz_Cyrl_lib_localize,
  match: uz_Cyrl_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const uz_Cyrl = (uz_Cyrl_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/formatDistance/index.js
var vi_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'd∆∞·ªõi 1 gi√¢y',
    other: 'd∆∞·ªõi {{count}} gi√¢y'
  },
  xSeconds: {
    one: '1 gi√¢y',
    other: '{{count}} gi√¢y'
  },
  halfAMinute: 'n·ª≠a ph√∫t',
  lessThanXMinutes: {
    one: 'd∆∞·ªõi 1 ph√∫t',
    other: 'd∆∞·ªõi {{count}} ph√∫t'
  },
  xMinutes: {
    one: '1 ph√∫t',
    other: '{{count}} ph√∫t'
  },
  aboutXHours: {
    one: 'kho·∫£ng 1 gi·ªù',
    other: 'kho·∫£ng {{count}} gi·ªù'
  },
  xHours: {
    one: '1 gi·ªù',
    other: '{{count}} gi·ªù'
  },
  xDays: {
    one: '1 ng√†y',
    other: '{{count}} ng√†y'
  },
  aboutXWeeks: {
    one: 'kho·∫£ng 1 tu·∫ßn',
    other: 'kho·∫£ng {{count}} tu·∫ßn'
  },
  xWeeks: {
    one: '1 tu·∫ßn',
    other: '{{count}} tu·∫ßn'
  },
  aboutXMonths: {
    one: 'kho·∫£ng 1 th√°ng',
    other: 'kho·∫£ng {{count}} th√°ng'
  },
  xMonths: {
    one: '1 th√°ng',
    other: '{{count}} th√°ng'
  },
  aboutXYears: {
    one: 'kho·∫£ng 1 nƒÉm',
    other: 'kho·∫£ng {{count}} nƒÉm'
  },
  xYears: {
    one: '1 nƒÉm',
    other: '{{count}} nƒÉm'
  },
  overXYears: {
    one: 'h∆°n 1 nƒÉm',
    other: 'h∆°n {{count}} nƒÉm'
  },
  almostXYears: {
    one: 'g·∫ßn 1 nƒÉm',
    other: 'g·∫ßn {{count}} nƒÉm'
  }
};
var vi_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = vi_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + ' n·ªØa';
    } else {
      return result + ' tr∆∞·ªõc';
    }
  }
  return result;
};
/* harmony default export */ const vi_lib_formatDistance = (vi_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/formatLong/index.js

var vi_lib_formatLong_dateFormats = {
  // th·ª© S√°u, ng√†y 25 th√°ng 08 nƒÉm 2017
  full: "EEEE, 'ng√†y' d MMMM 'nƒÉm' y",
  // ng√†y 25 th√°ng 08 nƒÉm 2017
  long: "'ng√†y' d MMMM 'nƒÉm' y",
  // 25 thg 08 nƒÉm 2017
  medium: "d MMM 'nƒÉm' y",
  // 25/08/2017
  short: 'dd/MM/y'
};
var vi_lib_formatLong_timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var vi_lib_formatLong_dateTimeFormats = {
  // th·ª© S√°u, ng√†y 25 th√°ng 08 nƒÉm 2017 23:25:59
  full: '{{date}} {{time}}',
  // ng√†y 25 th√°ng 08 nƒÉm 2017 23:25
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var vi_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: vi_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: vi_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: vi_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const vi_lib_formatLong = (vi_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/formatRelative/index.js
var vi_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'tu·∫ßn tr∆∞·ªõc v√†o l√∫c' p",
  yesterday: "'h√¥m qua v√†o l√∫c' p",
  today: "'h√¥m nay v√†o l√∫c' p",
  tomorrow: "'ng√†y mai v√†o l√∫c' p",
  nextWeek: "eeee 't·ªõi v√†o l√∫c' p",
  other: 'P'
};
var vi_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return vi_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const vi_lib_formatRelative = (vi_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/localize/index.js
 // Vietnamese locale reference: http://www.localeplanet.com/icu/vi-VN/index.html
// Capitalization reference: http://hcmup.edu.vn/index.php?option=com_content&view=article&id=4106%3Avit-hoa-trong-vn-bn-hanh-chinh&catid=2345%3Atham-kho&Itemid=4103&lang=vi&site=134
var vi_lib_localize_eraValues = {
  narrow: ['TCN', 'SCN'],
  abbreviated: ['tr∆∞·ªõc CN', 'sau CN'],
  wide: ['tr∆∞·ªõc C√¥ng Nguy√™n', 'sau C√¥ng Nguy√™n']
};
var vi_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['Qu√Ω 1', 'Qu√Ω 2', 'Qu√Ω 3', 'Qu√Ω 4']
};
var vi_lib_localize_formattingQuarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  // I notice many news outlet use this "qu√Ω II/2018"
  wide: ['qu√Ω I', 'qu√Ω II', 'qu√Ω III', 'qu√Ω IV']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var vi_lib_localize_monthValues = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['Thg 1', 'Thg 2', 'Thg 3', 'Thg 4', 'Thg 5', 'Thg 6', 'Thg 7', 'Thg 8', 'Thg 9', 'Thg 10', 'Thg 11', 'Thg 12'],
  wide: ['Th√°ng M·ªôt', 'Th√°ng Hai', 'Th√°ng Ba', 'Th√°ng T∆∞', 'Th√°ng NƒÉm', 'Th√°ng S√°u', 'Th√°ng B·∫£y', 'Th√°ng T√°m', 'Th√°ng Ch√≠n', 'Th√°ng M∆∞·ªùi', 'Th√°ng M∆∞·ªùi M·ªôt', 'Th√°ng M∆∞·ªùi Hai']
};
// In Vietnamese date formatting, month number less than 10 expected to have leading zero
var vi_lib_localize_formattingMonthValues = {
  narrow: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
  abbreviated: ['thg 1', 'thg 2', 'thg 3', 'thg 4', 'thg 5', 'thg 6', 'thg 7', 'thg 8', 'thg 9', 'thg 10', 'thg 11', 'thg 12'],
  wide: ['th√°ng 01', 'th√°ng 02', 'th√°ng 03', 'th√°ng 04', 'th√°ng 05', 'th√°ng 06', 'th√°ng 07', 'th√°ng 08', 'th√°ng 09', 'th√°ng 10', 'th√°ng 11', 'th√°ng 12']
};
var vi_lib_localize_dayValues = {
  narrow: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
  short: ['CN', 'Th 2', 'Th 3', 'Th 4', 'Th 5', 'Th 6', 'Th 7'],
  abbreviated: ['CN', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'],
  wide: ['Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y']
};

// Vietnamese are used to AM/PM borrowing from English, hence `narrow` and
// `abbreviated` are just like English but I'm leaving the `wide`
// format being localized with abbreviations found in some systems (S√Ång / CHi·ªÅu);
// however, personally, I don't think `Chi·ªÅu` sounds appropriate for `PM`
var vi_lib_localize_dayPeriodValues = {
  // narrow date period is extremely rare in Vietnamese
  // I used abbreviated form for noon, morning and afternoon
  // which are regconizable by Vietnamese, others cannot be any shorter
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'n·ª≠a ƒë√™m',
    noon: 'tr',
    morning: 'sg',
    afternoon: 'ch',
    evening: 't·ªëi',
    night: 'ƒë√™m'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'n·ª≠a ƒë√™m',
    noon: 'tr∆∞a',
    morning: 's√°ng',
    afternoon: 'chi·ªÅu',
    evening: 't·ªëi',
    night: 'ƒë√™m'
  },
  wide: {
    am: 'SA',
    pm: 'CH',
    midnight: 'n·ª≠a ƒë√™m',
    noon: 'tr∆∞a',
    morning: 's√°ng',
    afternoon: 'chi·ªÅu',
    evening: 't·ªëi',
    night: 'ƒë√™m'
  }
};
var vi_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'n·ª≠a ƒë√™m',
    noon: 'tr',
    morning: 'sg',
    afternoon: 'ch',
    evening: 't·ªëi',
    night: 'ƒë√™m'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'n·ª≠a ƒë√™m',
    noon: 'tr∆∞a',
    morning: 's√°ng',
    afternoon: 'chi·ªÅu',
    evening: 't·ªëi',
    night: 'ƒë√™m'
  },
  wide: {
    am: 'SA',
    pm: 'CH',
    midnight: 'n·ª≠a ƒë√™m',
    noon: 'gi·ªØa tr∆∞a',
    morning: 'v√†o bu·ªïi s√°ng',
    afternoon: 'v√†o bu·ªïi chi·ªÅu',
    evening: 'v√†o bu·ªïi t·ªëi',
    night: 'v√†o ban ƒë√™m'
  }
};
var vi_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (unit === 'quarter') {
    // many news outlets use "qu√Ω I"...
    switch (number) {
      case 1:
        return 'I';
      case 2:
        return 'II';
      case 3:
        return 'III';
      case 4:
        return 'IV';
    }
  } else if (unit === 'day') {
    // day of week in Vietnamese has ordinal number meaning,
    // so we should use them, else it'll sound weird
    switch (number) {
      case 1:
        return 'th·ª© 2';
      // meaning 2nd day but it's the first day of the week :D
      case 2:
        return 'th·ª© 3';
      // meaning 3rd day
      case 3:
        return 'th·ª© 4';
      // meaning 4th day and so on
      case 4:
        return 'th·ª© 5';
      case 5:
        return 'th·ª© 6';
      case 6:
        return 'th·ª© 7';
      case 7:
        return 'ch·ªß nh·∫≠t';
      // meaning Sunday, there's no 8th day :D
    }
  } else if (unit === 'week') {
    if (number === 1) {
      return 'th·ª© nh·∫•t';
    } else {
      return 'th·ª© ' + number;
    }
  } else if (unit === 'dayOfYear') {
    if (number === 1) {
      return 'ƒë·∫ßu ti√™n';
    } else {
      return 'th·ª© ' + number;
    }
  }

  // there are no different forms of ordinal numbers in Vietnamese
  return String(number);
};
var vi_lib_localize_localize = {
  ordinalNumber: vi_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_quarterValues,
    defaultWidth: 'wide',
    formattingValues: vi_lib_localize_formattingQuarterValues,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_monthValues,
    defaultWidth: 'wide',
    formattingValues: vi_lib_localize_formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: vi_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const vi_lib_localize = (vi_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/match/index.js


var vi_lib_match_matchOrdinalNumberPattern = /^(\d+)/i;
var vi_lib_match_parseOrdinalNumberPattern = /\d+/i;
var vi_lib_match_matchEraPatterns = {
  narrow: /^(tcn|scn)/i,
  abbreviated: /^(tr∆∞·ªõc CN|sau CN)/i,
  wide: /^(tr∆∞·ªõc C√¥ng Nguy√™n|sau C√¥ng Nguy√™n)/i
};
var vi_lib_match_parseEraPatterns = {
  any: [/^t/i, /^s/i]
};
var vi_lib_match_matchQuarterPatterns = {
  narrow: /^([1234]|i{1,3}v?)/i,
  abbreviated: /^q([1234]|i{1,3}v?)/i,
  wide: /^qu√Ω ([1234]|i{1,3}v?)/i
};
var vi_lib_match_parseQuarterPatterns = {
  any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
};
var vi_lib_match_matchMonthPatterns = {
  // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
  // note the order of '1' since it is a sub-string of '10', so must be lower priority
  narrow: /^(0?[2-9]|10|11|12|0?1)/i,
  // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
  abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
  // note the order of 'M∆∞·ªùi' since it is sub-string of M∆∞·ªùi M·ªôt, so must be lower priority
  wide: /^th√°ng ?(M·ªôt|Hai|Ba|T∆∞|NƒÉm|S√°u|B·∫£y|T√°m|Ch√≠n|M∆∞·ªùi|M∆∞·ªùi ?M·ªôt|M∆∞·ªùi ?Hai|0?[1-9](?!\d)|10|11|12)/i
};
var vi_lib_match_parseMonthPatterns = {
  narrow: [/0?1$/i, /0?2/i, /3/, /4/, /5/, /6/, /7/, /8/, /9/, /10/, /11/, /12/],
  abbreviated: [/^thg[ _]?0?1(?!\d)/i, /^thg[ _]?0?2/i, /^thg[ _]?0?3/i, /^thg[ _]?0?4/i, /^thg[ _]?0?5/i, /^thg[ _]?0?6/i, /^thg[ _]?0?7/i, /^thg[ _]?0?8/i, /^thg[ _]?0?9/i, /^thg[ _]?10/i, /^thg[ _]?11/i, /^thg[ _]?12/i],
  wide: [/^th√°ng ?(M·ªôt|0?1(?!\d))/i, /^th√°ng ?(Hai|0?2)/i, /^th√°ng ?(Ba|0?3)/i, /^th√°ng ?(T∆∞|0?4)/i, /^th√°ng ?(NƒÉm|0?5)/i, /^th√°ng ?(S√°u|0?6)/i, /^th√°ng ?(B·∫£y|0?7)/i, /^th√°ng ?(T√°m|0?8)/i, /^th√°ng ?(Ch√≠n|0?9)/i, /^th√°ng ?(M∆∞·ªùi|10)/i, /^th√°ng ?(M∆∞·ªùi ?M·ªôt|11)/i, /^th√°ng ?(M∆∞·ªùi ?Hai|12)/i]
};
var vi_lib_match_matchDayPatterns = {
  narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
  short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  wide: /^(Ch·ªß ?Nh·∫≠t|Ch√∫a ?Nh·∫≠t|th·ª© ?Hai|th·ª© ?Ba|th·ª© ?T∆∞|th·ª© ?NƒÉm|th·ª© ?S√°u|th·ª© ?B·∫£y)/i
};
var vi_lib_match_parseDayPatterns = {
  narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  wide: [/(Ch·ªß|Ch√∫a) ?Nh·∫≠t/i, /Hai/i, /Ba/i, /T∆∞/i, /NƒÉm/i, /S√°u/i, /B·∫£y/i]
};
var vi_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|n·ª≠a ƒë√™m|tr∆∞a|(gi·ªù) (s√°ng|chi·ªÅu|t·ªëi|ƒë√™m))/i,
  abbreviated: /^(am|pm|n·ª≠a ƒë√™m|tr∆∞a|(gi·ªù) (s√°ng|chi·ªÅu|t·ªëi|ƒë√™m))/i,
  wide: /^(ch[^i]*|sa|n·ª≠a ƒë√™m|tr∆∞a|(gi·ªù) (s√°ng|chi·ªÅu|t·ªëi|ƒë√™m))/i
};
var vi_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(a|sa)/i,
    pm: /^(p|ch[^i]*)/i,
    midnight: /n·ª≠a ƒë√™m/i,
    noon: /tr∆∞a/i,
    morning: /s√°ng/i,
    afternoon: /chi·ªÅu/i,
    evening: /t·ªëi/i,
    night: /^ƒë√™m/i
  }
};
var vi_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: vi_lib_match_matchOrdinalNumberPattern,
    parsePattern: vi_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: vi_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: vi_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: vi_lib_match_parseMonthPatterns,
    defaultParseWidth: 'wide'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: vi_lib_match_parseDayPatterns,
    defaultParseWidth: 'wide'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: vi_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const vi_lib_match = (vi_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Vietnamese locale (Vietnam).
 * @language Vietnamese
 * @iso-639-2 vie
 * @author Thanh Tran [@trongthanh]{@link https://github.com/trongthanh}
 * @author Leroy Hopson [@lihop]{@link https://github.com/lihop}
 */
var vi_locale = {
  code: 'vi',
  formatDistance: vi_lib_formatDistance,
  formatLong: vi_lib_formatLong,
  formatRelative: vi_lib_formatRelative,
  localize: vi_lib_localize,
  match: vi_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1 /* First week of new year contains Jan 1st  */
  }
};

/* harmony default export */ const vi = (vi_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/formatDistance/index.js
var zh_CN_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: '‰∏çÂà∞ 1 Áßí',
    other: '‰∏çÂà∞ {{count}} Áßí'
  },
  xSeconds: {
    one: '1 Áßí',
    other: '{{count}} Áßí'
  },
  halfAMinute: 'ÂçäÂàÜÈíü',
  lessThanXMinutes: {
    one: '‰∏çÂà∞ 1 ÂàÜÈíü',
    other: '‰∏çÂà∞ {{count}} ÂàÜÈíü'
  },
  xMinutes: {
    one: '1 ÂàÜÈíü',
    other: '{{count}} ÂàÜÈíü'
  },
  xHours: {
    one: '1 Â∞èÊó∂',
    other: '{{count}} Â∞èÊó∂'
  },
  aboutXHours: {
    one: 'Â§ßÁ∫¶ 1 Â∞èÊó∂',
    other: 'Â§ßÁ∫¶ {{count}} Â∞èÊó∂'
  },
  xDays: {
    one: '1 Â§©',
    other: '{{count}} Â§©'
  },
  aboutXWeeks: {
    one: 'Â§ßÁ∫¶ 1 ‰∏™ÊòüÊúü',
    other: 'Â§ßÁ∫¶ {{count}} ‰∏™ÊòüÊúü'
  },
  xWeeks: {
    one: '1 ‰∏™ÊòüÊúü',
    other: '{{count}} ‰∏™ÊòüÊúü'
  },
  aboutXMonths: {
    one: 'Â§ßÁ∫¶ 1 ‰∏™Êúà',
    other: 'Â§ßÁ∫¶ {{count}} ‰∏™Êúà'
  },
  xMonths: {
    one: '1 ‰∏™Êúà',
    other: '{{count}} ‰∏™Êúà'
  },
  aboutXYears: {
    one: 'Â§ßÁ∫¶ 1 Âπ¥',
    other: 'Â§ßÁ∫¶ {{count}} Âπ¥'
  },
  xYears: {
    one: '1 Âπ¥',
    other: '{{count}} Âπ¥'
  },
  overXYears: {
    one: 'Ë∂ÖËøá 1 Âπ¥',
    other: 'Ë∂ÖËøá {{count}} Âπ¥'
  },
  almostXYears: {
    one: 'Â∞ÜËøë 1 Âπ¥',
    other: 'Â∞ÜËøë {{count}} Âπ¥'
  }
};
var zh_CN_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = zh_CN_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'ÂÜÖ';
    } else {
      return result + 'Ââç';
    }
  }
  return result;
};
/* harmony default export */ const zh_CN_lib_formatDistance = (zh_CN_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/formatLong/index.js

var zh_CN_lib_formatLong_dateFormats = {
  full: "y'Âπ¥'M'Êúà'd'Êó•' EEEE",
  long: "y'Âπ¥'M'Êúà'd'Êó•'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var zh_CN_lib_formatLong_timeFormats = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var zh_CN_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var zh_CN_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_CN_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_CN_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_CN_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const zh_CN_lib_formatLong = (zh_CN_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/formatRelative/index.js

function checkWeek(date, baseDate, options) {
  var baseFormat = 'eeee p';
  if (isSameUTCWeek(date, baseDate, options)) {
    return baseFormat; // in same week
  } else if (date.getTime() > baseDate.getTime()) {
    return "'‰∏ã‰∏™'" + baseFormat; // in next week
  }

  return "'‰∏ä‰∏™'" + baseFormat; // in last week
}

var zh_CN_lib_formatRelative_formatRelativeLocale = {
  lastWeek: checkWeek,
  // days before yesterday, maybe in this week or last week
  yesterday: "'Êò®Â§©' p",
  today: "'‰ªäÂ§©' p",
  tomorrow: "'ÊòéÂ§©' p",
  nextWeek: checkWeek,
  // days after tomorrow, maybe in this week or next week
  other: 'PP p'
};
var zh_CN_lib_formatRelative_formatRelative = function formatRelative(token, date, baseDate, options) {
  var format = zh_CN_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const zh_CN_lib_formatRelative = (zh_CN_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/localize/index.js

var zh_CN_lib_localize_eraValues = {
  narrow: ['Ââç', 'ÂÖ¨ÂÖÉ'],
  abbreviated: ['Ââç', 'ÂÖ¨ÂÖÉ'],
  wide: ['ÂÖ¨ÂÖÉÂâç', 'ÂÖ¨ÂÖÉ']
};
var zh_CN_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Á¨¨‰∏ÄÂ≠£', 'Á¨¨‰∫åÂ≠£', 'Á¨¨‰∏âÂ≠£', 'Á¨¨ÂõõÂ≠£'],
  wide: ['Á¨¨‰∏ÄÂ≠£Â∫¶', 'Á¨¨‰∫åÂ≠£Â∫¶', 'Á¨¨‰∏âÂ≠£Â∫¶', 'Á¨¨ÂõõÂ≠£Â∫¶']
};
var zh_CN_lib_localize_monthValues = {
  narrow: ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'ÂçÅ', 'ÂçÅ‰∏Ä', 'ÂçÅ‰∫å'],
  abbreviated: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà'],
  wide: ['‰∏ÄÊúà', '‰∫åÊúà', '‰∏âÊúà', 'ÂõõÊúà', '‰∫îÊúà', 'ÂÖ≠Êúà', '‰∏ÉÊúà', 'ÂÖ´Êúà', '‰πùÊúà', 'ÂçÅÊúà', 'ÂçÅ‰∏ÄÊúà', 'ÂçÅ‰∫åÊúà']
};
var zh_CN_lib_localize_dayValues = {
  narrow: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
  short: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
  abbreviated: ['Âë®Êó•', 'Âë®‰∏Ä', 'Âë®‰∫å', 'Âë®‰∏â', 'Âë®Âõõ', 'Âë®‰∫î', 'Âë®ÂÖ≠'],
  wide: ['ÊòüÊúüÊó•', 'ÊòüÊúü‰∏Ä', 'ÊòüÊúü‰∫å', 'ÊòüÊúü‰∏â', 'ÊòüÊúüÂõõ', 'ÊòüÊúü‰∫î', 'ÊòüÊúüÂÖ≠']
};
var zh_CN_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‰∏ä',
    pm: '‰∏ã',
    midnight: 'ÂáåÊô®',
    noon: 'Âçà',
    morning: 'Êó©',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö',
    night: 'Â§ú'
  },
  abbreviated: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈó¥'
  },
  wide: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈó¥'
  }
};
var zh_CN_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‰∏ä',
    pm: '‰∏ã',
    midnight: 'ÂáåÊô®',
    noon: 'Âçà',
    morning: 'Êó©',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö',
    night: 'Â§ú'
  },
  abbreviated: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈó¥'
  },
  wide: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈó¥'
  }
};
var zh_CN_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case 'date':
      return number.toString() + 'Êó•';
    case 'hour':
      return number.toString() + 'Êó∂';
    case 'minute':
      return number.toString() + 'ÂàÜ';
    case 'second':
      return number.toString() + 'Áßí';
    default:
      return 'Á¨¨ ' + number.toString();
  }
};
var zh_CN_lib_localize_localize = {
  ordinalNumber: zh_CN_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: zh_CN_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const zh_CN_lib_localize = (zh_CN_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/match/index.js


var zh_CN_lib_match_matchOrdinalNumberPattern = /^(Á¨¨\s*)?\d+(Êó•|Êó∂|ÂàÜ|Áßí)?/i;
var zh_CN_lib_match_parseOrdinalNumberPattern = /\d+/i;
var zh_CN_lib_match_matchEraPatterns = {
  narrow: /^(Ââç)/i,
  abbreviated: /^(Ââç)/i,
  wide: /^(ÂÖ¨ÂÖÉÂâç|ÂÖ¨ÂÖÉ)/i
};
var zh_CN_lib_match_parseEraPatterns = {
  any: [/^(Ââç)/i, /^(ÂÖ¨ÂÖÉ)/i]
};
var zh_CN_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]Âàª/i,
  wide: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]ÂàªÈíü/i
};
var zh_CN_lib_match_parseQuarterPatterns = {
  any: [/(1|‰∏Ä)/i, /(2|‰∫å)/i, /(3|‰∏â)/i, /(4|Âõõ)/i]
};
var zh_CN_lib_match_matchMonthPatterns = {
  narrow: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])/i,
  abbreviated: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä]|\d|1[12])Êúà/i,
  wide: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])Êúà/i
};
var zh_CN_lib_match_parseMonthPatterns = {
  narrow: [/^‰∏Ä/i, /^‰∫å/i, /^‰∏â/i, /^Âõõ/i, /^‰∫î/i, /^ÂÖ≠/i, /^‰∏É/i, /^ÂÖ´/i, /^‰πù/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))/i, /^ÂçÅ‰∏Ä/i, /^ÂçÅ‰∫å/i],
  any: [/^‰∏Ä|1/i, /^‰∫å|2/i, /^‰∏â|3/i, /^Âõõ|4/i, /^‰∫î|5/i, /^ÂÖ≠|6/i, /^‰∏É|7/i, /^ÂÖ´|8/i, /^‰πù|9/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))|10/i, /^ÂçÅ‰∏Ä|11/i, /^ÂçÅ‰∫å|12/i]
};
var zh_CN_lib_match_matchDayPatterns = {
  narrow: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  short: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  abbreviated: /^Âë®[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  wide: /^ÊòüÊúü[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i
};
var zh_CN_lib_match_parseDayPatterns = {
  any: [/Êó•/i, /‰∏Ä/i, /‰∫å/i, /‰∏â/i, /Âõõ/i, /‰∫î/i, /ÂÖ≠/i]
};
var zh_CN_lib_match_matchDayPeriodPatterns = {
  any: /^(‰∏äÂçà?|‰∏ãÂçà?|ÂçàÂ§ú|[‰∏≠Ê≠£]Âçà|Êó©‰∏ä?|‰∏ãÂçà|Êôö‰∏ä?|ÂáåÊô®|)/i
};
var zh_CN_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‰∏äÂçà?/i,
    pm: /^‰∏ãÂçà?/i,
    midnight: /^ÂçàÂ§ú/i,
    noon: /^[‰∏≠Ê≠£]Âçà/i,
    morning: /^Êó©‰∏ä/i,
    afternoon: /^‰∏ãÂçà/i,
    evening: /^Êôö‰∏ä?/i,
    night: /^ÂáåÊô®/i
  }
};
var zh_CN_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: zh_CN_lib_match_matchOrdinalNumberPattern,
    parsePattern: zh_CN_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_CN_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_CN_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_CN_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_CN_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: zh_CN_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const zh_CN_lib_match = (zh_CN_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Simplified locale.
 * @language Chinese Simplified
 * @iso-639-2 zho
 * @author Changyu Geng [@KingMario]{@link https://github.com/KingMario}
 * @author Song Shuoyun [@fnlctrl]{@link https://github.com/fnlctrl}
 * @author sabrinaM [@sabrinamiao]{@link https://github.com/sabrinamiao}
 * @author Carney Wu [@cubicwork]{@link https://github.com/cubicwork}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */
var zh_CN_locale = {
  code: 'zh-CN',
  formatDistance: zh_CN_lib_formatDistance,
  formatLong: zh_CN_lib_formatLong,
  formatRelative: zh_CN_lib_formatRelative,
  localize: zh_CN_lib_localize,
  match: zh_CN_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const zh_CN = (zh_CN_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/formatDistance/index.js
var zh_HK_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'Â∞ëÊñº 1 Áßí',
    other: 'Â∞ëÊñº {{count}} Áßí'
  },
  xSeconds: {
    one: '1 Áßí',
    other: '{{count}} Áßí'
  },
  halfAMinute: 'ÂçäÂàÜÈêò',
  lessThanXMinutes: {
    one: 'Â∞ëÊñº 1 ÂàÜÈêò',
    other: 'Â∞ëÊñº {{count}} ÂàÜÈêò'
  },
  xMinutes: {
    one: '1 ÂàÜÈêò',
    other: '{{count}} ÂàÜÈêò'
  },
  xHours: {
    one: '1 Â∞èÊôÇ',
    other: '{{count}} Â∞èÊôÇ'
  },
  aboutXHours: {
    one: 'Â§ßÁ¥Ñ 1 Â∞èÊôÇ',
    other: 'Â§ßÁ¥Ñ {{count}} Â∞èÊôÇ'
  },
  xDays: {
    one: '1 Â§©',
    other: '{{count}} Â§©'
  },
  aboutXWeeks: {
    one: 'Â§ßÁ¥Ñ 1 ÂÄãÊòüÊúü',
    other: 'Â§ßÁ¥Ñ {{count}} ÂÄãÊòüÊúü'
  },
  xWeeks: {
    one: '1 ÂÄãÊòüÊúü',
    other: '{{count}} ÂÄãÊòüÊúü'
  },
  aboutXMonths: {
    one: 'Â§ßÁ¥Ñ 1 ÂÄãÊúà',
    other: 'Â§ßÁ¥Ñ {{count}} ÂÄãÊúà'
  },
  xMonths: {
    one: '1 ÂÄãÊúà',
    other: '{{count}} ÂÄãÊúà'
  },
  aboutXYears: {
    one: 'Â§ßÁ¥Ñ 1 Âπ¥',
    other: 'Â§ßÁ¥Ñ {{count}} Âπ¥'
  },
  xYears: {
    one: '1 Âπ¥',
    other: '{{count}} Âπ¥'
  },
  overXYears: {
    one: 'Ë∂ÖÈÅé 1 Âπ¥',
    other: 'Ë∂ÖÈÅé {{count}} Âπ¥'
  },
  almostXYears: {
    one: 'Â∞áËøë 1 Âπ¥',
    other: 'Â∞áËøë {{count}} Âπ¥'
  }
};
var zh_HK_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = zh_HK_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'ÂÖß';
    } else {
      return result + 'Ââç';
    }
  }
  return result;
};
/* harmony default export */ const zh_HK_lib_formatDistance = (zh_HK_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/formatLong/index.js

var zh_HK_lib_formatLong_dateFormats = {
  full: "y'Âπ¥'M'Êúà'd'Êó•' EEEE",
  long: "y'Âπ¥'M'Êúà'd'Êó•'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var zh_HK_lib_formatLong_timeFormats = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var zh_HK_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var zh_HK_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_HK_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_HK_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_HK_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const zh_HK_lib_formatLong = (zh_HK_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/formatRelative/index.js
var zh_HK_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‰∏äÂÄã'eeee p",
  yesterday: "'Êò®Â§©' p",
  today: "'‰ªäÂ§©' p",
  tomorrow: "'ÊòéÂ§©' p",
  nextWeek: "'‰∏ãÂÄã'eeee p",
  other: 'P'
};
var zh_HK_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return zh_HK_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const zh_HK_lib_formatRelative = (zh_HK_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/localize/index.js

var zh_HK_lib_localize_eraValues = {
  narrow: ['Ââç', 'ÂÖ¨ÂÖÉ'],
  abbreviated: ['Ââç', 'ÂÖ¨ÂÖÉ'],
  wide: ['ÂÖ¨ÂÖÉÂâç', 'ÂÖ¨ÂÖÉ']
};
var zh_HK_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Á¨¨‰∏ÄÂ≠£', 'Á¨¨‰∫åÂ≠£', 'Á¨¨‰∏âÂ≠£', 'Á¨¨ÂõõÂ≠£'],
  wide: ['Á¨¨‰∏ÄÂ≠£Â∫¶', 'Á¨¨‰∫åÂ≠£Â∫¶', 'Á¨¨‰∏âÂ≠£Â∫¶', 'Á¨¨ÂõõÂ≠£Â∫¶']
};
var zh_HK_lib_localize_monthValues = {
  narrow: ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'ÂçÅ', 'ÂçÅ‰∏Ä', 'ÂçÅ‰∫å'],
  abbreviated: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà'],
  wide: ['‰∏ÄÊúà', '‰∫åÊúà', '‰∏âÊúà', 'ÂõõÊúà', '‰∫îÊúà', 'ÂÖ≠Êúà', '‰∏ÉÊúà', 'ÂÖ´Êúà', '‰πùÊúà', 'ÂçÅÊúà', 'ÂçÅ‰∏ÄÊúà', 'ÂçÅ‰∫åÊúà']
};
var zh_HK_lib_localize_dayValues = {
  narrow: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
  short: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
  abbreviated: ['ÈÄ±Êó•', 'ÈÄ±‰∏Ä', 'ÈÄ±‰∫å', 'ÈÄ±‰∏â', 'ÈÄ±Âõõ', 'ÈÄ±‰∫î', 'ÈÄ±ÂÖ≠'],
  wide: ['ÊòüÊúüÊó•', 'ÊòüÊúü‰∏Ä', 'ÊòüÊúü‰∫å', 'ÊòüÊúü‰∏â', 'ÊòüÊúüÂõõ', 'ÊòüÊúü‰∫î', 'ÊòüÊúüÂÖ≠']
};
var zh_HK_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‰∏ä',
    pm: '‰∏ã',
    midnight: 'ÂçàÂ§ú',
    noon: 'Êôå',
    morning: 'Êó©',
    afternoon: 'Âçà',
    evening: 'Êôö',
    night: 'Â§ú'
  },
  abbreviated: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂçàÂ§ú',
    noon: '‰∏≠Âçà',
    morning: '‰∏äÂçà',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÊôö'
  },
  wide: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂçàÂ§ú',
    noon: '‰∏≠Âçà',
    morning: '‰∏äÂçà',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÊôö'
  }
};
var zh_HK_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‰∏ä',
    pm: '‰∏ã',
    midnight: 'ÂçàÂ§ú',
    noon: 'Êôå',
    morning: 'Êó©',
    afternoon: 'Âçà',
    evening: 'Êôö',
    night: 'Â§ú'
  },
  abbreviated: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂçàÂ§ú',
    noon: '‰∏≠Âçà',
    morning: '‰∏äÂçà',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÊôö'
  },
  wide: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂçàÂ§ú',
    noon: '‰∏≠Âçà',
    morning: '‰∏äÂçà',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÊôö'
  }
};
var zh_HK_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case 'date':
      return number + 'Êó•';
    case 'hour':
      return number + 'ÊôÇ';
    case 'minute':
      return number + 'ÂàÜ';
    case 'second':
      return number + 'Áßí';
    default:
      return 'Á¨¨ ' + number;
  }
};
var zh_HK_lib_localize_localize = {
  ordinalNumber: zh_HK_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: zh_HK_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const zh_HK_lib_localize = (zh_HK_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/match/index.js


var zh_HK_lib_match_matchOrdinalNumberPattern = /^(Á¨¨\s*)?\d+(Êó•|ÊôÇ|ÂàÜ|Áßí)?/i;
var zh_HK_lib_match_parseOrdinalNumberPattern = /\d+/i;
var zh_HK_lib_match_matchEraPatterns = {
  narrow: /^(Ââç)/i,
  abbreviated: /^(Ââç)/i,
  wide: /^(ÂÖ¨ÂÖÉÂâç|ÂÖ¨ÂÖÉ)/i
};
var zh_HK_lib_match_parseEraPatterns = {
  any: [/^(Ââç)/i, /^(ÂÖ¨ÂÖÉ)/i]
};
var zh_HK_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]Â≠£/i,
  wide: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]Â≠£Â∫¶/i
};
var zh_HK_lib_match_parseQuarterPatterns = {
  any: [/(1|‰∏Ä)/i, /(2|‰∫å)/i, /(3|‰∏â)/i, /(4|Âõõ)/i]
};
var zh_HK_lib_match_matchMonthPatterns = {
  narrow: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])/i,
  abbreviated: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä]|\d|1[12])Êúà/i,
  wide: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])Êúà/i
};
var zh_HK_lib_match_parseMonthPatterns = {
  narrow: [/^‰∏Ä/i, /^‰∫å/i, /^‰∏â/i, /^Âõõ/i, /^‰∫î/i, /^ÂÖ≠/i, /^‰∏É/i, /^ÂÖ´/i, /^‰πù/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))/i, /^ÂçÅ‰∏Ä/i, /^ÂçÅ‰∫å/i],
  any: [/^‰∏Ä|1/i, /^‰∫å|2/i, /^‰∏â|3/i, /^Âõõ|4/i, /^‰∫î|5/i, /^ÂÖ≠|6/i, /^‰∏É|7/i, /^ÂÖ´|8/i, /^‰πù|9/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))|10/i, /^ÂçÅ‰∏Ä|11/i, /^ÂçÅ‰∫å|12/i]
};
var zh_HK_lib_match_matchDayPatterns = {
  narrow: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  short: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  abbreviated: /^ÈÄ±[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  wide: /^ÊòüÊúü[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i
};
var zh_HK_lib_match_parseDayPatterns = {
  any: [/Êó•/i, /‰∏Ä/i, /‰∫å/i, /‰∏â/i, /Âõõ/i, /‰∫î/i, /ÂÖ≠/i]
};
var zh_HK_lib_match_matchDayPeriodPatterns = {
  any: /^(‰∏äÂçà?|‰∏ãÂçà?|ÂçàÂ§ú|[‰∏≠Ê≠£]Âçà|Êó©‰∏ä?|‰∏ãÂçà|Êôö‰∏ä?|ÂáåÊô®)/i
};
var zh_HK_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‰∏äÂçà?/i,
    pm: /^‰∏ãÂçà?/i,
    midnight: /^ÂçàÂ§ú/i,
    noon: /^[‰∏≠Ê≠£]Âçà/i,
    morning: /^Êó©‰∏ä/i,
    afternoon: /^‰∏ãÂçà/i,
    evening: /^Êôö‰∏ä?/i,
    night: /^ÂáåÊô®/i
  }
};
var zh_HK_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: zh_HK_lib_match_matchOrdinalNumberPattern,
    parsePattern: zh_HK_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_HK_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_HK_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_HK_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_HK_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: zh_HK_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const zh_HK_lib_match = (zh_HK_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author Gary Ip [@gaplo]{@link https://github.com/gaplo}
 */
var zh_HK_locale = {
  code: 'zh-HK',
  formatDistance: zh_HK_lib_formatDistance,
  formatLong: zh_HK_lib_formatLong,
  formatRelative: zh_HK_lib_formatRelative,
  localize: zh_HK_lib_localize,
  match: zh_HK_lib_match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const zh_HK = (zh_HK_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/formatDistance/index.js
var zh_TW_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'Â∞ëÊñº 1 Áßí',
    other: 'Â∞ëÊñº {{count}} Áßí'
  },
  xSeconds: {
    one: '1 Áßí',
    other: '{{count}} Áßí'
  },
  halfAMinute: 'ÂçäÂàÜÈêò',
  lessThanXMinutes: {
    one: 'Â∞ëÊñº 1 ÂàÜÈêò',
    other: 'Â∞ëÊñº {{count}} ÂàÜÈêò'
  },
  xMinutes: {
    one: '1 ÂàÜÈêò',
    other: '{{count}} ÂàÜÈêò'
  },
  xHours: {
    one: '1 Â∞èÊôÇ',
    other: '{{count}} Â∞èÊôÇ'
  },
  aboutXHours: {
    one: 'Â§ßÁ¥Ñ 1 Â∞èÊôÇ',
    other: 'Â§ßÁ¥Ñ {{count}} Â∞èÊôÇ'
  },
  xDays: {
    one: '1 Â§©',
    other: '{{count}} Â§©'
  },
  aboutXWeeks: {
    one: 'Â§ßÁ¥Ñ 1 ÂÄãÊòüÊúü',
    other: 'Â§ßÁ¥Ñ {{count}} ÂÄãÊòüÊúü'
  },
  xWeeks: {
    one: '1 ÂÄãÊòüÊúü',
    other: '{{count}} ÂÄãÊòüÊúü'
  },
  aboutXMonths: {
    one: 'Â§ßÁ¥Ñ 1 ÂÄãÊúà',
    other: 'Â§ßÁ¥Ñ {{count}} ÂÄãÊúà'
  },
  xMonths: {
    one: '1 ÂÄãÊúà',
    other: '{{count}} ÂÄãÊúà'
  },
  aboutXYears: {
    one: 'Â§ßÁ¥Ñ 1 Âπ¥',
    other: 'Â§ßÁ¥Ñ {{count}} Âπ¥'
  },
  xYears: {
    one: '1 Âπ¥',
    other: '{{count}} Âπ¥'
  },
  overXYears: {
    one: 'Ë∂ÖÈÅé 1 Âπ¥',
    other: 'Ë∂ÖÈÅé {{count}} Âπ¥'
  },
  almostXYears: {
    one: 'Â∞áËøë 1 Âπ¥',
    other: 'Â∞áËøë {{count}} Âπ¥'
  }
};
var zh_TW_lib_formatDistance_formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = zh_TW_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + 'ÂÖß';
    } else {
      return result + 'Ââç';
    }
  }
  return result;
};
/* harmony default export */ const zh_TW_lib_formatDistance = (zh_TW_lib_formatDistance_formatDistance);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/formatLong/index.js

var zh_TW_lib_formatLong_dateFormats = {
  full: "y'Âπ¥'M'Êúà'd'Êó•' EEEE",
  long: "y'Âπ¥'M'Êúà'd'Êó•'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var zh_TW_lib_formatLong_timeFormats = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var zh_TW_lib_formatLong_dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var zh_TW_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_TW_lib_formatLong_dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_TW_lib_formatLong_timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_TW_lib_formatLong_dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const zh_TW_lib_formatLong = (zh_TW_lib_formatLong_formatLong);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/formatRelative/index.js
var zh_TW_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'‰∏äÂÄã'eeee p",
  yesterday: "'Êò®Â§©' p",
  today: "'‰ªäÂ§©' p",
  tomorrow: "'ÊòéÂ§©' p",
  nextWeek: "'‰∏ãÂÄã'eeee p",
  other: 'P'
};
var zh_TW_lib_formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return zh_TW_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const zh_TW_lib_formatRelative = (zh_TW_lib_formatRelative_formatRelative);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/localize/index.js

var zh_TW_lib_localize_eraValues = {
  narrow: ['Ââç', 'ÂÖ¨ÂÖÉ'],
  abbreviated: ['Ââç', 'ÂÖ¨ÂÖÉ'],
  wide: ['ÂÖ¨ÂÖÉÂâç', 'ÂÖ¨ÂÖÉ']
};
var zh_TW_lib_localize_quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Á¨¨‰∏ÄÂàª', 'Á¨¨‰∫åÂàª', 'Á¨¨‰∏âÂàª', 'Á¨¨ÂõõÂàª'],
  wide: ['Á¨¨‰∏ÄÂàªÈêò', 'Á¨¨‰∫åÂàªÈêò', 'Á¨¨‰∏âÂàªÈêò', 'Á¨¨ÂõõÂàªÈêò']
};
var zh_TW_lib_localize_monthValues = {
  narrow: ['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'ÂçÅ', 'ÂçÅ‰∏Ä', 'ÂçÅ‰∫å'],
  abbreviated: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà'],
  wide: ['‰∏ÄÊúà', '‰∫åÊúà', '‰∏âÊúà', 'ÂõõÊúà', '‰∫îÊúà', 'ÂÖ≠Êúà', '‰∏ÉÊúà', 'ÂÖ´Êúà', '‰πùÊúà', 'ÂçÅÊúà', 'ÂçÅ‰∏ÄÊúà', 'ÂçÅ‰∫åÊúà']
};
var zh_TW_lib_localize_dayValues = {
  narrow: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
  short: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
  abbreviated: ['ÈÄ±Êó•', 'ÈÄ±‰∏Ä', 'ÈÄ±‰∫å', 'ÈÄ±‰∏â', 'ÈÄ±Âõõ', 'ÈÄ±‰∫î', 'ÈÄ±ÂÖ≠'],
  wide: ['ÊòüÊúüÊó•', 'ÊòüÊúü‰∏Ä', 'ÊòüÊúü‰∫å', 'ÊòüÊúü‰∏â', 'ÊòüÊúüÂõõ', 'ÊòüÊúü‰∫î', 'ÊòüÊúüÂÖ≠']
};
var zh_TW_lib_localize_dayPeriodValues = {
  narrow: {
    am: '‰∏ä',
    pm: '‰∏ã',
    midnight: 'ÂáåÊô®',
    noon: 'Âçà',
    morning: 'Êó©',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö',
    night: 'Â§ú'
  },
  abbreviated: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈñì'
  },
  wide: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈñì'
  }
};
var zh_TW_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: '‰∏ä',
    pm: '‰∏ã',
    midnight: 'ÂáåÊô®',
    noon: 'Âçà',
    morning: 'Êó©',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö',
    night: 'Â§ú'
  },
  abbreviated: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈñì'
  },
  wide: {
    am: '‰∏äÂçà',
    pm: '‰∏ãÂçà',
    midnight: 'ÂáåÊô®',
    noon: '‰∏≠Âçà',
    morning: 'Êó©Êô®',
    afternoon: '‰∏≠Âçà',
    evening: 'Êôö‰∏ä',
    night: 'Â§úÈñì'
  }
};
var zh_TW_lib_localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case 'date':
      return number + 'Êó•';
    case 'hour':
      return number + 'ÊôÇ';
    case 'minute':
      return number + 'ÂàÜ';
    case 'second':
      return number + 'Áßí';
    default:
      return 'Á¨¨ ' + number;
  }
};
var zh_TW_lib_localize_localize = {
  ordinalNumber: zh_TW_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: zh_TW_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const zh_TW_lib_localize = (zh_TW_lib_localize_localize);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/match/index.js


var zh_TW_lib_match_matchOrdinalNumberPattern = /^(Á¨¨\s*)?\d+(Êó•|ÊôÇ|ÂàÜ|Áßí)?/i;
var zh_TW_lib_match_parseOrdinalNumberPattern = /\d+/i;
var zh_TW_lib_match_matchEraPatterns = {
  narrow: /^(Ââç)/i,
  abbreviated: /^(Ââç)/i,
  wide: /^(ÂÖ¨ÂÖÉÂâç|ÂÖ¨ÂÖÉ)/i
};
var zh_TW_lib_match_parseEraPatterns = {
  any: [/^(Ââç)/i, /^(ÂÖ¨ÂÖÉ)/i]
};
var zh_TW_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]Âàª/i,
  wide: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]ÂàªÈêò/i
};
var zh_TW_lib_match_parseQuarterPatterns = {
  any: [/(1|‰∏Ä)/i, /(2|‰∫å)/i, /(3|‰∏â)/i, /(4|Âõõ)/i]
};
var zh_TW_lib_match_matchMonthPatterns = {
  narrow: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])/i,
  abbreviated: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä]|\d|1[12])Êúà/i,
  wide: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])Êúà/i
};
var zh_TW_lib_match_parseMonthPatterns = {
  narrow: [/^‰∏Ä/i, /^‰∫å/i, /^‰∏â/i, /^Âõõ/i, /^‰∫î/i, /^ÂÖ≠/i, /^‰∏É/i, /^ÂÖ´/i, /^‰πù/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))/i, /^ÂçÅ‰∏Ä/i, /^ÂçÅ‰∫å/i],
  any: [/^‰∏Ä|1/i, /^‰∫å|2/i, /^‰∏â|3/i, /^Âõõ|4/i, /^‰∫î|5/i, /^ÂÖ≠|6/i, /^‰∏É|7/i, /^ÂÖ´|8/i, /^‰πù|9/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))|10/i, /^ÂçÅ‰∏Ä|11/i, /^ÂçÅ‰∫å|12/i]
};
var zh_TW_lib_match_matchDayPatterns = {
  narrow: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  short: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  abbreviated: /^ÈÄ±[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
  wide: /^ÊòüÊúü[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i
};
var zh_TW_lib_match_parseDayPatterns = {
  any: [/Êó•/i, /‰∏Ä/i, /‰∫å/i, /‰∏â/i, /Âõõ/i, /‰∫î/i, /ÂÖ≠/i]
};
var zh_TW_lib_match_matchDayPeriodPatterns = {
  any: /^(‰∏äÂçà?|‰∏ãÂçà?|ÂçàÂ§ú|[‰∏≠Ê≠£]Âçà|Êó©‰∏ä?|‰∏ãÂçà|Êôö‰∏ä?|ÂáåÊô®)/i
};
var zh_TW_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^‰∏äÂçà?/i,
    pm: /^‰∏ãÂçà?/i,
    midnight: /^ÂçàÂ§ú/i,
    noon: /^[‰∏≠Ê≠£]Âçà/i,
    morning: /^Êó©‰∏ä/i,
    afternoon: /^‰∏ãÂçà/i,
    evening: /^Êôö‰∏ä?/i,
    night: /^ÂáåÊô®/i
  }
};
var zh_TW_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: zh_TW_lib_match_matchOrdinalNumberPattern,
    parsePattern: zh_TW_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_TW_lib_match_parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_TW_lib_match_parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_TW_lib_match_parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: zh_TW_lib_match_parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: zh_TW_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const zh_TW_lib_match = (zh_TW_lib_match_match);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author tonypai [@tpai]{@link https://github.com/tpai}
 * @author Jack Hsu [@jackhsu978]{@link https://github.com/jackhsu978}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */
var zh_TW_locale = {
  code: 'zh-TW',
  formatDistance: zh_TW_lib_formatDistance,
  formatLong: zh_TW_lib_formatLong,
  formatRelative: zh_TW_lib_formatRelative,
  localize: zh_TW_lib_localize,
  match: zh_TW_lib_match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const zh_TW = (zh_TW_locale);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/index.js
// This file is generated automatically by `scripts/build/indices.ts`. Please, don't change it.






























































































/***/ }),

/***/ 69427:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ v)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85893);

const h = (t) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "1rem", height: "1rem", fill: "none", viewBox: "0 0 24 24", ...t, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", { fill: "#8E8EA9", d: "M17 14h-4.34a6 6 0 1 1 0-4H23v4h-2v4h-4v-4ZM7 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" }) }), v = h;



/***/ })

}]);